diff --git modules/user/user.pages.inc modules/user/user.pages.inc
index 697a82d..797e3d1 100644
--- modules/user/user.pages.inc
+++ modules/user/user.pages.inc
@@ -135,6 +135,16 @@ function user_pass_reset($form, &$form_state, $uid, $timestamp, $hashed_pass, $a
           // Let the user's password be changed without the current password check.
           $token = drupal_hash_base64(drupal_random_bytes(55));
           $_SESSION['pass_reset_' . $user->uid] = $token;
+          //clear out flood event for user trying to log in too many times
+          if (variable_get('user_failed_login_identifier_uid_only', FALSE)) {
+            $identifier = $account->uid;
+          }
+          else {
+            $identifier = $account->uid . '-' . ip_address();
+          }
+          flood_clear_event('failed_login_attempt_user', $identifier);
+          //also clear out the ip attempts for that user
+          flood_clear_event('failed_login_attempt_ip');
           drupal_goto('user/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token)));
         }
         else {
@@ -319,6 +329,15 @@ function user_profile_form_submit($form, &$form_state) {
     // Remove the password reset tag since a new password was saved.
     unset($_SESSION['pass_reset_'. $account->uid]);
   }
+
+  // Clear the flood table. Since we don't know the IP address for this user
+  // we can't use flood_clear_event because we need to use the LIKE operator.
+  $identifier = $account->uid .'-%';
+  db_delete('flood')
+    ->condition('event', 'failed_login_attempt_user')
+    ->condition('identifier', $identifier, 'LIKE')
+    ->execute();
+
   // Clear the page cache because pages can contain usernames and/or profile information:
   cache_clear_all();
 
diff --git modules/user/user.test modules/user/user.test
index 6ecbfac..5c13145 100644
--- modules/user/user.test
+++ modules/user/user.test
@@ -396,6 +396,67 @@ class UserLoginTestCase extends DrupalWebTestCase {
   }
 
   /**
+    * Test that flood events are removed after an account has been updated.
+    */
+   function testUpdatedUserFloodControl() {
+     // Set a high global limit out so that it is not relevant in the test.
+     variable_set('user_failed_login_ip_limit', 4000);
+     // Set the per-user login limit.
+     variable_set('user_failed_login_user_limit', 3);
+
+     $user1 = $this->drupalCreateUser(array('administer users'));
+     $user2 = $this->drupalCreateUser(array());
+     $user2->pass_raw .= 'incorrect';
+
+     // Try 3 failed logins.
+     for ($i = 0; $i < 3; $i++) {
+       $this->assertFailedLogin($user2);
+     }
+
+     // The next login trial should result in an user-based flood error message.
+     $this->assertFailedLogin($user2, 'user');
+
+     // Update the account and assert the user can login again.
+     $this->drupalLogin($user1);
+     $user2->pass_raw = 'goodpass';
+     $edit = array(
+       'pass[pass1]' => $user2->pass_raw,
+       'pass[pass2]' => $user2->pass_raw,
+     );
+     $this->drupalPost('user/' . $user2->uid . '/edit', $edit, t('Save'));
+     $this->drupalLogout();
+     $this->drupalLogin($user2);
+   }
+
+   /**
+    * Test that flood events are removed after password reset.
+    */
+   function testResetPasswordFloodControl() {
+     // Set a high global limit out so that it is not relevant in the test.
+     variable_set('user_failed_login_ip_limit', 4000);
+     // Set the per-user login limit.
+     variable_set('user_failed_login_user_limit', 3);
+
+     $user1 = $this->drupalCreateUser();
+     $correct = $user1->pass_raw;
+     $user1->pass_raw .= 'incorrect';
+
+     // Try 3 failed logins.
+     for ($i = 0; $i < 3; $i++) {
+       $this->assertFailedLogin($user1);
+     }
+
+     // The next login trial should result in an user-based flood error message.
+     $this->assertFailedLogin($user1, 'user');
+
+     // Request new password, logout and login.
+     $this->drupalPost(user_pass_reset_url($user1), array(), t('Log in'));
+     $this->drupalLogout();
+     $user1->pass_raw = $correct;
+     $this->drupalLogin($user1);
+   }
+
+  /**
    * Test that user password is re-hashed upon login after changing $count_log2.
    */
   function testPasswordRehashOnLogin() {
