<?php
// $Id: alchemy.module,v 1.1.2.3 2010/11/17 21:17:48 tomdude48 Exp $


/**
 * @file
 *
 */

define('ALCHEMY_DEBUG', FALSE); // set to true for debug mode, false for production 


/**
 * Implements hook_menu().
().
 */
function alchemy_menu() {
  $items = array();
  $items['alchemy/util'] = array(
    'title' => t('Alchemy Util'),
    'page callback' => 'alchemy_util',
    'access callback' => 'user_access',
    'access arguments' => array('access alchemy'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['alchemy'] = array(
    'title' => t('Alchemy Keywords'),
    'page callback' => 'alchemy_get_elements_from_node',
    'access callback' => 'user_access',
    'access arguments' => array('access alchemy'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/services/alchemy'] = array(
    'title' => t('Alchemy'),
    'description' => 'Settings for Alchemy.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alchemy_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'alchemy.admin.inc',
  );
  if (function_exists('alchemy_contentanalysis_menu') || function_exists('alchemy_tagging_suggest_menu')) {
    $items['admin/config/services/alchemy/general'] = $items['admin/config/services/alchemy'];
    $items['admin/config/services/alchemy/general']['title'] = t('General');
    $items['admin/config/services/alchemy/general']['type'] = MENU_LOCAL_TASK;
    $items['admin/config/services/alchemy/general']['weight'] = -10;
  }
  return $items;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function alchemy_util($node = NULL, $type = NULL) {
  //$ret = libraries_get_path('AlchemyAPI');

  //dsm($ret);

  //print_r($r);

  return 'OK';
}

/**
 *
 * @param node object or nid $node
 */
function alchemy_get_elements_from_node($node, $type = 'keywords', $output = 'normalized', $use_cache = FALSE) {
  // chech if node argument is a node or a nid

  if (!is_object($node) && is_numeric($node)) {
    $node = node_load($node);
  }
  if (!$node) {
    return array();
  }
  
  //$r = render($node->body);
//dsm($node);

  $text = strip_tags($node->title . " " . $node->body['und'][0]['value']);
  $elements = alchemy_get_elements($text, $type, $output = 'normalized', $node->nid, TRUE);
//dsm($elements);
  return $elements;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function alchemy_get_elements($text, $type = 'keywords', $output = 'normalized', $cid = 0, $use_cache = FALSE) {
  //dsm("alchemy_get_elements($text, $type, $output, $cid, $use_cache)");  

  // clean tags

  $text = strip_tags( $text);
  $text = html_entity_decode( $text, ENT_QUOTES, 'UTF-8' );
  $text = str_ireplace( '&nbsp;', ' ', $text );

  if ($use_cache && $cid) {
    $resultstr = alchemy_cache_get($cid, $type);
    //watchdog('alchemy', 'fectch from cache: ' . $resultstr);   

  }
  if (!isset($resultstr) || !$resultstr) {

    if (!$alchemyObj = alchemy_new_alchemy_obj()) {
      return FALSE;
    }

    // Extract topic keywords from a text string.

    try {
      switch ($type) {
        case 'entities':
          $resultstr = $alchemyObj->TextGetRankedNamedEntities($text);
          break;
        case 'categories':
          $resultstr = $alchemyObj->TextGetCategory($text);
          break;
        case 'concepts':
          $resultstr = $alchemyObj->TextGetRankedConcepts($text);
          break;
        case 'keywords':
          $resultstr = $alchemyObj->TextGetRankedKeywords($text);
          break;
      }
    }
    catch (Exception $exc) {
      drupal_set_message($exc->getMessage(), 'warning');
      return;
    }

    if ($cid) {
      alchemy_cache_set($cid, $type, $resultstr);
    }
  }

  if ($output == 'xml') {
    return $resultstr;
  }

  $result = alchemy_xml2array($resultstr);

  if ($output == 'array') {
    return $result;
  }
  $elements = array();
  switch ($type) {
    case 'entities':
      $elms = $result->entities->entity;
      break;
    case 'categories':
      // TODO

      //print_r($result);

      $elms = array();
      break;
    case 'concepts':
      $elms = $result->concepts->concept;
      break;
    case 'keywords':
      $elms = $result->keywords->keyword;
      break;
  }
  //print_r($elms);

  if (is_object($elms)) {
    foreach ($elms as $v) {
      $hash = (string) $v->text;
      $elements[$hash] = array(
        'term' => (string) $v->text,
        'relevance' => (float) $v->relevance,
      );
      if ($v->type) {
        $elements[$hash]['type'] = (string) $v->type;
      }
      if ($v->count) {
        $elements[$hash]['count'] = (string) $v->count;
      }
      if ($v->disambiguated) {
        $elements[$hash]['disambiguated'] = $v->disambiguated;
      }
    }
  }
  return $elements;
}

/**
 * Includes the Alchemy API Class, checking first to see if it exists.
 */
function alchemy_include_alchemy_class() {
  // check if another module has not already included the AlchemyAPI class.

  $ver = '';
  if (variable_get('alchemy_usecurl', 0)) {
    $ver = '_CURL';
  }
  if (class_exists('AlchemyAPI')) {
    return TRUE;
  }
  $files[] = './' . drupal_get_path('module', 'alchemy') . '/AlchemyAPI/module/AlchemyAPI' . $ver . '.php';
  if (module_exists('libraries') && ($p = libraries_get_path('AlchemyAPI'))) {
    $files[] = './' . $p . '/module/AlchemyAPI' . $ver . '.php';
  }
  foreach ($files as $f) {
    if (file_exists($f)) {
      $file = $f;
      break;
    }
  }
  if (!isset($file) || !$file) {
    $msg = t('The Alchemy module requires the Alchemy SDK. Use the PHP version of the SDK.');
    $msg .= ' ' . l(t('Download the SDK here.'), 'http://www.alchemyapi.com/tools/', array('attributes' => array('target' => 'alchemy')));
    $msg .= "<br><br>";
    $msg .= t('Download the files and place them in a folder named "AlchemyAPI" under the alchemy module directory.');
    if ($analysis) {
      $analysis['messages'][] = contentanalysis_format_message($msg, 'error');
    }
    else {
      drupal_set_message($msg, 'error');
    }
    return FALSE;
  }
  require_once DRUPAL_ROOT . '/' . $file;
  return TRUE;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function alchemy_new_alchemy_obj() {
  static $alchemyObj;
  if ($alchemyObj) {
    return $alchemyObj;
  }
  // Load the AlchemyAPI module code.

  if (!alchemy_include_alchemy_class()) {
    return FALSE;
  }

  // Create an AlchemyAPI object.

  $alchemyObj = new AlchemyAPI();

  $apikey = alchemy_get_apikey();
  if (!$apikey) {
    return FALSE;
  }
  $alchemyObj->setAPIKey($apikey);

  return $alchemyObj;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function alchemy_get_message_apimissing() {
  $msg = t('You must set the Alchemy API key in order to use Alchemy. !settings_link.', 
    array(
    '!settings_link' => l(t('Set key here'), 'admin/config/services/alchemy', array('attributes' => array('target', 'settings'))),
  )
  );
  return $msg;
}

/**
 * Returns api key sent in alchemy settings admin
 */
function alchemy_get_apikey() {
  $apikey = variable_get('alchemy_apikey', '');
  if (!$apikey) {
    $msg = alchemy_get_message_apimissing();
    drupal_set_message($msg);
    return false;
  }
  return $apikey;
}

/**
 * Utility function to convert xml to a php array
 * @param xml string $xmlstr
 */
function alchemy_xml2array($xmlstr) {
  $xmlarr = new SimpleXMLElement($xmlstr);
  return $xmlarr;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function alchemy_cache_get($cid, $command) {
  $query = db_select('alchemy_cache', 'c')
    ->fields('c', array('data'))
    ->condition('c.nid', $cid)
    ->condition('c.command', $command);
  if ($data = $query->execute()->fetchField()) {
    return $data;
  }
  return FALSE;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function alchemy_cache_set($cid, $command, $data) {
  if (is_numeric($cid)) {
    alchemy_cache_clear($cid, $command);

    $fields = array(
      'nid' => $cid,
      'path' => '',
      'created' => REQUEST_TIME,
      'command' => $command,
      'data' => $data,
    );
    $query = db_insert('alchemy_cache')
      ->fields($fields);
    $query->execute();
  }
  return TRUE;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function alchemy_cache_clear($cid, $command) {
  if (is_numeric($cid)) {
    $query = db_delete('alchemy_cache')
      ->condition('nid', $cid)
      ->condition('command', $command);
    $query->execute();
  }
  return TRUE;
}

/**
 * Generates type options and default settings
 * @param $defaults
 */
function alchemy_get_types($defaults = FALSE) {
  if ($defaults) {
    $types = array(
      'concepts',
      'entities',
      'keywords',
    );
  }
  else {
    $types = array(
      'concepts' => t('Concepts'),
      'entities' => t('Entities'),
      'keywords' => t('Keywords'),
    );
  }
  return $types;
}

/* this functionality was centralized to intel
function alchemy_term_save($term) {
  $page_specified = 0;
  $key = array(
    'analysis' => $term->analysis,
    'term' => $term->term,
    'type' => !empty($term->type) ? $term->type : '',
  );
  $fields = array(
    'relevance' => $term->relevance
  );
  if (!empty($term->entity_id)) {
    $key['entity_id'] = $term->entity_id;
    $key['entity_type'] = $term->entity_type;
    $page_specified = 1;
  }
  if (!empty($term->path)) {
    if ($page_specified) {
      $fields['path'] = $term->path;
    }
    else {
      $key['path'] = $term->path;
      $page_specified = 1;
    }
  }
  if (!empty($term->alias)) {
    if ($page_specified) {
      $fields['alias'] = $term->alias;
    }
    else {
      $key['alias'] = $term->alias;
      $page_specified = 1;
    }
  }
  if ($page_specified) {
    $query = db_merge('alchemy_term')
      ->key($key)
      ->fields($fields);
    $query->execute();
    return TRUE;
  }
  return FALSE;
}

function alchemy_term_load_by_params($entity_type = null, $entity_id = null, $path = null, $alias = null, $analysis = null, $term = null, $type = null) {
  $query = db_select('alchemy_term', 't')
    ->fields('t');
  if (isset($entity_type) && isset($entity_id)) {
    $query->condition('entity_id', $entity_id);
    $query->condition('entity_type', $entity_type);
  }
  if (isset($path)) {
    $query->condition('path', $path);
  }
  if (isset($alias)) {
    $query->condition('alias', $alias);
  }
  if (isset($analysis)) {
    $query->condition('analysis', $analysis);
  }
  if (isset($term)) {
    $query->condition('term', $term);
  }
  if (isset($type)) {
    $query->condition('type', $type);
  }

  $result = $query->execute();
  $terms = array();
  while($terms[] = $result->fetchObject());
  // remove FALSE as last push
  array_pop($terms);
  return $terms;
}

function alchemy_term_analysis_count_load($analysis = null, $term = null, $value0 = null, $value1 = null, $op0 = null, $op1 = null) {
  $query = db_select('alchemy_term', 't')
    ->fields('t', array('relevance'));

  if (isset($analysis)) {
    $query->condition('analysis', $analysis);
  }
  if (isset($term)) {
    $query->condition('term', $term);
  }
  if (isset($value0)) {
    if (!isset($value1)) {
      if (!isset($op0)) {
        $op0 = '=';
      }
      $query->condition('relevance', $value0, $op0);
    }
    else {
      if (!isset($op0)) {
        $op0 = '>=';
      }
      if (!isset($op1)) {
        $op1 = '<';
      }
      $query->condition('relevance', $value0, $op0);
      $query->condition('relevance', $value1, $op1);
    }
  }


  return $query->execute()->rowCount();
}

function alchemy_term_delete_by_params($entity_type = null, $entity_id = null, $path = null, $alias = null, $analysis = null, $term = null, $type = '') {
  $query = db_delete('alchemy_term');
  if (isset($entity_type) && isset($entity_id)) {
    $query->condition('entity_id', $entity_id);
    $query->condition('entity_type', $entity_type);
  }
  if (isset($path)) {
    $query->condition('path', $path);
  }
  if (isset($alias)) {
    $query->condition('alias', $alias);
  }
  if (isset($analysis)) {
    $query->condition('analysis', $analysis);
  }
  if (isset($term)) {
    $query->condition('term', $term);
  }
  if (isset($type)) {
    $query->condition('type', $type);
  }

  $result = $query->execute();
}
*/

/**
 * Implements hook_intel_page_attribute_info()
 * @return array
 */
function alchemy_intel_page_attribute_info() {
  $attributes = array();
  $attributes['cka'] = array(
    'title' => t('Content keywords'),
    //'title_plural' => t('Content keywords'),
    'description' => t('Keywords extracted from content via Alchemy'),
    'type' => 'list',
    'encode' => 1,
    'options_description' => t('Auto generated via Alchemy API.'),
    'options info callback' => 'alchemy_page_attribute_cka_option_info',
    'storage' => array(
      'analytics' => array(
        'struc' => 'dimension',
        'index' => 11,
      ),
    ),
  );
  $attributes['cca'] = array(
    'title' => t('Content concepts'),
    //'title_plural' => t('Title word counts'),
    'description' => t('Concepts extracted from content via Alchemy.'),
    'type' => 'list',
    'encode' => 1,
    'options_description' => t('Auto generated via Alchemy API.'),
    'options info callback' => 'alchemy_page_attribute_cca_option_info',
    'storage' => array(
      'analytics' => array(
        'struc' => 'dimension',
        'index' => 11,
      ),
    ),
  );
  $attributes['cea'] = array(
    'title' => t('Content entities'),
    //'title_plural' => t('Title character counts'),
    'description' => t('Entities extracted from content via Alchemy'),
    'type' => 'list',
    'encode' => 1,
    'options_description' => t('Auto generated via Alchemy API.'),
    'options info callback' => 'alchemy_page_attribute_cea_option_info',
    'storage' => array(
      'analytics' => array(
        'struc' => 'dimension',
        'index' => 11,
      ),
    ),
  );

  return $attributes;
}

function alchemy_page_attribute_cka_option_info($option_id, $data_options) {
  $id = intel_index_decode($option_id);
  $vs = intel_value_str_load($id);
  $data = array(
    'title' => isset($vs->value_str) ? $vs->value_str : $option_id,
  );

  if (!empty($data_options['page_count'])) {
    $data['page_count'] = intel_entity_attr_entity_count('cka', $id, null, null, null, 'vsid');
  }
  return $data;
}

function alchemy_page_attribute_cca_option_info($option_id, $data_options) {
  $id = intel_index_decode($option_id);
  $vs = intel_value_str_load($id);
  $data = array(
    'title' => isset($vs->value_str) ? $vs->value_str : $option_id,
  );

  if (!empty($data_options['page_count'])) {
    $data['page_count'] = intel_entity_attr_entity_count('cca', $id, null, null, null, 'vsid');
  }
  return $data;
}

function alchemy_page_attribute_cea_option_info($option_id, $data_options) {

  $id = intel_index_decode($option_id);
  $vs = intel_value_str_load($id);
  $data = array(
    'title' => isset($vs->value_str) ? $vs->value_str : $option_id,
  );

  if (!empty($data_options['page_count'])) {
    $data['page_count'] = intel_entity_attr_entity_count('cea', $id, null, null, null, 'vsid');
  }
  return $data;
}

/**
 * Implements hook_intel_entity_intel_attributes_alter()
 * @param $attrs
 * @param null $entity
 * @param null $entity_type
 */

//function alchemy_intel_entity_intel_attributes_alter(&$attrs, $entity = null, $entity_type = null) {
//  if ($entity_type != 'node') {
//    return;
//  }
//  $context = array(
//    'nid' => $entity->nid,
//  );
//  $aid = contentanalysis_get_aid($context);
//
//  if (empty($aid)) {
//    return;
//  }
//
//  $a = array(
//    'keyword' => 'cka',
//    'concept' => 'cca',
//    'entity' => 'cea',
//  );
//
//  foreach ($a AS $analysis => $attr_key) {
//    $terms = alchemy_term_load_by_params('contentanalysis', $aid, null, null, $analysis);
//
//    if (!empty($terms)) {
//      foreach ($terms AS $term) {
//        $k = (($analysis == 'entity') ? $term->type . ':' : '') . $term->term;
//        $attrs['page'][$attr_key][$k] = '';
//      }
//    }
//    /*
//    if ($value = contentanalysis_stat_load($aid, 'seo', $stat_name)) {
//      $attrs['page'][$attr_key] = $value;
//    }
//    */
//  }
//}
