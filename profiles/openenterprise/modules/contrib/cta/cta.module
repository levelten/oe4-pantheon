<?php

/**
 * @file
 */
define('CTA_GA_EVENT_TRACK_DEFAULT', 1);
define('CTA_GA_EVENT_TRACK_DISPLAY_DEFAULT', 1);
define('CTA_GA_EVENT_TRACK_CLICK_DEFAULT', 1);
define('CTA_GA_EVENT_TRACK_CONVERSION_DEFAULT', 1);

/**
 * Implements hook_menu()
 */
function cta_menu() {
  $items = array();
  $items['admin/structure/cta'] = array(
    'title' => 'CTA selectors',
    'description' => 'Configure calls to actions to display in blocks.',
    'page callback' => 'cta_selector_list',
    'access arguments' => array('administer ctas'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'file' => 'cta.admin.inc',
  );
  /*
  $items['admin/structure/cta/selector'] = array(
    'title' => 'Sets',
    'description' => 'List the current cta blocks on the site.',
    'page callback' => 'cta_selector_list',
    'access arguments' => array('administer ctas'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'cta.admin.inc',
  );
  $items['admin/structure/cta/selector/list'] = array(
    'title' => 'List',
    'description' => 'List the current cta blocks on the site.',
    'page callback' => 'cta_selector_list',
    'access arguments' => array('administer ctas'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'cta.admin.inc',
  );
  */
  $items['admin/structure/cta/selector/add'] = array(
    'title' => 'Add CTA selector',
    'description' => 'Add a new cta block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cta_selector_add_form'),
    'access arguments' => array('administer ctas'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 2,
    'file' => 'cta.admin.inc',
  );
  $items['admin/structure/cta/selector/edit/%cta_selector'] = array(
    'title' => 'Edit CTA block',
    'description' => 'Configure a CTA block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cta_selector_form', 5),
    'access arguments' => array('administer ctas'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cta.admin.inc',
  );
  $items['admin/structure/cta/selector/delete/%cta_selector'] = array(
    'title' => 'Delete widget set',
    'description' => 'Delete an widget set.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cta_selector_delete_form', 5),
    'access arguments' => array('administer ctas'),
    'file' => 'cta.admin.inc',
  );
  
  // select CTA paths
  $items['admin/structure/cta/select/%/%'] = array(
    'title' => 'Select CTA',
    'description' => 'Configure an widget set.',
    'page callback' => 'cta_select_cta_list',
    'page arguments' => array(4, 5),
    'access arguments' => array('select ctas'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'cta.admin.inc',
  );
  
  /*
  $items['admin/structure/cta/select/%/%/cta'] = array(
    'title' => 'Select CTA',
    //'description' => 'Configure an widget set.',
    //'page callback' => 'cta_select_cta_list',
    //'page arguments' => array(4, 5),
    //'access arguments' => array('administer widgets sets'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    //'file' => 'cta.admin.inc',
    'weight' => -10,
  );
  
  $items['admin/structure/cta/select/%/%/block'] = array(
    'title' => 'Select block',
    'description' => 'Attach custom CTA code',
    'page callback' => 'cta_select_block_list',
    'page arguments' => array(4, 5),
    'access arguments' => array('administer widgets sets'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'cta.admin.inc',
  );
  
  $items['admin/structure/cta/select/%/%/custom'] = array(
    'title' => 'Custom CTA',
    'description' => 'Attach custom CTA code',
    'page callback' => 'cta_select_custom_page',
    'page arguments' => array(4, 5),
    'access arguments' => array('administer widgets sets'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'cta.admin.inc',
  );
  */
  
  $items['admin/structure/cta/select/bean/%/%/%'] = array(
    'title' => 'Select CTA',
    'description' => 'Select CTA.',
    'page callback' => 'cta_select_bean',
    'page arguments' => array(5, 6, 7),
    'access arguments' => array('select ctas'),
    'type' => MENU_CALLBACK,
    'file' => 'cta.admin.inc',
  );
  
  $items['admin/structure/cta/select/block/%/%/%/%'] = array(
    'title' => 'Select CTA',
    'description' => 'Select CTA.',
    'page callback' => 'cta_select_block',
    'page arguments' => array(5, 6, 7, 8),
    'access arguments' => array('select ctas'),
    'type' => MENU_CALLBACK,
    'file' => 'cta.admin.inc',
  );
  
  $items['admin/content/cta'] = array(
    'title' => 'CTAs',
    'description' => 'Calls to action used on your site.',
    'page callback' => 'cta_cta_list',
    'access arguments' => array('select ctas'),
    'file' => 'cta.admin.inc',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );
  
  $items['cta/render'] = array(
    'title' => 'CTA render',
    'description' => 'Select CTA.',
    'page callback' => 'cta_render',
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  if (module_exists('intel')) {
    $items['admin/config/services/intel/modules/cta'] = array(
      'title' => 'CTA',
      'description' => 'CTA/Intel config',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cta_admin_intel_admin_config'),
      'access callback' => 'user_access',
      'access arguments' => array('admin intel'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'cta.admin.inc',
    ); 
  }

  $items['cta/util'] = array(
    'title' => 'Link Intel util',
    'page callback' => 'cta_util',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function cta_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'block/add' on 'admin/content/blocks' page.
//dsm($data);
//dsm($router_item);
//dsm($root_path);
  if (($router_item['path'] == 'admin/content/cta')) {
    $item = menu_get_item('block/add/cta');
    $item['title'] = t('Add CTA block');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  else if (($router_item['path'] == 'admin/structure/cta/select/%/%')) {
    $item = menu_get_item('block/add/cta');
    $item['title'] = t('Add CTA');
    $item['localized_options'] = array(
      'query' => array(
        'cta_selector' => $router_item['map'][4],
        'destination' => drupal_get_destination(),
      ),
    );
    
//dsm($item);
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function cta_permission() {
  $permissions = array();
  $permissions['administer ctas'] = array(
    'title' => t('Administer CTAs'),
    'description' => t('Enables role to create and edit CTA selectors and to assign blocks to selectors.'),
  );
  $permissions['select ctas'] = array(
    'title' => t('Select CTAs'),
    'description' => t('Enables role to change CTA selection on pages.'),
  );
  return $permissions;

}


/**
 * Testing function
 */
function cta_util() {
  $meta = cta_block_meta_load('module', 2);
  dsm($meta);
  return 'OK';
}

/*
function cta_form_alter(&$form, &$form_state, $form_id) {
	dpm($form_id);
  dsm($form);
}
*/



function cta_ret_load($arg) {
  return $arg;
}

/**
 * Get an array of all sets and their settings.
 *
 * @return
 *   An array of sets keyed by the widget set ID (wsid).
 * @see cta_cta_load()
 */
function cta_selectors($refresh = FALSE) {
  $cta_selectors = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if ($refresh || !isset($cta_selectors)) {
    if (FALSE && !$refresh && ($cache = cache_get('cta_selector', 'cache'))) {
      $cta_selectors = $cache->data;
    }
    else {
      $cta_selectors = array();

      // Select all the user-defined sets.
      $cta_selectors = db_select('cta_selector', NULL, array('fetch' => PDO::FETCH_ASSOC))
        ->fields('cta_selector')
        ->orderBy('description')
        ->execute()
        ->fetchAllAssoc('name', PDO::FETCH_ASSOC);

      drupal_alter('cta_selectors', $cta_selectors);
    }
  }

  return $cta_selectors;
}

/**
 * Load a set by set name or ID. May be used as a loader for menu items.
 *
 * @param $name
 *   The name of the set.
 * @param $wsid
 *   Optional. The numeric id of a set if the name is not known.
 * @param $include
 *   If set, this loader will restrict to a specific type of widget set, may be
 *   one of the defined widget set storage constants.
 * @return
 *   An widget set array containing the following keys:
 *   - "wsid": The unique widget set ID.
 *   - "name": The unique widget set name.
 *   - "elements": An array of widget elements within this widget set.
 *   If the widget set name or ID is not valid, an empty array is returned.
 * @see widgets_element_load()
 */

function cta_selector_load($name = NULL, $sid = NULL, $include = NULL, $refresh = FALSE) {
  $cta_selectors = cta_selectors($refresh);

  // If retrieving by name.
  if (isset($name) && isset($cta_selectors[$name])) {
    $cta_selector = $cta_selectors[$name];
  }

  // If retrieving by widget set id.
  if (!isset($name) && isset($sid)) {
    foreach ($cta_selectors as $name => $database_set) {
      if (isset($database_set['sid']) && $database_set['sid'] == $sid) {
        $cta_selector = $database_set;
        break;
      }
    }
  }

  // Restrict to the specific type of flag. This bitwise operation basically
  // states "if the storage is X, then allow".
  //if (isset($cta_block) && (!isset($include) || ($cta_block['storage'] & (int) $include))) {
  if (isset($cta_selector)) {
    if (!is_array($cta_selector['data'])) {
      $cta_selector['data'] = unserialize($cta_selector['data']);
    }
    return $cta_selector;
  }

  // Otherwise the set was not found.
  return FALSE;
}



/**
 * Save an widget set.
 *
 * @param set
 *   An widget set array.
 * @return
 *   An widget set array. In the case of a new set, 'wsid' will be populated.
 */
function cta_selector_save($cta_selector) {
  if (!isset($cta_selector['data'])) {
    $cta_selector['data'] = array();
  }

  $key = '';
  if (isset($cta_selector['sid'])) {
    $key = 'sid';
  }
  else if (isset($cta_selector['name'])) {
    $existing = cta_selector_load($cta_selector['name'], NULL, NULL, TRUE);
    if (isset($existing['sid'])) {
      $cta_selector['sid'] = $existing['sid'];
      $key = 'sid';
    }
  }

  if ($key) {
    drupal_write_record('cta_selector', $cta_selector, $key);
  }
  else {
    drupal_write_record('cta_selector', $cta_selector);
    $cta_selector['is_new'] = TRUE;
  }

  if (isset($cta_selector['presets'])) {
    cta_selector_presets_save($cta_selector);
  }

  // Let other modules update as necessary on save.
  module_invoke_all('cta_selector_save', $cta_selector);

  // Clear all caches and flush.
  //cta_selector_flush($cta_selector);

  return $cta_selector;
}

function cta_selector_presets_save($cta_selector) {
  // delete existing presents for selector
  $query = db_delete('cta_selection')
    ->condition('selector', $cta_selector['name'])
    ->condition('path', '@%', 'LIKE');
  $query->execute();

  $values = array();
  if (isset($cta_selector['presets']) && is_array($cta_selector['presets'])) {
    $query = db_insert('cta_selection')->fields(array('path', 'selector', 'bean_delta', 'block_module', 'block_delta', 'data'));
    foreach ($cta_selector['presets'] AS $name => $value) {
      $data = isset($value['data']) ? $value['data'] : array();
      if (!is_string($data)) {
        $data = serialize($data);
      }
      $values = array(
        'path' => "@" . $name,
        'selector' => $cta_selector['name'],
        'bean_delta' => isset($value['bean_delta']) ? $value['bean_delta'] : '',
        'block_module' => isset($value['block_module']) ? $value['block_module'] : '',
        'block_delta' => isset($value['block_delta']) ? $value['block_delta'] : '',
        'data' => $data,
      );
      $query->values($values);
    }
    $query->execute();
  }
}

function cta_blocks_by_selector($selector) {
  $blocks = array();
  $result = db_select('cta_block_selector', NULL, array('fetch' => PDO::FETCH_ASSOC))
    ->fields('cta_block_selector')
    ->condition('selector', $selector)
    ->orderBy('module')
    ->execute();
  while ($row = $result->fetchAssoc()) {
    $blocks[] = $row;
  }
  return $blocks;
}

function cta_block_meta_load($module, $delta) {
  $meta = array(
    'list_visibility' => 1,
    'selectors' => array(),
    'categories' => array(),
  );
  $query = db_select('cta_block', 'm')
    ->fields('m')
    ->condition('module', $module)
    ->condition('delta', $delta);
  $row = $query->execute()->fetchObject();
  if ($row) {
    $meta['list_visibility'] = $row->list_visibility;
    $meta['data'] = unserialize($row->data);
  }
  $query = db_select('cta_block_selector', 'm')
    ->fields('m')
    ->condition('module', $module)
    ->condition('delta', $delta);
  $result = $query->execute();
  while ($row = $result->fetchObject()) {
    $meta['selectors'][] = $row->selector;
  }
  return $meta;
}

function cta_block_meta_save($meta, $module, $delta) {
  $key = array(
    'module' => $module,
    'delta' => $delta,
  );
  if (!isset($meta['data'])) {
    $meta['data'] = array();
  }
  if (is_array($meta['data'])) {
    $meta['data'] = serialize($meta['data']);
  }  
  $fields = array(
    'list_visibility' => $meta['list_visibility'],
    'data' => $meta['data'],
  );
  $query = db_merge('cta_block')
    ->key($key)
    ->fields($fields);
  $query->execute();
  $query = db_delete('cta_block_selector')
    ->condition('module', $module)
    ->condition('delta', $delta);
  $query->execute();
  foreach($meta['selectors'] AS $selector) {
    $query = db_insert('cta_block_selector')
      ->fields(array(
        'module' => $module,
        'delta' => $delta,
        'selector' => $selector,
      ));
    $query->execute();
  }
}

function cta_block_meta_delete($module, $delta) {
  $query = db_delete('cta_block')
    ->condition('module', $module)
    ->condition('delta', $delta);
  $query->execute();
  
  $query = db_delete('cta_block_selector')
    ->condition('module', $module)
    ->condition('delta', $delta);
  $query->execute();
  
  $query = db_delete('cta_selection')
    ->condition('block_module', $module)
    ->condition('block_delta', $delta);
  $query->execute();
}

function cta_beans_by_selector($selector) {
  $blocks = array();
  $result = db_select('cta_bean_selector', NULL, array('fetch' => PDO::FETCH_ASSOC))
    ->fields('cta_bean_selector')
    ->condition('selector', $selector)
    ->orderBy('delta')
    ->execute();
  while ($row = $result->fetchAssoc()) {
    $blocks[] = $row;
  }
  return $blocks;
}

function cta_bean_metas() {
  // TODO put caching on this data
  $metas = array();
  $meta = array(
    'list_visibility' => 1,
    'selectors' => array(),
    'categories' => array(),
    'data' => array(),
  );
  $query = db_select('cta_bean', 'm')
    ->fields('m');
  $result = $query->execute();
  while($row = $result->fetchObject()) {
    $meta['delta'] = $row->delta;
    $meta['list_visibility'] = $row->list_visibility;
    $meta['data'] = unserialize($row->data);
    $meta['custom_path'] = $row->custom_path;
    $meta['custom_selector'] = $row->custom_selector;      
    $query = db_select('cta_bean_selector', 'm')
      ->fields('m')
      ->condition('delta', $meta['delta']);
    $result2 = $query->execute();
    $meta['selectors'] = array();
    while ($row2 = $result2->fetchObject()) {
      $meta['selectors'][] = $row2->selector;
    }
    $metas[$meta['delta']] = $meta;
  }
  return $metas;
}

function cta_bean_meta_load($delta) {
  $meta = array(
    'list_visibility' => 1,
    'selectors' => array(),
    'categories' => array(),
    'data' => array(),
  );
  $query = db_select('cta_bean', 'm')
    ->fields('m')
    ->condition('delta', $delta);
  $row = $query->execute()->fetchObject();
  if ($row) {
    $meta['list_visibility'] = $row->list_visibility;
    $meta['data'] = unserialize($row->data);
    $meta['custom_path'] = $row->custom_path;
    $meta['custom_selector'] = $row->custom_selector;
  }
  $query = db_select('cta_bean_selector', 'm')
    ->fields('m')
    ->condition('delta', $delta);
  $result = $query->execute();
  while ($row = $result->fetchObject()) {
    $meta['selectors'][] = $row->selector;
  }
  return $meta;
}

function cta_bean_meta_load_by_path_selector($path, $selector) {
  $meta = array(
    'delta' => '',
    'list_visibility' => 1,
    'selectors' => array(),
    'categories' => array(),
  );
  $query = db_select('cta_bean', 'm')
    ->fields('m')
    ->condition('custom_path', $path)
    ->condition('custom_selector', $selector);
  $row = $query->execute()->fetchObject();
  if ($row) {
    $meta['delta'] = $row->delta;
    $meta['list_visibility'] = $row->list_visibility;
    $meta['data'] = unserialize($row->data);
    $query = db_select('cta_bean_selector', 'm')
      ->fields('m')
      ->condition('delta', $row->delta);
    $result = $query->execute();
    while ($row = $result->fetchObject()) {
      $meta['selectors'][] = $row->selector;
    }
    return $meta;
  }
  else {
    return FALSE;
  }  
}

function cta_bean_meta_save($meta, $delta) {
  $key = array(
    'delta' => $delta,
  );
  if (!isset($meta['data'])) {
    $meta['data'] = array();
  }
  if (is_array($meta['data'])) {
    $meta['data'] = serialize($meta['data']);
  }
  $fields = array(
    'list_visibility' => $meta['list_visibility'],
    'custom_path' => isset($meta['custom_path']) ? $meta['custom_path'] : '',
    'custom_selector' => isset($meta['custom_selector']) ? $meta['custom_selector'] : '',
    'data' => $meta['data'],
  );
  $query = db_merge('cta_bean')
    ->key($key)
    ->fields($fields);
  $query->execute();
  $query = db_delete('cta_bean_selector')
    ->condition('delta', $delta);
  $query->execute();
  foreach($meta['selectors'] AS $selector) {
    $query = db_insert('cta_bean_selector')
      ->fields(array(
        'delta' => $delta,
        'selector' => $selector,
      ));
    $query->execute();
  }
}

function cta_bean_meta_delete($delta) {
  $query = db_delete('cta_bean')
    ->condition('delta', $delta);
  $query->execute();
  
  $query = db_delete('cta_bean_selector')
    ->condition('delta', $delta);
  $query->execute();
  
  $query = db_delete('cta_selection')
    ->condition('bean_delta', $delta);
  $query->execute();
}

function cta_block_info() {
  $blocks = array();
  
  $cta_selectors = cta_selectors();
  if (is_array($cta_selectors)) {
    foreach ($cta_selectors AS $set) {
      $description = $set['description'];
      if (!$description) {
        $description = t('CTA: @name', 
          array(
            '@name' => $set['name'],
          )
        );
      }
      //$blocks['cta_' . $set['name']] = array(
      $blocks['sel_' . $set['name']] = array(
        'info' => $description,
        'cache' => DRUPAL_CACHE_PER_PAGE,
      );
    }
  }
  return $blocks;
}

function cta_block_view($delta = '') {
  $selector = substr($delta, 4);
  //$selector = $delta;

  $selection = cta_selection_load($_GET['q'], $selector, TRUE, TRUE);

  $selector_obj = cta_selector_load($selector);
  $preset_vocab = isset($selector_obj['data']['preset_vocabulary']) ? $selector_obj['data']['preset_vocabulary'] : '';

  $block = array(
    'subject' => '',
    'content' => '',
    'set' => '',
  );

  if (isset($selection['bean']->title)) {
    $block['subject'] = $selection['bean']->title;
    $block['content'] = $selection['bean']->view($selection['bean']->view_mode);
    $block['set'] = 'bean';
  }
  else if (isset($selection['block'])) {
    $block['subject'] = (isset($selection['block']['subject'])) ? $selection['block']['subject'] : '';
    $block['content'] = (isset($selection['block']['content'])) ? $selection['block']['content'] : '';
    $block['set'] = 'block';
  }
  else if ($preset_vocab){
    // check if CTA category (via taxonomy ref field) exists for node
    $node = menu_get_object();
    if (!empty($node->nid)) {
      $fields_info = field_info_instances('node', $node->type);
      // check cta set with taxonomy
      foreach ($fields_info AS $field_name => $field_info) {
        // check if field is taxonomy ref by checking if keyed by tid
        if (isset($node->{$field_name}[$node->language][0]['tid'])) {
          // get field_info to get associated vocabulary
          $field_info_field = field_info_field($field_name);
          $vocab_name = $field_info_field['settings']['allowed_values'][0]['vocabulary'];
          if ($preset_vocab== $field_info_field['settings']['allowed_values'][0]['vocabulary']) {
            if (!empty($node->{$field_name}[$node->language][0]['tid'])) {
              // load the term from tid
              $term = taxonomy_term_load($node->{$field_name}[$node->language][0]['tid']);
              // if term exists, use it to select ctas
              if (!empty($term->name)) {
                $path = "@" . drupal_html_class($term->name);
                $selection = cta_selection_load($path, $selector, TRUE, TRUE);
                if (isset($selection['bean']->title)) {
                  $block['subject'] = $selection['bean']->title;
                  $block['content'] = $selection['bean']->view($selection['bean']->view_mode);
                  $block['set'] = 'bean';
                }
                else {
                  if (isset($selection['block'])) {
                    $block['subject'] = $selection['block']['subject'];
                    $block['content'] = $selection['block']['content'];
                    $block['set'] = 'block';
                  }
                }
              }
            }
          }
        }
      }
      //dsm($node);
    }
  }

  if (!$block['set']) {
    // if no selection, load default
    $selection = cta_selection_load('@default', $selector, TRUE, TRUE);
    if (isset($selection['bean'])) {
      $block['subject'] = $selection['bean']->title;
      $block['content'] = $selection['bean']->view($selection['bean']->view_mode);
      $block['set'] = 'bean';
    }
    else if (isset($selection['block'])) {
      $block['subject'] = !empty($selection['block']['subject']) ? $selection['block']['subject'] : '';
      $block['content'] = !empty($selection['block']['content']) ? $selection['block']['content'] : '';
      $block['set'] = 'block';
    }
  } 
  if (!$block['set'] && user_access('select ctas')) {
    $block['content'] = t('No CTA selected');
  }
  if (empty($block['content']) && user_access('select ctas')) {
    $block['content'] = t('No block content was available for CTA');
  }
   
  // convert content to array to add contextual links
  if (!is_array($block['content'])) {
    $block['content'] = array(
      '#markup' => $block['content'],
    );
  }

  if (isset($block['content']['#markup'])) {
    //$block['content']['main'] = $block['content']['#markup'];
    //$block['content']['main']['#theme'] = 'markup';
    //unset($block['content']['#markup']);
  }
  dsm($selection);
  dsm($block);

  // check if CTA bean is rendered inside a view
  if ($selection['block_module'] == 'views' && !empty($block['content']['#markup'])) {
    $matches = array();
    $pattern = '/<div id="cta-bean-(.+?)">/s';
    preg_match($pattern, $block['content']['#markup'], $matches);
    if (!empty($matches[1])) {
      $delta = $matches[1];
      $viewed = cta_beans_viewed();
      if (!empty($viewed[$delta]) && !empty($viewed[$delta]->cta)) {
        $bs = $selection;
        $bs['bean'] = $viewed[$delta];
        unset($bs['block']);
        $bs['block_module'] = '';
        $bs['block_delta'] = '';
        $bs['bean_delta'] = $delta;
        $bs['meta'] = $viewed[$delta]->cta;
        $block['set'] = 'bean';
        $block = cta_block_process_ga_events($block, $bs);
        dsm($bs);
      }
      else {
        $block = cta_block_process_ga_events($block, $selection);
      }
    }
  }
  else {
    $block = cta_block_process_ga_events($block, $selection);
  }
  
  // add contextual link to select CTA
  $contextual_links = array(
    'admin/structure/cta/select',
    array($selector, urlencode($_GET['q'])),
  );
//dsm($block);     
  $block['content']['#contextual_links']['cta'] = $contextual_links;

  // process selection customizations
  if (is_string($selection['data'])) {
    $selection['data'] = unserialize($selection['data']);
  }

  if (isset($selection['data']['block_title'])) {
    $block['subject'] =  $selection['data']['block_title'];
  }

  if (isset($selection['data']['block_content_prefix'])) {
    $block['content']['#markup'] = filter_xss($selection['data']['block_content_prefix']) . $block['content']['#markup'];
    /*
    $block['content']['#markup'] = array(
      //'#type' => 'markup',
      '#theme' => 'markup',
      '#markup' => filter_xss($selection['data']['block_content_prefix']),
      '#weight' => -99,
    );
    */
  }


  // allow other modules to alter data
  drupal_alter('cta_block_view', $block, $selector, $selection);

  return $block;
}

function cta_block_process_ga_events($block, $selection) {
  //dsm($block);
  $js = cta_process_ga_events($selection, $block['set']);
  if (!$js) {
    return $block;
  }
  $block['content']['#attached'] = array(
    'js' => array(array(
      'data' => $js,
      'type' => 'setting'
    ),
    )
  );
  return $block;
}

function cta_process_ga_events($selection, $set = 'bean') {
//dsm($selection);
  if (!isset($selection['meta']['data']['ga_event']) || !module_exists('intel') || (intel_api_level() != 'pro')) {
    return FALSE;
  }
  $defs = $ga = $selection['meta']['data']['ga_event'];
  if (empty($ga['track'])) {
    return FALSE;
  }

  $evtDef = array(
    'selector' => $selection['selector'],
    'onSelector' => 'a',
  );
  if (!empty($defs['click']['event'])) {
    $evtDef['onEvent'] = $defs['click']['event'];
  }
  $defs['click']['method'] = '_addIntelEvent';
  $defs['click']['category'] = t('CTA click!');
  $defs['click']['noninteraction'] = FALSE;
  $defs['click']['event'] = !empty($defs['click']['event']) ? $defs['click']['event'] : 'click';
  $defs['click']['event'] = 'inner_anchor_click';
  $defs['click']['callback'] = 'saveCTAClick';
  $defs['click']['selector'] = $selection['selector'];
  $defs['display']['method'] = '_addIntelEvent';
  $defs['display']['category'] = t('CTA impression');
  $defs['display']['value'] = 0;
  $defs['display']['event'] = 'pageshow';
  $defs['display']['selector'] = 'body';
  $defs['display']['noninteraction'] = TRUE;

  if ($set == 'bean') {
    $ga_event_click = $defs['click'];
    $action = $selection['bean']->label;
    if ($selection['meta']['list_visibility'] == 0) {
      $title = drupal_get_title();
      $selector = substr($selection['selector'], 4);
      $action = "Custom: $title ($selector)";
    }
    if (empty($defs['click']['action'])) {
      $evtDef['eventAction'] = $defs['display']['action'] = $defs['click']['action'] = $action;
    }
    if (empty($defs['click']['label'])) {
      $evtDef['eventLabel'] = $defs['display']['label'] = $defs['click']['label'] = 'block/' . $selection['bean']->delta;
    }

    $postfix = variable_get('cta_intel_selector_postfix_override_bean', '');
    if (!$postfix) {
      $postfix = ' .content';
    }
    $evtDef['selector'] = $defs['click']['selector'] = '#block-cta-sel-' . drupal_clean_css_identifier($selection['selector']) . $postfix;
    $evtDef['selectorFilter'] = $defs['click']['selector_filter'] = ':first';
    $evtDef['cid'] = $defs['click']['cid'] = $selection['bean']->delta;
  }
  else if ($set == 'block') {
    // check if block contains custom settings
    if (isset($block['content']['cta']['ga_event'])) {
      $cg = $block['content']['cta']['ga_event'];
      if (empty($defs['click']['action'])) {
        $evtDef['eventAction'] = $defs['display']['action'] = $defs['click']['action'] = $cg['click']['action'];
      }
      if (empty($defs['click']['label'])) {
        $evtDef['eventLabel'] = $defs['display']['label'] = $defs['click']['label'] = $cg['click']['label'];
      }      
    }
    // use default data
    else {
      $bi = call_user_func($selection['block_module'] . "_block_info", $selection['block_delta']);
      $block_info = $bi[$selection['block_delta']];
      if (empty($defs['click']['action'])) {
        $evtDef['eventAction'] = $defs['display']['action'] = $defs['click']['action'] = $bi[$selection['block_delta']]['info'];
      }
      if (empty($defs['click']['label'])) {
        $evtDef['eventLabel'] = $defs['display']['label'] = $defs['click']['label'] = 'admin/structure/block/manage/' . $selection['block_module'] . '/' . $selection['block_delta'] . '/configure';
      }
    } 
    $postfix = variable_get('cta_intel_selector_postfix_override_block', '');
    if (!$postfix) {
      $postfix = ' .content';
    }
    $evtDef['selector'] = $defs['click']['selector'] = '#block-cta-sel-' . drupal_clean_css_identifier($selection['selector']) . $postfix;
    $evtDef['selectorFilter'] = $defs['click']['selector_filter'] = ':first';
    $evtDef['cid'] = $defs['click']['cid'] = $selection['block_module'] . ':' . $selection['block_delta'];
  }

  $ga_events = array();
  $ga_ctas = array();
  // add ga_events if either track_x null or true. I.e. only don't set if track_x explicity set to 0.
  if ((!isset($ga['track_display']) || !empty($ga['track_display'])) && isset($defs['display'])) {
    $ga_events[] = $defs['display'];
    $evtDef['trackView'] = 1;
  }
  if ((!isset($ga['track_click']) || !empty($ga['track_click'])) && isset($defs['click'])) {
    $ga_events[] = $defs['click'];
    $ga_ctas[] = $evtDef;
  }

//dsm($ga_events);
  if (count($ga_events)) {
    $js = array(
      'intel' => array(
        'pushes' => array(
          //'addIntelEvent' => $ga_events,
          'trackCta' => $ga_ctas,
        ),
      ),
    );
    return $js;
  }
//dsm($block);
  return FALSE;
}

//function cta_render($type, $delta, $module) {
function cta_render($module, $delta) { 

  $block = module_invoke($module, 'block_view', $delta);
  if (!is_array($block['content'])) {
    $block['content'] = array(
      '#markup' =>  $block['content'],
    );
  }
  $output = render($block);

/*
$block = block_load($module, $delta);
$render = _block_get_renderable_array(_block_render_blocks(array($block)));
foreach ($render AS $key => $v) {
  if (isset($v['#contextual_links'])) {
    unset($render[$key]['#contextual_links']);
  }
}
$output = render($render);  
*/
  
  print $output;
  exit;
  dsm($block);
  dsm($render);
  return $output;
}

function cta_temp($selector, $q) {
  
}

function cta_selection_save($path, $selector, $bean_delta = '', $block_module = '', $block_delta = '', $data = array()) {
  $key = array(
    'path' => urldecode($path),
    'selector' => $selector,
  );
  $fields = array (
    'bean_delta' => $bean_delta,
    'block_module' => $block_module,
    'block_delta' => $block_delta,
    'data' => (!is_string($data)) ? serialize($data) :  $data,
  );
  $query = db_merge('cta_selection')
    ->key($key)
    ->fields($fields);
    
  $query->execute();
}

function cta_selection_delete($path = NULL, $selector = NULL) {
  $query = db_delete('cta_selection');
  if (!empty($path)) {
    $query->condition('path', $path);
  }
  if (!empty($selector)) {
    $query->condition('selector', $selector);
  }
  $query->execute();
}

function cta_selection_load_all($path = null, $selector = null, $index_by = 'path') {
  $query = db_select('cta_selection', 'c', array('fetch' => PDO::FETCH_ASSOC))
    ->fields('c');
  if (isset($path)) {
    $query->condition('path', $path);
  }
  if (isset($selector)) {
    $query->condition('selector', $selector);
  }
  $selections = $query->execute()->fetchAllAssoc($index_by, PDO::FETCH_ASSOC);
  return $selections;
}

function cta_selection_load($path, $selector, $load_object = FALSE, $load_meta = FALSE) {
  $query = db_select('cta_selection', 'c')
    ->fields('c')
    ->condition('path', $path)
    ->condition('selector', $selector);
  $selection = $query->execute()->fetchAssoc();
  if ($load_object) {
    if ($selection['bean_delta']) {
      $selection['bean'] = bean_load_delta($selection['bean_delta']);
      if ($load_meta) {
        $selection['meta'] = cta_bean_meta_load($selection['bean_delta']);
      }
    }
    else if ($selection['block_module']) {
      //$selection['block_view'] = call_user_func($selection['block_module'] . "_block_view", $selection['block_delta']);
      //$selection['block']['info'] = call_user_func($selection['block_module'] . "_block_info", $selection['block_delta']);
      // TODO: not sure if this is the best way to do this. Using call_user_func method does not produce block title overrides.
      $block = block_load($selection['block_module'], $selection['block_delta']);
      $block = _block_render_blocks(array($block));
      $selection['block'] = (array)array_pop($block);
      if ($load_meta) {
        $selection['meta'] = cta_block_meta_load($selection['block_module'], $selection['block_delta']);
      }
    }
  }

  return $selection;
}

function cta_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  // do not add settings fields to CTA selector blocks
  if ($form['module']['#value'] == 'cta') {
    //return;
  }

  if (0 && empty($form['display']['#type']) || 0 && ($form['display']['#type'] != 'vertical_tabs')) {
    $form['display_title'] = array(
      '#type' => 'item',
      '#title' => 'Display settings',
      '#weight' => 1,
    );

    $form['display'] = array(
      '#type' => 'vertical_tabs',
      '#weight' => 2,
      '#attached' => array(
        'js' => array('modules/block/block.js')
      ),
      'regions' => $form['regions'],
    );

    $form['visibility_title']['#weight'] = 3;
    $form['visibility']['#weight'] = 4;
    unset($form['regions']);
  }

  $meta = cta_block_meta_load($form['module']['#value'], $form['delta']['#value']);
  if ($form['module']['#value'] != 'cta') {
    $f = cta_settings_form_fields($meta);
    $f['cta']['#type'] = 'fieldset';

    if (module_exists('enterprise_base')) {
      drupal_add_js(drupal_get_path('module', 'enterprise_base') . '/js/enterprise_base.edit_form.js');
      $f['cta']['#attributes']['class'][] = 'display_sidebar';
      $form = array_merge($form, $f);
    }
    else if (!empty($form['display'])) {
      $f['cta']['#group'] = 'Display';
      $form['display'] = array_merge($form['display'], $f);
    }
    else {
      $form = array_merge($form, $f);
    }
  }

  $f = cta_popup_settings_form_fields($meta);
  if (module_exists('enterprise_base')) {
    drupal_add_js(drupal_get_path('module', 'enterprise_base') . '/js/enterprise_base.edit_form.js');
    $f['cta_popup']['#attributes']['class'][] = 'display_sidebar';
    $f['cta_popup']['#weight'] = 11;
    if (empty($f['cta_popup']['data']['popup']['enabled']['#default_value'])) {
      $f['cta_popup']['#collapsed'] = 1;
    }

    $form = array_merge($form, $f);
  }
  else if (!empty($form['display'])) {
    $f['cta_popup']['#group'] = 'Display';
    $form['display'] = array_merge($form['display'], $f);
  }
  else {
    $form = array_merge($form, $f);
  }
  $entity_data_id = $form['module']['#value'] . ':' . $form['delta']['#value'];
  $form['#submit'][] = 'cta_block_admin_configure_submit';
}

function cta_block_admin_configure_submit($form, &$form_state) {

  if (!isset($form_state['values']['cta']) && !isset($form_state['values']['cta_popup'])) {
    return;
  }

  $meta = !empty($form_state['values']['cta']) ? $form_state['values']['cta'] : array();
  $meta += array(
    'list_visibility' => 2,
    'selectors' => array(),
    'data' => array(),
  );

  if (!empty($form_state['values']['cta_popup']) && $form_state['values']['cta_popup']['data']['popup']['enable']) {
    $meta['data']['popup'] = $form_state['values']['cta_popup']['data']['popup'];
  }

  if (is_array($meta['selectors']) && ($meta['selectors'] !== array_keys($meta['selectors']))) {
    $selectors = $meta['selectors'];
    $meta['selectors'] = array();
    foreach ($selectors AS $selector => $enabled) {
      if ($enabled) {
        $meta['selectors'][] = $selector;
      }
    }
  }


  if (count($meta['selectors'])) {
    $meta['list_visibility'] = 1;
  }
  if (module_exists('intel') && isset($meta['data']['ga_event'])) {
    $meta['data']['ga_event']['conversion']['action'] = trim($meta['data']['ga_event']['custom']['action']);
    $meta['data']['ga_event']['click']['action'] = trim($meta['data']['ga_event']['custom']['action']);
    $meta['data']['ga_event']['click']['selector'] = trim($meta['data']['ga_event']['custom']['selector']);
    $meta['data']['ga_event']['click']['event'] = trim($meta['data']['ga_event']['custom']['event']);
    $meta['data']['ga_event']['display'] = array(
      'action' => trim($meta['data']['ga_event']['custom']['action']),
    );
    unset($meta['data']['ga_event']['custom']);
  }

  $entity_data_id = $form_state['values']['module'] . ':' . $form_state['values']['delta'];
  if (isset($meta['data']['popup'])) {
    entity_data_set('block', $entity_data_id, 'cta_popup', $meta['data']['popup']);
  }
  else {
    entity_data_del('block', $entity_data_id, 'cta_popup');
  }
  cta_block_meta_save($meta, $form_state['values']['module'], $form_state['values']['delta']);
}

function cta_settings_form_fields($meta) {
  $is_custom = FALSE;
  
  // if custom CTA, set flag and embed custom cta data
  $form_state['cta_meta'] = $meta;
  $form['cta'] = array(
    '#type' => 'fieldset',
    '#title' => t('CTA settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 10,
    '#tree' => TRUE,
  );
  if ((arg(0) == 'admin') && (arg(2) == 'cta') && (arg(3) == 'select')) {
    $is_custom = TRUE;
    // set flag for custom CTA
    $form['cta']['is_custom'] = array(
      '#type' => 'value',
      '#value' => 1,
    );
    $form['cta']['custom_path'] = array(
      '#type' => 'value',
      '#value' => urldecode(arg(5)),
    );
    $form['cta']['custom_selector'] = array(
      '#type' => 'value',
      '#value' => arg(4),
    );
  }
  // add relevant selector selections
  else {
    $selectors = cta_selectors();
    $options = array();
    $description = t('Check the all the CTA selector blocks you want to make this CTA available to.');
    $description .= ' ' . l(t('Manage CTA selectors'), 'admin/structure/cta/selector');
    if (is_array($selectors)) {
      foreach ($selectors AS $name => $s) {
        $options[$name] = $s['description'];
      }
    }
  
    $defaults = drupal_map_assoc($meta['selectors']);
    
    if (!empty($_GET['cta_selector'])) {
      $defaults = array($_GET['cta_selector']);
    }
    $form['cta']['selectors'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Include in CTA selectors'),
      '#description' => $description,
      '#options' => $options,
      '#default_value' => isset($defaults) ? $defaults : array(),
    );     
  }

  // add ga event tracking if intel module is installed
  if (module_exists('intel')) {
    drupal_add_js(drupal_get_path('module', 'cta') . "/cta.cta_edit.js");
    $form['cta']['data']['ga_event'] = array(
      '#type' => 'fieldset',
      '#title' => t('CTA intelligence tracking'),
      '#collapsible' => FALSE,
      //'#collapsed' => (!empty($meta['data']['ga_event']['track_click'])  || !empty($meta['data']['ga_event']['track_display'])) ? FALSE : TRUE,
    );
    $intel_level = intel_api_level();
    if ($intel_level == 'pro') {
      $form['cta']['data']['ga_event']['track'] = array(
        '#type' => 'checkbox',
        '#title' => t('Track CTA events'),
        '#description' => t('Check the box to report CTA events (clicks, impressions & conversions) in Google Anatlytics for this CTA.'),
        '#default_value' => (isset($meta['data']['ga_event']['track'])) ? $meta['data']['ga_event']['track'] : CTA_GA_EVENT_TRACK_DEFAULT,
      );
      $form['cta']['data']['ga_event']['options_start'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="cta-data-ga-event-track-options-group">',
    );
      $form['cta']['data']['ga_event']['track_display'] = array(
        '#type' => 'checkbox',
        '#title' => t('Track impressions'),
        '#description' => t('Check the box to report display of this CTA as an event to Google Anatlytics.')
          . ' ' . t('Note that not all display events may register due to Google Analytics limits.'),
        '#default_value' => (isset($meta['data']['ga_event']['track_display'])) ? $meta['data']['ga_event']['track_display'] : CTA_GA_EVENT_TRACK_DISPLAY_DEFAULT,
      );
      $form['cta']['data']['ga_event']['track_click'] = array(
        '#type' => 'hidden',
        '#title' => t('Track clicks'),
        '#description' => t('Check the box to report clicks on this CTA as an event to Google Anatlytics.'),
        '#default_value' => (isset($meta['data']['ga_event']['track_click'])) ? $meta['data']['ga_event']['track_click'] : CTA_GA_EVENT_TRACK_CLICK_DEFAULT,
      );
      $form['cta']['data']['ga_event']['track_conversion'] = array(
        '#type' => 'hidden',
        '#title' => t('Track conversiond'),
        '#description' => t('Check the box to report conversions on this CTA as an event to Google Anatlytics.'),
        '#default_value' => (isset($meta['data']['ga_event']['track_conversion'])) ? $meta['data']['ga_event']['track_conversion'] : CTA_GA_EVENT_TRACK_CONVERSION_DEFAULT,
      );
      $form['cta']['data']['ga_event']['click']['value'] = array(
        '#type' => 'textfield',
        '#title' => t('Click value'),
        '#description' => t('Enter a value to assign to the event when the CTA is clicked. Must be an whole number.'),
        '#size' => 8,
        '#default_value' => (isset($meta['data']['ga_event']['click']['value'])) ? $meta['data']['ga_event']['click']['value'] : 0,
      );
      $form['cta']['data']['ga_event']['conversion']['value'] = array(
        '#type' => 'textfield',
        '#title' => t('Conversion value'),
        '#description' => t('Enter a value to assign to the event when the CTA leads to a conversion. Must be an whole number.'),
        '#size' => 8,
        '#default_value' => (isset($meta['data']['ga_event']['conversion']['value'])) ? $meta['data']['ga_event']['conversion']['value'] : 0,
      );
      $form['cta']['data']['ga_event']['custom'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced'),
        '#collapsible' => TRUE,
        '#collapsed' => (!empty($meta['data']['ga_event']['click']['selector'])  || !empty($meta['data']['ga_event']['click']['event'])) ? FALSE : TRUE,
      );
      $form['cta']['data']['ga_event']['custom']['action'] = array(
        '#type' => 'textfield',
        '#title' => t('Custom CTA name'),
        '#description' => t('This is reported as the "action" in Google Analytics. Leave blank to use the block label or enter a custom label.'),
        '#default_value' => (isset($meta['data']['ga_event']['custom']['action'])) ? $meta['data']['ga_event']['custom']['action'] : '',
      );
      $form['cta']['data']['ga_event']['custom']['selector'] = array(
        '#type' => 'textfield',
        '#title' => t('jQuery selector'),
        '#description' => t('Use to set a custom selector to bind the event. Use a vaild jQuery selector. Leave blank to use the block label or enter a custom label.'),
        '#default_value' => (isset($meta['data']['ga_event']['click']['selector'])) ? $meta['data']['ga_event']['click']['selector'] : '',
      );
      $form['cta']['data']['ga_event']['custom']['event'] = array(
        '#type' => 'textfield',
        '#title' => t('jQuery event'),
        '#description' => t('Use to set a custom javascript event. Leave blank to use click().'),
        '#default_value' => (isset($meta['data']['ga_event']['click']['event'])) ? $meta['data']['ga_event']['click']['event'] : '',
      );
      $form['cta']['data']['ga_event']['custom']['callback'] = array(
        '#type' => 'textfield',
        '#title' => t('jQuery callback'),
        '#description' => t('Used to set a custom jQuery callback. Leave blank to use the default.'),
        '#default_value' => (isset($meta['data']['ga_event']['click']['callback'])) ? $meta['data']['ga_event']['click']['callback'] : '',
      );
      $form['cta']['data']['ga_event']['options_end'] = array(
        '#type' => 'markup',
        '#markup' => '</div>',
      );
    }
    else {
      $form['cta']['data']['ga_event']['#collapsible'] = TRUE;
      $form['cta']['data']['ga_event']['#collapsed'] = TRUE;
      $msg = '<div class="messages warning">';
      $msg .= t('The Pro version of Intel is required for CTA tracking.');
      $msg .= ' ' . l(t('Learn more about API versions'), INTEL_HELP_APIVERS, array('attributes' => array('target' => '_blank'))) . '.';
      $msg .= '</div>';
      $form['cta']['data']['ga_event']['options_end'] = array(
        '#type' => 'markup',
        '#markup' => $msg,
      );
    }
  }
  
  // hide field set if there are no fields to display
  if (!isset($form['cta']['cta_selectors']) && !isset($form['cta']['cta_selectors'])) {
    unset($form['cta']['#type']);
  }

  return $form;
}

function cta_popup_settings_form_fields($meta) {
  $is_custom = FALSE;

  // if custom CTA, set flag and embed custom cta data
  $form_state['cta_meta'] = $meta;
  $form['cta_popup'] = array(
    '#type' => 'fieldset',
    '#title' => t('Popup settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 10,
    '#tree' => TRUE,
    'data' => array(
      'popup' => array()
    )
  );
  if ((arg(0) == 'admin') && (arg(2) == 'cta') && (arg(3) == 'select')) {
    $is_custom = TRUE;

  }
  // add relevant selector selections
  else {

  }

  $form['cta_popup']['data']['popup']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display this block as a popup'),
    '#return_value' => 1,
    //'#description' => $description,
    '#default_value' => (isset($meta['data']['popup']['enable'])) ? $meta['data']['popup']['enable'] : 0,
  );
  $options = array(
    '' => t(' - default -'),
    'modal-middle modal-center' => t('Middle Center'),
    'modal-top modal-center' => t('Top center'),
    'modal-top modal-right' => t('Top right'),
    'modal-middle modal-right' => t('Middle right'),
    'modal-bottom modal-right' => t('Bottom right'),
    'modal-bottom modal-center' => t('Bottom center'),
    'modal-bottom modal-left' => t('Bottom left'),
    'modal-middle modal-left' => t('Middle left'),
    'modal-top modal-left' => t('Top left'),
  );
  $form['cta_popup']['data']['popup']['position'] = array(
    '#type' => 'select',
    '#title' => t('Popup position'),
    '#options' => $options,
    //'#description' => $description,
    '#default_value' => (isset($meta['data']['popup']['position'])) ? $meta['data']['popup']['position'] : 0,
  );
  $form['cta_popup']['data']['popup']['trigger'] = array(
    '#type' => 'fieldset',
    '#title' => t('Trigger'),
    '#collapsible' => FALSE,
    //'#collapsed' => (!empty($meta['data']['ga_event']['track_click'])  || !empty($meta['data']['ga_event']['track_display'])) ? FALSE : TRUE,
  );
  $form['cta_popup']['data']['popup']['trigger']['delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Time delay (1000s of seconds)'),
    //'#description' => $description,
    '#default_value' => (isset($meta['data']['popup']['trigger']['delay'])) ? $meta['data']['popup']['trigger']['delay'] : '',
    '#size' => 10,
  );

  return $form;
}

function cta_form_bean_form_alter(&$form, &$form_state, $form_id) {
  $meta = cta_bean_meta_load($form['bean']['#value']->delta);
  $f = cta_settings_form_fields($meta);
  $form = array_merge($form, $f);
  
  if (module_exists('enterprise_base')) {
    drupal_add_js(drupal_get_path('module', 'enterprise_base') . '/js/enterprise_base.edit_form.js');
    $form['cta']['#type'] = 'fieldset';
    $form['cta']['#attributes']['class'][] = 'display_sidebar';
  }
}

function cta_select_custom_form_submit($form, &$form_state) {
  include_once drupal_get_path('module', 'bean') . '/includes/bean.pages.inc';
  $form = $form['custom'];
  bean_form_submit($form, $form_state);
}

function cta_entity_load($entities, $type) {
  if ($type == 'bean') {
    foreach($entities AS $key => $entity) {
      if ($entity->type != 'cta') {
        continue;
      }
      $meta = cta_bean_meta_load($entity->delta);
      $entities[$key]->cta = $meta;
    }
  }
}


function cta_entity_insert($entity, $type) {
  cta_entity_save($entity, $type);
}

function cta_entity_update($entity, $type) {
  cta_entity_save($entity, $type);
}

function cta_entity_save($entity, $type) {
  if (($type == 'bean') && (!empty($entity->cta))) {

    $entity->cta += array(
      'list_visibility' => 1,
      'selectors' => array(),
      'data' => array(),
    );

    if (module_exists('intel')) {
      // map custom fields in edit form to needed array
      if (isset($entity->cta['data']['ga_event']['custom'])) {
        $entity->cta['data']['ga_event']['conversion']['action'] = trim($entity->cta['data']['ga_event']['custom']['action']);
        $entity->cta['data']['ga_event']['click']['action'] = trim($entity->cta['data']['ga_event']['custom']['action']);
        $entity->cta['data']['ga_event']['click']['selector'] = trim($entity->cta['data']['ga_event']['custom']['selector']);
        $entity->cta['data']['ga_event']['click']['event'] = trim($entity->cta['data']['ga_event']['custom']['event']);
        $entity->cta['data']['ga_event']['display'] = array(
          'action' => trim($entity->cta['data']['ga_event']['custom']['action']),
        );
        unset($entity->cta['data']['ga_event']['custom']);
      }
    }

    // check if selectors are formatted like a form submission and convert is so
    // second element is just a test to see if array has numeric keys
    if (is_array($entity->cta['selectors']) && (range(0, count($entity->cta['selectors']) - 1) !== array_keys($entity->cta['selectors']))) {
      $selectors = $entity->cta['selectors'];
      $entity->cta['selectors'] = array();
      foreach ( $selectors AS $selector => $enabled) {
        if ($enabled) {
          $entity->cta['selectors'][] = $selector;
        }
      }
    }

    cta_bean_meta_save($entity->cta, $entity->delta);
    // if custom CTA, save selection
    if (isset($entity->cta['is_custom'])) {
      cta_selection_save($entity->cta['custom_path'], $entity->cta['custom_selector'], $entity->delta);
    }  
  }
}

function cta_entity_delete($entity, $type) {
  if (($type == 'bean') && ($entity->type == 'cta')) {
    cta_bean_meta_delete($entity->delta);   
  } 
}

function cta_beans_viewed($action = 'get', $delta = '', $entity = FALSE) {
  $beans = &drupal_static(__FUNCTION__, array());
  if ($action == 'set') {
    $beans[$delta] = $entity;
  }
  if (!$delta) {
    return $beans;
  }
  return isset($beans[$delta]) ? $beans[$delta] : FALSE;
}

/**
 * implements hook_entity_query_alter
 * Done to remove CTA beans from block admin page
 * @param $query
 */
function cta_entity_query_alter(&$query) {
  if ((arg(0) == 'admin') && (arg(1) == 'structure') && (arg(2) == 'block')) {
    if (isset($query->entityConditions['entity_type']['value']) && $query->entityConditions['entity_type']['value'] == 'bean') {
      $query->entityCondition('bundle', 'cta', '!=');
    }
  }
  //dsm($query);
}

function _cta_is_true($var) {
  return (isset($var) && $var);
};

function cta_bean_view(Bean $bean, $view_mode = 'default', $langcode = NULL) {
  if (($bean->type == 'cta') && (isset($bean->field_body))) {
//dsm($bean);
    $body = '';
    $lang = !empty($bean->language) ? $bean->language : LANGUAGE_NONE;
    $link_options = array('html' => TRUE);
    if (isset($bean->field_landingpage) && !empty($bean->field_landingpage[$lang][0]['target_id'])) {
      $nid = $bean->field_landingpage[$lang][0]['target_id'];      
      $body = l($bean->content['field_body'][0]['#markup'], 'node/' . $nid, $link_options);
    }
    else if (isset($bean->field_redirect_url) && !empty($bean->field_redirect_url[$lang][0]['url'])) {
      $link = $bean->field_redirect_url[$lang][0];
      if (isset($link['attributes'])) {
        $link_options['attributes'] = $link['attributes'];
      }
      if ($link['title']) {
        $link_options['attributes']['title'] = $link['title'];
      }
      $body = l($bean->content['field_body'][0]['#markup'], $link['url'], $link_options);
    }
    $body = '<div id="cta-bean-' . $bean->delta . '">' . $body . '</div>';
    // cache bean view data
    cta_beans_viewed('set', $bean->delta, $bean);

    // if previewing on the the block/[delta] url,
    // check if there is any preview prefix or suffix markup set to be added
    // on the selectors
    if ((arg(0) == 'block') && (arg(1) == $bean->delta) && !empty($bean->cta['selectors']) && is_array($bean->cta['selectors'])) {
      $prefix = '';
      $suffix = '';
      foreach ($bean->cta['selectors'] as $name) {
        $selector = cta_selector_load($name);
        if (!empty($selector['data']['preview_prefix'])) {
          $prefix = $selector['data']['preview_prefix'];
        }
        if (!empty($selector['data']['preview_suffix'])) {
          $suffix = $selector['data']['preview_suffix'];
        }
        if ($prefix || $suffix) {
          $body = $prefix . $body . $suffix;
          break;
        }

      }
    }

    if ($body) {
      $bean->content['field_body'][0]['#markup'] = $body;
      $selection = array(
        'meta' => $bean->cta,
      );

      // TODO
      //$js = cta_process_ga_events($bean->cta, 'bean');
      //dsm($js);
//
    }

  }
}

function cta_page_alter(&$page) {
  if (!empty($_GET['region'])) {
    //cta_strip_page($page);
  }
}

function cta_strip_page(&$page) {

  $region = $_GET['region'];
  $module = $_GET['module'];
  $delta = $_GET['delta'];
  foreach ($page AS $i => $r) {
    if (substr($i, 0, 1) != '#') {
      $page[$i] = array();
    }
  }
  $b = block_load($module, $delta);
  $render_arr = _block_get_renderable_array(_block_render_blocks(array($b)));
  $page[$region] = $render_arr;
  
  if ($lpath = libraries_get_path('jquery.qtip')) {
    drupal_add_js($lpath . '/jquery.qtip.js');
    drupal_add_css($lpath . '/jquery.qtip.css');
    drupal_add_js(drupal_get_path('module', 'cta') . '/test.js');
  }
  //dsm($page);
  //dsm($b);
}

function cta_load_page(&$page) {
    if (!empty($_GET['cta_show_all_selector'])) {
    $selector_name = $_GET['cta_show_all_selector'];
    $block = block_load('cta', 'cta_' . $_GET['cta_show_all_selector']);
//dsm($block);
    if (!$block) {
      return;
    }
    $region = $block->region;
    $blocks = cta_blocks_by_selector($selector_name);
    foreach ($blocks AS $block) {
      $b = block_load($block['module'], $block['delta']);
      $render_arr = _block_get_renderable_array(_block_render_blocks(array($b)));
      $page[$region] = array_merge($page[$region], $render_arr);
      
//dsm($render_arr);
    }
    
    foreach ($page[$region] AS $i => $v) {
      if (isset($v['#contextual_links'])) {
        unset($page[$region][$i]['#contextual_links']);
      }
    }
//dsm($block);
//dsm($blocks);
  }
  //dsm($page);
}

/**
 * Implements hook_node_load()
 * Attaches cta selection data on nodes
 *
 */
function cta_node_load($nodes, $types) {
  foreach ($nodes AS $nid => $node) {
    $selections = cta_selection_load_all("node/$nid", NULL, 'selector');
    foreach ($selections AS $i => $sel) {
      unset($selections[$i]['nid']);
      unset($selections[$i]['path']);
    }
    $nodes[$nid]->cta = array(
      'selections' => $selections,
    );
  }
  //dsm($nodes);
}

/**
 * Implements hook_node_insert()
 *
 */
function cta_node_insert($node) {
  cta_node_save($node);
}

/**
 * Implements hook_node_update()
 *
 */
function cta_node_update($node) {
  cta_node_save($node);
}

/**
 * Implements hook_node_save()
 * Used for node insert and update to save any cta elements attached to nodes
 *
 */
function cta_node_save($node) {

  if (!isset($node->cta)) {
    return;
  }
  if (isset($node->cta['selections']) && is_array($node->cta['selections'])) {
    $path = 'node/' . $node->nid;
    // get existing selectors
    $selections0 = cta_selection_load_all($path, NULL, 'selector');
    // add new selections
    foreach($node->cta['selections'] AS $selector => $selection) {
      $bean_delta= '';
      $block_module = '';
      $block_delta = '';
      $data = array();

      // form field format
      if (is_string($selection)) {
        $e = explode(':', $selection);
        if (count($e) == 2) {
          $module = $e[0];
          $delta = $e[1];
          if ($module == 'bean') {
            $bean_delta = $delta;
          }
          else {
            $block_module = $module;
            $block_delta = $delta;
          }
        }
      }
      // standard selection array
      else if (is_array($selection)) {
        $bean_delta = isset($selection['bean_delta']) ? $selection['bean_delta'] : '';
        $block_module = isset($selection['block_module']) ? $selection['block_module'] : '';
        $block_delta = isset($selection['block_delta']) ? $selection['block_delta'] : '';
        $data = isset($selection['data']) ? $selection['data'] : array();
      }
      else {
        continue;
      }
      cta_selection_save($path, $selector, $bean_delta, $block_module, $block_delta, $data);
      // remove selector from existing selector list
      if (isset($selections0[$selector])) {
        unset($selections0[$selector]);
      }

    }

    // remove any selections that are not currently set
    if (is_array($selections0)) {
      foreach ($selections0 AS $selector => $selection) {
        cta_selection_delete($path, $selector);
      }
    }
  }
  //dsm($nodes);
}

// transforms any block deltas that are keyed by ids into uuids
function cta_get_block_uuid_by_id(&$module, &$delta) {
  // only execute if uuid module exists
  if (!module_exists('uuid')) {
    return;
  }
  if ($module == 'webform') {
    $de = explode('-', $delta, 3);
    $nid = $de[2];
    $uuids = entity_get_uuid_by_id('node', array($nid));
    if (!empty($uuids)) {
      $de[2]  = array_shift($uuids);
      $delta = implode('-', $de);
    }
  }
}

// transforms any block deltas that are keyed by ids into uuids
function cta_get_block_id_by_uuid(&$module, &$delta) {
  // only execute if uuid module exists
  if (!module_exists('uuid')) {
    return TRUE;
  }
  if ($module == 'webform') {
    $de = explode('-', $delta, 3);
    $uuid = $de[2];

    $nids = entity_get_id_by_uuid('node', array($uuid));
    if (!empty($nids)) {
      $de[2] = array_shift($nids);
      $delta = implode('-', $de);
    }
    else {
      /*
      drupal_set_message(t('Webform uuid not found for @uuid'
        , array(
          '@uuid' => $uuid
        )
      ));
      */
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_uuid_entities_features_export_entity_alter()
 * @param $entity
 * @param $entity_type
 */
function cta_uuid_entities_features_export_entity_alter(&$entity, $entity_type) {
  if ($entity_type == 'node') {
    /*
    $nids = entity_get_id_by_uuid($entity_type, array($entity->uuid));
    $nid = array_shift($nids);

    $selections = cta_selection_load_all("node/$nid", NULL, 'selector');
    $entity->cta = array(
      'selections' => $selections,
    );
    */
    // convert any block deltas with uuids if needed
    if (isset($entity->cta)
      && isset($entity->cta['selections'])
      && is_array($entity->cta['selections'])
    ) {
      foreach ($entity->cta['selections'] AS $key => $selection) {
        if (!empty($selection['block_module'])) {
          cta_get_block_uuid_by_id($entity->cta['selections'][$key]['block_module'], $entity->cta['selections'][$key]['block_delta']);
        }
      }
    }
  }
}

/**
 * Implements cta_uuid_entities_features_import_entity_alter()
 * @param $entity
 * @param $entity_type
 */
function cta_uuid_entities_features_import_entity_alter(&$entity, $entity_type) {
  if ($entity->entity_type == 'node') {
    if (isset($entity->cta)
      && isset($entity->cta['selections'])
      && is_array($entity->cta['selections'])
    ) {
      foreach ($entity->cta['selections'] AS $key => $selection) {
        if (!empty($selection['block_module'])) {
          cta_get_block_id_by_uuid($entity->cta['selections'][$key]['block_module'], $entity->cta['selections'][$key]['block_delta']);
        }
      }
    }
  }
//dsm($entity);
}

/**
 * Implements hook entity dependency
 * @param $entity
 * @param $entity_type
 * @return array
 */
function cta_entity_dependencies($entity, $entity_type) {
  if ($entity_type == 'node') {
    if (isset($entity->cta)
      && isset($entity->cta['selections'])
      && is_array($entity->cta['selections'])
    ) {
      //dsm($entity);
      $dependencies = array();
      foreach ($entity->cta['selections'] AS $selector => $selection) {
        if ($selection['block_module'] == 'webform') {
          $de = explode('-', $selection['block_delta'], 3);
          $webform_nid = $de[2];
          $dependencies[] = array(
            'type' => 'node',
            'id' => $webform_nid,
          );
        }
      }
      return $dependencies;
    }
  }
}

/**
 * Implementation of hook_theme().
 *
 */
function cta_theme($existing, $type, $theme, $path) {
  $themes = array(
    'cta_modal' => array(
      'variables' => array(
        'site_name' => NULL,
        'render_string' => '<span>' . t("No content found") . "</span>"
      ),
      'template' => 'cta_modal'
    ),
  );
  return $themes;
}

function cta_preprocess_block(&$vars){
  $block = &$vars['block'];
  $meta = cta_block_meta_load($block->module, $block->delta);

  drupal_add_js(drupal_get_path('module', 'cta') . '/cta.js');
  drupal_add_css(drupal_get_path('module', 'cta') . '/cta.css');

  //drupal_add_css(libraries_get_path('jquery-ui') . '/jquery-ui.min.css');
  //drupal_add_js(libraries_get_path('jquery-ui') . '/jquery-ui.min.js');

  //drupal_add_css(libraries_get_path('jsPanel-bootstrap') . '/source/jsPanel.css');
  //drupal_add_js(libraries_get_path('jsPanel-bootstrap') . '/source/jquery.jspanel.bs-1.4.0.min.js', array('type' => 'file', 'scope' => 'footer'));

  if (!empty($meta) && !empty($meta['data']['popup']['enable'])) {
    $js = array(
      'trigger' => array(),
    );
    if (!empty($meta['data']['popup']['trigger']['delay'])) {
      $js['trigger']['delay'] = $meta['data']['popup']['trigger']['delay'];
    }
    else {
      $js['trigger']['delay'] = 1;
    }
    $js_set = array(
      'cta' => array(
        'modal' => array(
          $vars['block_html_id'] => $js,
        )
      ),
    );

    drupal_add_js($js_set, 'setting');

    $vars['theme_hook_suggestions'][] = 'cta_modal';

    $vars['classes_array'][] = 'modal fade';
    if (!empty($meta['data']['popup']['position']) ) {
      $vars['classes_array'][] = $meta['data']['popup']['position'];
    }

    $vars['attributes_array']['role'] = 'dialog';
    $vars['attributes_array']['tabindex'] = '-1';

    //$vars['attributes_array']['data-role'] = 'popup';

    $vars['header_classes_array'] = array(
      'modal-header'
    );
    $vars['header_attributes_array'] = array();

    $vars['body_classes_array'] = array(
      'modal-body'
    );
    $vars['body_attributes_array'] = array();

    $vars['header_classes'] = implode(' ', $vars['header_classes_array']);
    $vars['header_attributes'] = drupal_attributes($vars['header_attributes_array']);
    $vars['body_classes'] = implode(' ', $vars['body_classes_array']);
    $vars['body_attributes'] = drupal_attributes($vars['body_attributes_array']);
  }
}

/**
 * Implements hook_views_api().
 * Notifies the Views module that we're compatible with a particular API revision.
 */
function cta_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'cta') . '/views',
  );
}

/**
 * Implements hook_features_api().
 */
function cta_features_api() {
  return array(
    'cta_selector' => array(
      'name' => t('CTA selectors'),
      'default_hook' => 'cta_selector_defaults',
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'cta') . '/cta.features.inc',
    ),
    'cta_block_setting' => array(
      'name' => t('CTA block settings'),
      'default_hook' => 'cta_block_setting_defaults',
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'cta') . '/cta.features.inc',
    ),
  );
}

/*
function cta_features_api() {
  module_load_include('inc', 'features', 'includes/features.ctools');
  $api = ctools_component_features_api('cta');
  $api['cta_selector']['name'] = 'CTA selectors';
  $api['cta_selector']['file'] = drupal_get_path('module', 'cta') . '/cta.features.inc';
  return $api;
}
*/