<?php

/**
 * @file
 */

define('CONFIG_WIZARD_PAGE_ROOT', 'admin/config/');

/**
 * Implements hook_menu()
 */
function config_menu() {
  $items = array();
  $wizards = config_wizard_info_all();

  /*
  $items['admin/help/wizard'] = array(
    'title' => 'Wizards',
    'description' => 'Configuration wizards and helpers',
    'page callback' => 'config_admin_wizard_page',
    'access arguments' => array('administer configs'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'file' => 'config.admin.inc',
  );
  */

  $items[CONFIG_WIZARD_PAGE_ROOT . 'wizard'] = array(
    'title' => 'Wizards',
    'description' => 'Configuration wizards and helpers',
    'page callback' => 'config_admin_wizard_page',
    'access arguments' => array('administer configs'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'file' => 'config.admin.inc',
  );
  
  $items[CONFIG_WIZARD_PAGE_ROOT . 'wizard/%config_wizard'] = array(
    'title callback' => 'config_wizard_menu_title',
    'title arguments' => array(3),
    'page callback' => 'config_wizard_page',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  
  foreach ($wizards AS $name => $wizard) {
    if (!isset($wizard['menu_include'])) {
      continue;
    }
    $path = $wizard['menu_include'] . '/wizard/' . $wizard['name'];
    $items[$path] = array(
      'title' => $wizard['title'],
      'description' => (isset($wizard['description'])) ? $wizard['description'] : '',
      'page callback' => 'config_wizard_page',
      'page arguments' => array(config_wizard_load($wizard['name'])),
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
    ); 
    if (isset($wizard['description']))  {
      $items[$path]['description'] = $wizard['description'];
    }     
  }
  
  
  $items[CONFIG_WIZARD_PAGE_ROOT . 'wizard/%config_wizard/%'] = array(
    'title callback' => 'config_wizard_menu_title',
    'title arguments' => array(3, 4),
    'page callback' => 'config_wizard_page',
    //'page arguments' => array(3, 4, 5),
    'page arguments' => array(3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items[CONFIG_WIZARD_PAGE_ROOT . 'wizard/%config_wizard/%/%'] = array(
    'title callback' => 'config_wizard_menu_title',
    'title arguments' => array(3, 4, 5),
    'page callback' => 'config_wizard_page',
    //'page arguments' => array(3, 4, 5),
    'page arguments' => array(3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items[CONFIG_WIZARD_PAGE_ROOT . 'wizard/%config_wizard/%/%/view'] = array(
    'title' => 'View',
    'page callback' => 'config_wizard_page',
    'page arguments' => array(3, 4, 5),
    'access callback' => 'config_wizard_permission_view',
    'access arguments' => array(3),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items[CONFIG_WIZARD_PAGE_ROOT . 'wizard/%config_wizard/%/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'config_wizard_step_edit_page',
    'page arguments' => array(3, 4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('config wizard edit'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'config.admin.inc',
    'weight' => 1,
  );
  
  $items['config/util'] = array(
    'title' => 'config util',
    'description' => 'Configure calls to actions to display in blocks.',
    'page callback' => 'config_util',
    'access arguments' => array('administer configs'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'file' => 'config.admin.inc',
  );
 
  return $items;
}

function config_wizard_menu_title($wizard, $step_n = null, $substep_n = null) {
	if (isset($substep_n)) {
    $substep = config_get_wizard_substep($wizard, $step_n, $substep_n);
    return $substep['title'];
	}
	else if (isset($step_n)) {
    $step = config_get_wizard_step($wizard, $step_n);
    return $step['title'];
  }
  else {
    return $wizard['title'];
  }
}

/**
 * Implements hook_admin_paths()
 */

function config_admin_paths() {
  $paths = array(
    'wizard/*' => 1,
  );
  return $paths;
}


/**
 * Implements of hook_perm().
 */
function config_permission() {
  $permissions = array();
  $permissions['config wizard admin'] = array(
    'title' => t('Access wizards'),
    'description' => t('Eables user to administer wizards.'),
  );
  $permissions['config wizard view'] = array(
    'title' => t('Access wizards'),
    'description' => t('Eables user to view wizards.'),
  );
  $permissions['config wizard edit'] = array(
    'title' => t('Edit wizards'),
    'description' => t('Eables user to edit (editable) wizard content.'),
  );
  drupal_alter('config_permission', $permissions);
  return $permissions;
}

function config_wizard_permission_view($wizard) {
	if (!user_access('view config wizard')) {
		return FALSE;
	}
	return TRUE;
}

function config_util() {
  $node = node_load(3397);

  dsm($node);

  return '';

  $module = 'views';
  $delta = 'enterprise_blog_blocks-tags';


  //enterprise_apps_config_app('enterprise_blog');
  enterprise_apps_config_app('enterprise_landingpages_content');
  return '';

  $types = db_select('block_node_type', NULL, array('fetch' => PDO::FETCH_ASSOC))
    ->fields('block_node_type', array('type'))
    ->condition('module', $module)
    ->condition('delta', $delta)
    ->execute()
    ->fetchAllAssoc('type', PDO::FETCH_ASSOC);
  dsm($types);
  return '';


  $select = db_select('node', 'n');
  $select->addField('n', 'nid');
  $select->condition('n.status', 1);
  $select->condition('n.nid', $nids, 'IN');
  $select->addTag('node_access');
  $nids = $select->execute()->fetchCol();

  return '';

  $types = db_select('block_node_type', NULL, array('fetch' => PDO::FETCH_ASSOC))
    ->fields('block_node_type', array('type'))
    ->condition('module', $module)
    ->condition('delta', $delta)
    ->execute()
    ->fetchAllAssoc('type', PDO::FETCH_ASSOC);
  dsm($types);

  //$entity = user_load(7);
dsm($entity);
  //$entity = entity_load('user', array(2));
  //$entity = $entity[2];
dsm($entity);
  //deploy_manager_add_to_plan('enterprise_user_content', 'user', $entity);

  return '';


  $defs = widgets_element_definitions();
  dsm($defs);

  $sets = widgets_sets();
  dsm($sets);
  return '';


  $ei = entity_get_info('bean');
  dsm($ei);
  $bean = bean_load(7);
  dsm($bean);
  return '';

  //$block = block_load('search', 'form');
  //dsm($block);
  //return '';
  enterprise_apps_config_app('enterprise_demo');
  //enterprise_apps_config_app('enterprise_blog');

  return '';

  $file = file_load(5);
  dsm($file);

  file_usage_add($file, 'file', 'node', 6);
}

function config_menu_get_item_alter(&$router_item, $path, $original_map) {
  if (($path == $_GET['q']) && !empty($_GET['config-wizard'])) {
    $serialize_page_args = 0;
//dsm($router_item);
    if ($router_item['page_callback'] == 'drupal_get_form') {
      $router_item['page_callback'] = 'config_modal_get_form';
    }
    else {
     
      if (!isset($router_item['page_arguments'])) {
        $router_item['page_arguments'] = array();
      }
      else if (is_string($router_item['page_arguments'])) {
        $router_item['page_arguments'] = unserialize($router_item['page_arguments']);
        $serialize_page_args = 1;
      }
      array_unshift($router_item['page_arguments'], $router_item['page_callback']);
      $router_item['page_arguments'][] = substr_count($path, '/') + 1;
      $router_item['page_callback'] = 'config_modal_get_page';
      $router_item['type'] = MENU_CALLBACK;
      
    }
    if ($serialize_page_args) {
      $router_item['page_arguments'] = serialize($router_item['page_arguments']);
    }
  }
}

function xconfig_menu_get_item_alter_bak(&$router_item, $path, $original_map) {
	
	if (($path == $_GET['q']) && !empty($_GET['config-wizard'])) {
    if ((substr($path, -5) == '/nojs') || (substr($path, -5) == '/ajax')) {
    	$_GET['modal'] = substr($path, -4);
    	$path = substr($path, 0, -5);
    	$_GET['q'] = $path;
    }
dsm($router_item);
		if ($router_item['page_callback'] == 'drupal_get_form') {
			$router_item['page_callback'] = 'config_modal_get_form';
		}
	  else {
	   
	  	if (!isset($router_item['page_arguments'])) {
	  		$router_item['page_arguments'] = array();
	  	}
	  	else if (is_string($router_item['page_arguments'])) {
	  	  $router_item['page_arguments'] = unserialize($router_item['page_arguments']);
	  	}
	  	array_unshift($router_item['page_arguments'], $router_item['page_callback']);
	  	$router_item['page_arguments'][] = substr_count($path, '/') + 1;
	  	$router_item['page_callback'] = 'config_modal_get_page';
	  	$router_item['type'] = MENU_CALLBACK;
    }
dsm($router_item);
//dsm($router_item);
//dsm("$path == {$_GET['q']} " . substr($path, -5));
	}
}

function config_form_alter(&$form, &$form_state, $form_id) {
  //dsm($form);
  //dsm($_GET);
  //dsm($form_id);
  if (!empty($_GET['config-wizard'])) {
    $wizard = config_wizard_load($_GET['config-wizard']);
//dsm($wizard);
    if (!empty($_GET['modal'])) {
      $form['#submit'][] = 'config_modal_form_submit';
    }
    
  }
}

function config_page_alter(&$page) {
  //dsm($page);
}

function config_form_info_all() {
  $forms = &drupal_static(__FUNCTION__);
  if (isset($forms)) {
    return $forms;
  }
  
  // load wizard info coded in modules
  $forms_code = config_wizard_info_all_code();
  // load wizard info in database
  $forms_db = config_wizard_info_all_db();
  $forms = drupal_array_merge_deep($forms_code, $forms_db);
//dsm($wizards_code);
//dsm($wizards_db);  
//dsm($wizards); 

  return $wizards;  
}

function config_form_info_all_code() {
  $forms = array();
  foreach (module_implements('config_form_info') AS $module) {
    $function = $module . '_config_form_info';
    $ret = $function();
    foreach ($ret AS $name => $wiz) {
      $wiz['module'] = $module;
      $wiz['name'] = $name;
      if (isset($forms[$name])) {
        $forms[$name] += $wiz;
      }
      else {
        $forms[$name] = $wiz;
      }
    }
  }
  return $forms;
}

function config_form_info_all_db() {
  $forms = array();
  $query = db_select('config_form', 'w')
    ->fields('w');
  
  $result = $query->execute();
  while ($r = $result->fetchObject()) {
    $forms[$r->name] = unserialize($r->data);
    $forms[$r->name]['db'] = 1; 
  }
  return $forms;
}

// TODO: implement caching. Follow example in widgets module
function config_wizard_info_all() {
  $wizards = &drupal_static(__FUNCTION__);
  if (isset($wizards)) {
    return $wizards;
  }
  
  // load wizard info coded in modules
  $wizards_code = config_wizard_info_all_code();
  // load wizard info in database
  $wizards_db = config_wizard_info_all_db();
	$wizards = drupal_array_merge_deep($wizards_code, $wizards_db);
//dsm($wizards_code);
//dsm($wizards_db);  
//dsm($wizards); 

	// order steps
	foreach ($wizards AS $name => $wizard_info) {
		// init steps data
		if (isset($wizard_info['steps']) && is_array($wizard_info['steps'])) {
			foreach ($wizard_info['steps'] AS $step_n => $step) {
				if (isset($wizard_info['steps'][$step_n]['steps'])) {
					$wizards[$name]['steps'][$step_n]['steps_sort'] = config_wizard_init_steps($wizards[$name]['steps'][$step_n]['steps']);
				}
			}
			$wizards[$name]['steps_sort'] = config_wizard_init_steps($wizards[$name]['steps']);
		}
	}
//dsm($wizards); 
  return $wizards;
}

function config_wizard_init_steps(&$steps) {
	$steps_sort = array();
	if (!is_array($steps)) {
		return $steps_names;
	}
//dsm($steps);
	uasort($steps, 'drupal_sort_weight_hack');
//dsm($steps);	
	foreach ($steps AS $name => $step) {
	  $steps[$name]['name'] = $name;
  	$steps_sort[] = $name;
	}
	return $steps_sort;
}

// TODO: figure out why drupal_sort_weight is reversing order
function drupal_sort_weight_hack($a, $b) {
  $a_weight = (is_array($a) && isset($a['weight'])) ? $a['weight'] : 0;
  $b_weight = (is_array($b) && isset($b['weight'])) ? $b['weight'] : 0;
  if ($a_weight == $b_weight) {
    return 1;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

function config_wizard_info_all_code() {
	$wizards = array();
  foreach (module_implements('config_wizard_info') AS $module) {
    $function = $module . '_config_wizard_info';
    $ret = $function();
    foreach ($ret AS $name => $wiz) {
      $wiz['module'] = $module;
      $wiz['name'] = $name;
      if (isset($wizards[$name])) {
        $wizards[$name] += $wiz;
      }
      else {
      	$wizards[$name] = $wiz;
      }
    }
  }
  return $wizards;
}

function config_wizard_info_all_db() {
	$wizards = array();
	$query = db_select('config_wizard', 'w')
	  ->fields('w');
	
	$result = $query->execute();
	while ($r = $result->fetchObject()) {
		$wizards[$r->name] = unserialize($r->data);
		$wizards[$r->name]['db'] = 1; 
	}
	return $wizards;
}

function config_wizard_load($name) {
  $wizards = config_wizard_info_all();
  if (isset($wizards[$name])) {
    return $wizards[$name];
  }
  return FALSE;
}

function config_wizard_db_load($name) {
  $query = db_select('config_wizard', 'w')
    ->fields('w')
    ->condition('name', $name);
  
  $r = $query->execute()->fetchObject();
  if ($r) {
  	return unserialize($r->data);
  }
  else {
  	return array();
  }
}

function config_wizard_db_save($name, $wizard, $language = null) {
	$key = array(
	  'name' => $name
	);
	$fields = array(
	  'language' => !empty($language) ? $language : LANGUAGE_NONE,
	  'data' => serialize($wizard)
	);
	$query = db_merge('config_wizard')
    ->key($key)
    ->fields($fields);
  $query->execute();
}

function config_wizard_db_delete($name, $language = null) {
  $key = array(
    'name' => $name
  );
  $fields = array(
    'language' => !empty($language) ? $language : LANGUAGE_NONE,
    'data' => serialize($wizard)
  );
  $query = db_delete('config_wizard')
    ->condition('name', $name);
  if (!isset($language)) {
    $lanuage = LANGUAGE_NONE;
  }
  $query->condition('language', $lanuage);
  $query->execute();
}

function config_wizard_category_info_all() {
  $cat_info = array();
  foreach (module_implements('config_wizard_category_info') AS $module) {
    $function = $module . '_config_wizard_category_info';
    $ret = $function();
    foreach ($ret AS $name => $cat) {
      $cat['module'] = $module;
      $cat['name'] = $name;
      if (isset($cat_info[$name])) {
        $cat_info[$name] += $cat;
      }
      else {
        $cat_info[$name] = $cat;
      }
    }
  }
  return $cat_info;
}

function config_progress_load($name, $uid = null, $started = null, $mode = 'active') {
	global $user;
  $query = db_select('config_progress', 'p')
    ->fields('p')
    ->condition('name', $name);

  if (isset($uid)) {
    $query->condition('uid', $uid);   
  }    
  if (isset($started)) {
  	$query->condition('started', $started);   
  }
    
  if ($mode == 'active') {
  	$query->condition('finished', 0);  	
  }
  if (($mode == 'active') || ($mode == 'last')) {
  	$query->orderBy('started', 'DESC');
  }
  
  $r = $query->execute()->fetchAssoc();

  if ($r) {
  	$r['data'] = unserialize($r['data']);
    return $r;
  }
  else {
    return FALSE;
  }
}

function config_progress_save($progress) {
	$key = array(
    'name' => $progress['name'],
	  'uid' => $progress['uid'],
	  'started' => $progress['started'],
  );
  $fields = array(
    'data' => serialize($progress['data']),
    'finished' => $progress['finished'],
  );
  $query = db_merge('config_progress')
    ->key($key)
    ->fields($fields);
  $query->execute();
}

function config_progress_delete($progress) {
  $key = array(
    'name' => $progress['name'],
    'uid' => $progress['uid'],
    'started' => $progress['started'],
  );
  $fields = array(
    'data' => serialize($progress['data']),
    'finished' => $progress['finished'],
  );
  $query = db_delete('config_progress');
  
  if (isset($progress['name'])) {
    $query->condition('name', $progress['name']);
  }
  if (isset($progress['uid'])) {
    $query->condition('uid', $progress['uid']);
  }
  if (isset($progress['started'])) {
    $query->condition('started', $progress['started']);
  }
    

  $query->execute();
}



function config_wizard_page($wizard, $step_n = null, $substep_n = null) {
  global $user;
  
  $sidebar = array();
//dsm($wizard); 
  if (!isset($step_n) || !isset($substep_n)) {
    $step0 = $wizard['steps'][$wizard['steps_sort'][0]];
    drupal_goto($_GET['q'] . '/' . $wizard['steps_sort'][0] . '/' . (isset($step0['steps']) ? $step0['steps_sort'][0] : '-'));
  }
  
  if ($substep_n == '-') {
  	$substep_n = '';
  }

  ctools_include('modal');
  ctools_modal_add_js();
  
  drupal_add_js(drupal_get_path('module', 'config') . '/js/config.wizard.js');
  drupal_add_css(drupal_get_path('module', 'config') . '/css/config.wizard.css');
  
  $js = array(
    'config-modal' => array(
      'modalOptions' => array(
        'opacity' => .8,
        'background-color' => '#000000',
      ),
      'modalSize' => array(
        'type' => 'scale',
        'width' => .9,
      ),
      //'animation' => 'fadeIn',
      //'modalTheme' => 'happy_modal',
      'throbber' => theme('image', array('path' => ctools_image_path('throbber.gif', 'ctools'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
      'closeText' => '',
      'closeImage' => theme('image', array('path' => ctools_image_path('modal_close.png', 'config'), 'alt' => t('Close window'), 'title' => t('Close window'))),
    ),
    'config' => array(
      'wizard' => array(
        'name' => $wizard['name'],
        'step_n' => $step_n,
        'substep_n' => $substep_n,
      ),
    ),
  );
 
  
  // Add the settings array defined above to Drupal 7's JS settings:
  drupal_add_js($js, 'setting');

  
  $form = drupal_get_form('config_wizard_form', $wizard, $step_n, $substep_n);
  
  drupal_set_title($wizard['title']); 
  
  
  
  //drupal_add_region_content('sidebar_first', $task_list);
  $sidebar['task_list'] = array(
    //'#markup' => $task_list,
    '#items' => config_get_task_list($wizard),
    '#wizard' => $wizard,
    '#active' => $step_n . ($substep_n ? '__' . $substep_n : ''),
    '#step' => $step_n,
    '#substep' => $substep_n,
    '#theme' => 'config_task_list',
    '#weight' => -99,
  );
  $vars = array(
    'sidebar' => $sidebar,
    'main' => $form,
  );
  $output = theme('config_wizard_page', $vars);
//dsm($form);
  return $output;
  //return theme('install_page', array('content' => $form));
  return $form;
  return config_wizard_form($form);
}

function config_get_task_list($wizard) {
  $task_list = array();
  foreach ($wizard['steps'] AS $step_n => $step) {
    if (isset($step['steps'])) {      
      foreach ($step['steps'] AS $substep_n => $substep) {
        $task_list[$step_n . '__' . $substep_n] = $substep['title'];
      }       
    }
    else {
      $task_list[$step_n] = $step['title'];
    }
  }
  return $task_list;
}

/**
 * Add default buttons to a form and set its prefix.
 *
 * @param $form
 *   An associative array containing the structure of the form.
 *
 * @return
 *   The form structure.
 *
 * @see system_settings_form_submit()
 * @ingroup forms
 */
function config_wizard_form($form, &$form_state = array(), $wizard, $step_n, $substep_n) {
//dsm($form);
//dsm($form_state);
//dsm($wizard);
//dsm($step_n);
  global $user;
  

  $vars = array(
    '_uid' => $user->uid
  );
  
  $data = config_wizard_data_init($wizard['name']);
  $data['_status']['step_n'] = $step_n;
  $data['_status']['substep_n'] = $substep_n;
  config_wizard_data_set('_status', $data['_status']);
  
//dsm($data);  
  
  if (isset($wizard['file'])) {
    require_once ($wizard['path'] ? $wizard['path'] : '') . $wizard['file'];
  } 
  
  if (!empty($astep['finished'])) {
    config_wizard_data_finished($wizard['name']);
  }
  
  //$step_i = $step_n - 1;
  //$substep_i = $substep_n - 1;
  
  $astep = config_get_wizard_active_step($wizard, $step_n, $substep_n);

//dsm($astep); 
  $step_i = config_get_step_index($wizard['steps'], $step_n); 
  $substep_i = -1;
  if (!empty($astep['is_sub'])) {
    $t = !empty($astep['parent']['title']) ? $astep['parent']['title'] : '';
    if ($astep['title']) {
    	$t .= (($t) ? ' > ' : '') . $astep['title'];
    }
    $substep_i = config_get_step_index($wizard['steps'][$step_n]['steps'], $substep_n); 
  }
  else {
    $t = !empty($astep['title']) ? $astep['title'] : '';
  }
  $step_i = config_get_step_index($wizard['steps'], $step_n);
  $subtitle = t('Step @step@substep: @title', array(
    '@step' => $step_i + 1,
    '@substep' => ($substep_n > 1) ? '.' . ($substep_i + 1) : '',
    '@title' => $t,
  ));
  $form['subtitle'] = array(
    '#markup' => '<h2>' . $subtitle . '</h2>',
    '#weight' => -99,
  );
  
  
//dsm($data);  
  // TODO: don't auto delete. Give user an option of continuing or starting over
  if (($step_n == 1) && ($substep_n = 1)) {
    config_wizard_data_del();
  }

//dsm($data);
  $form_state['config'] = array(
    'wizard_data' => $data,
    'wizard' => $wizard,  
    'step_n' => $step_n,
    'substep_n' => $substep_n,
    'wizard_name' => $wizard['name'],
    'active_step' => $astep,
  );
  
  if ($func = config_get_wizard_step_callback($astep, $step_n, $substep_n, 'page')) {
//dsm($func);
    $ret = $func($form, $form_state, $data);

	  if (is_array($ret)) {
	    $form = array_merge($form, $ret);
	  }
	  else {
	    $form[] = array(
	      '#markup' => $ret,
	    );
	  }  	
  }
  
  if (isset($astep['content']) && is_array($astep['content'])) {
    $form = array_merge($form, $astep['content']);
  }

  if (empty($astep['finished'])) {
    $form['actions']['#type'] = 'actions';
    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Submit and continue'));
    if (!empty($astep['skipable'])) {
      $form['actions']['skip'] = array(
        '#type' => 'link',
        '#title' => (is_string($astep['skipable'])) ? $astep['skipable'] : t('Skip'),
        '#href' => config_get_wizard_next_step_path($wizard, $step_n, $substep_n, TRUE),
      ); 
    }
  }
  else {
    $form['actions']['#type'] = 'actions';
    $form['actions']['submit'] = array(
      '#type' => 'link',
      '#title' => t('Exit'),
      '#href' => 'admin/config/wizard',
    );

  }

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  //$form['#tree'] = TRUE;
  $form['#submit'][] = 'config_wizard_form_submit';
  // By default, render the form using theme_system_settings_form().
  if (!isset($form['#theme'])) {
    //$form['#theme'] = 'system_settings_form';
  }
  return $form;
}

function config_wizard_form_validate($form, $form_state) {
//dsm('config_wizard_form_validate');
//dsm($form_state);
  $config = $form_state['config'];
  $wizard = $config['wizard'];
  
  if (isset($wizard['file'])) {
    require_once ($wizard['path'] ? $wizard['path'] : '') . $wizard['file'];
  } 
  
  if ($func = config_get_wizard_step_callback($config['active_step'], $config['step_n'] , $config['substep_n'], 'validate')) {
  	$func($form, $form_state);
  }
  if (form_get_errors()) {
    //drupal_set_message(t('Resolve errors before proceeding.'), 'error');
  }
}

function config_wizard_form_submit($form, &$form_state) {
//dsm('config_wizard_form_submit');
//dsm($form_state);
  $config = $form_state['config'];
  $wizard = $config['wizard'];  
  
  // init wizard data singlton.
  // note: use data from form_state (rather than config_wizard_data_init)
  // to enable data modification in form_validate
  config_wizard_data_init($config['wizard']['name']);
  
  // check if wizard has submit callback
  if (isset($wizard['file'])) {
    require_once ($wizard['path'] ? $wizard['path'] : '') . $wizard['file'];
  } 
  if ($func = config_get_wizard_step_callback($config['active_step'], $config['step_n'] , $config['substep_n'], 'submit')) {
    $func($form, $form_state);
  } 
  // reload form_state values incase they were modified in submit hook.
  $config = $form_state['config'];
  $wizard = $config['wizard'];  
  $values = $form_state['values']; 
  
  $ignore = array(
    'actions',
    'form_build_id',
    'form_token',
    'form_id',
    'op',
    'submit',
  );  
  
  $config_vars = array();
  $system_vars = array();
  
  // save data from form state values
  foreach ($values AS $name => $value) {
    if (in_array($name, $ignore)) {
      continue;
    }
    if (isset($form[$name]['config_data'])) {
      if ($form[$name]['config_data']) {
        $name = $form[$name]['config_data'];
      }
      else {
        continue;
      }
    }
    config_wizard_data_set($name, $value);
  }

  // save step progress
  if ($config['substep_n']) {
    $data['_status']['steps'][$config['step_n']]['steps'][$config['substep_n']] = array(
      'finished' => REQUEST_TIME,
    );  	
  }
  else {
	  $data['_status']['steps'][$config['step_n']] = array(
	    'finished' => REQUEST_TIME,
	  );
  }
  config_wizard_data_set('_status', $data['_status']);
  
  $data = config_wizard_data_get();
  $form_state['config']['wizard_data'] = $data;
  config_wizard_data_save();
  $complete_msg = t('@wizard_title finished.',
    array(
      '@wizard_title' => $config['wizard']['title'],
    )
  );
  // TODO change this to support wizard pages without callbacks
  if ($keys = config_get_wizard_next_step_keys($config['wizard'], $config['step_n'], $config['substep_n'])) {
    drupal_goto(CONFIG_WIZARD_PAGE_ROOT . 'wizard/' . $config['wizard']['name'] . '/' . $keys['step_n'] . '/' . $keys['substep_n']);
  }  
  else if (isset($_GET['destination'])) {
  	drupal_set_message($complete_msg);
  	drupal_goto($_GET['destination']);
  }
  else {
  	drupal_set_message($complete_msg);
  	drupal_goto(CONFIG_WIZARD_PAGE_ROOT . 'wizard');
  }
  
}

function config_get_wizard_next_step_keys($wizard, $step_n, $substep_n) {
	$step = config_get_wizard_step($wizard, $step_n);

  // check if current step has substeps, return next substep
  if (isset($step['steps']) && $substep_n) {
    $substep_i = config_get_step_index($step['steps'], $substep_n);
    if (isset($step['steps_sort'][$substep_i + 1])) {
      return array(
        'step_n' => $step_n,
        'substep_n' => $step['steps_sort'][$substep_i + 1],
      );
    }
  }

	$step_i = config_get_step_index($wizard['steps'], $step_n);

  if (isset($wizard['steps_sort'][$step_i + 1])) {
    $next_step = config_get_wizard_step($wizard, $wizard['steps_sort'][$step_i + 1]);
    return array(
      'step_n' => $wizard['steps_sort'][$step_i + 1],
      'substep_n' => (!empty($next_step['steps_sort'])) ? $next_step['steps_sort'][0] : '-',
    );
  }
}

function config_get_wizard_next_step_path($wizard, $step_n, $substep_n, $return_end_path_if_false = FALSE) {
  if ($keys = config_get_wizard_next_step_keys($wizard, $step_n, $substep_n)) {
    $path = CONFIG_WIZARD_PAGE_ROOT . 'wizard/' . $wizard['name'] . '/' . $keys['step_n'] . '/' . $keys['substep_n'];
    return $path;
  } 
  if ($return_end_path_if_false) {
  	$path = 'admin/help/wizard';
  	return $path;
  }
  return FALSE;
}

function config_get_wizard_step_callback($active_step, $step_n, $substep_n, $stage = 'page') {
	$funcs = array();
  if (isset($active_step[$stage . ' callback'])) {
    $funcs[] =  $active_step[$stage . ' callback'];
  }	
	else if (isset($active_step['callback'])) {
	  $funcs[] = $active_step['callback'] . ($stage != 'page' ? "_$stage" : '');
	}
  foreach ($funcs AS $key => $f) {
    if (function_exists($f)) {
      return $f;
    }
  }
	return FALSE;
	// determine automatic function name
  $func_root = $wizard_info['module'] . '_config_wizard_' . $wizard_info['name'];
}

function config_get_wizard_path($wizard, $step_n, $substep_n) {
  $path = CONFIG_WIZARD_PAGE_ROOT . 'wizard/' . $wizard['name'];
  $path .= '/' . $step_n;
  $path .= '/' . (($substep_n) ? $substep_n : '-');
  return $path;
}

function config_get_wizard_step($wizard, $step_n) {
  if (isset($wizard['steps']) && isset($wizard['steps'][$step_n])) {
  	$wizard['steps'][$step_n]['name'] = $step_n;
    return $wizard['steps'][$step_n];
  }
  return FALSE; 
}

function config_get_wizard_substep($wizard, $step_n, $substep_n) {
  $step = config_get_wizard_step($wizard, $step_n);
  if (!$step) {
  	return FALSE;
  }
  if (isset($step['steps']) && isset($step['steps'][$substep_n])) {
    $s = $step['steps'][$substep_n];
  	unset($step['steps']);
  	$s['#parent'] = $step;
  	$s['name'] = $substep_n;
    return $s;
  }
  return FALSE; 
}

function config_get_wizard_active_step($wizard, $step_n, $substep_n)  {
	$step = config_get_wizard_step($wizard, $step_n);
	if (!$step) {
		return FALSE;
	}
	$substep = config_get_wizard_substep($wizard, $step_n, $substep_n);
	if (!$substep) {
		return $step;
	} 
  return $substep;
}

function config_get_step_index($steps, $step_n) {
	return array_search($step_n, array_keys($steps));
}

function config_wizard_data_get($key = '') {
	return config_wizard_data('get', $key);
}

function config_wizard_data_set($key, $value) {
  return config_wizard_data('set', $key, $value);
}

function config_wizard_data_init($name, $vars = array()) {
  return config_wizard_data('init', $name, $vars);
}

function config_wizard_data_finished($name, $vars = array()) {
  return config_wizard_data('finished', $name, $vars);
}

function config_wizard_data_save() {
  return config_wizard_data('save');
}

function config_wizard_data_del() {
  return config_wizard_data('del');
}

function config_wizard_data($action = 'get', $key = '', $value = '') {
//$args = func_get_args();
//dsm($args);
  global $user;
  
	$progress = &drupal_static(__FUNCTION__);
//dsm($action);
//dsm($data);
	static $var_name;
  if ($action == 'init') {
  	if (!isset($value['uid'])) {  		
  		$value['uid'] = $user->uid;
  	}
  	$progress = config_progress_load($key, $value['uid']);
  	if (!isset($progress['data'])) {
	  	$progress = array();
	  	$progress['name'] = $key;
	  	$progress['uid'] = $value['uid'];
	  	$progress['started'] = REQUEST_TIME;
	  	$progress['finished'] = 0;
	  	$progress['data'] = array();
	  	$progress['data']['_status']= array(
	  	  'steps' => array(),
	  	  'step_n' => '',
	  	  'substep_n' => '',
	  	);
  	}

  	//$var_name = 'config_wizard_data_' . $key;
  	//$data = variable_get($var_name, $data);
  }
	if (!isset($progress['name']) || !isset($progress['uid']) || !isset($progress['started'])) {
		return NULL;
	}
//dsm($action);
//dsm($var_name);
	
	if ($action == 'set') {
		$progress['data'][$key] = $value;
	}
//dsm($data);
	if ($action == 'save') {
		config_progress_save($progress);
	}
  if ($action == 'del') {
    config_progress_delete($progress);
  }
  if ($action == 'finished') {
    $progress['finished'] = REQUEST_TIME;
    config_progress_save($progress);
  }
	if (($action == 'get') && ($key)) {
		return isset($progress['data'][$key]) ? $progress['data'][$key] : NULL;
	}
	return $progress['data'];
}

/**
 * Display a Drupal form using CTools modal or normal page display.
 */
function config_modal_get_form() {
  $args = func_get_args();
  $form_id = array_shift($args);
  //$js = $ajax = array_pop($args);
  $ajax = (isset($_GET['modal']) && ($_GET['modal'] == 'ajax'));

  //ctools_automodal_fix_get_q();

  if ($ajax) {
    ctools_include('modal');
    ctools_include('ajax');

    $form_state = array(
      'ajax' => $ajax,
      'build_info' => array('args' => $args),
    );
    $output = ctools_modal_form_wrapper($form_id, $form_state);

    if (empty($output)) {
      $output[] = ctools_modal_command_loading();
      if (!empty($_GET['destination'])) {
        $output[] = ctools_ajax_command_redirect($_GET['destination']);
      }
    }
    
    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    
    print ajax_render($output);
    drupal_exit();
  }
  else {
    array_unshift($args, $form_id);
    return call_user_func_array('drupal_get_form', $args);
  }
}

/**
 * Display a normal Drupal page using CTools modal.
 */
function config_modal_get_page() {
  $args = func_get_args();
  $callback = array_shift($args);
  //$ajax = array_pop($args);
  $ajax = ((isset($_GET['modal'] )) && ($_GET['modal'] == 'ajax'));

  //ctools_automodal_fix_get_q();

  if (function_exists($callback)) {
    $output = call_user_func_array($callback, $args);
    if ($ajax) {
      ctools_include('modal');
      ctools_include('ajax');
      $output = config_modal_page_render($output);

      if (empty($output)) {
        $output[] = ctools_modal_command_loading();
        if (!empty($_GET['destination'])) {
          $output[] = ctools_ajax_command_redirect($_GET['destination']);
        }
      }

      print ajax_render($output);
      drupal_exit();
    }
    else {
      return $output;
    }
  }
  else {
    watchdog('config_modal_page', "callback: $callback <br>\n args:<br>\n" . print_r($args));
    return MENU_NOT_FOUND;
  }
}

/**
 * Render a page into an AJAX display.
 */
function config_modal_page_render($output) {
  if (is_array($output)) {
    $output = drupal_render($output);
  }

  $title = drupal_get_title();

  // If there are messages for the form, render them.
  if ($messages = theme('status_messages')) {
    $output = '<div class="messages">' . $messages . '</div>' . $output;
  }

  $commands = array();
  $commands[] = ctools_modal_command_display($title, $output);
  return $commands;
}

function config_modal_form_submit(&$form, &$form_state) {
  // Generate the new link using the submitted text value.
 // $link = _mymodule_make_link($form_state['values']['new_link_text']);
 
  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
 
  // Tell the browser to replace the old link with the new one.
  //$form_state['ajax_commands'][] = ajax_command_replace('#magical-modal-link', $link);
}

/**
 * Implementation of hook_features_api().
 *
 * Allow exporting of config wizards by the Features module.
 */
function config_features_api() {
  return array(
    'config_wizard' => array(
      'name' => t('Config wizards'),
      'feature_source' => TRUE,
      'default_hook' => 'config_wizard_defaults',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'file' => drupal_get_path('module', 'config') . '/includes/config.features.inc',
    )
  );
}


// future

function config_set_info_all() {
	$set['webform'] = array(
	  'title' => t('webform'),
	  'description' => t('Streamlined setup for standard webforms.'),
	);
	$set = array_merge($set, config_set_setting_info_all());
	return $set;
}

function config_set_setting_info_all() {
  $set['webform']['default'] = array(
    'title' => t('Default'),
    'description' => t('Creates a basic contact form.'),
    'options form' => 'config_set_options_form_webform',
    'callback' => '',
  );
  return $set;
}

function config_set() {
	
}


// TODO this is a basic example. See https://drupal.org/node/1388922 for improved version
function config_node_construct($type = 'page', $vars = array()) {
  
  if (isset($vars['nid'])) {
    $node = node_load($vars['nid']);
    unset($node->nid);
    unset($node->vid);
    $node->is_new = 1;
    return $node; 
  }
  // check type exists
  $types = node_type_get_types();  
  if (!isset($types[$type])) {
    return FALSE;
  }
	global $user;
	$values = array(
	  'type' => $type,
	  'title' => !empty($vars['title']) ? $vars['title'] : 'TITLE',
	  'language' => !empty($vars['language']) ? $vars['language'] : LANGUAGE_NONE,
	  'uid' => !empty($vars['uid']) ? $vars['uid'] : $user->uid,
    'status' => 1, //(1 or 0): published or not
    'promote' => 0, //(1 or 0): promoted to front page
    'comment' => 0,
	);
  $entity = entity_create('node', $values); 
  return $entity;
}
  
function config_node_modify($node, $vars) {
  if (isset($vars['path'])) {
    if (isset($node->path)) {
      $vars['path'] += $node->path;
    }
    else {
      $vars['path'] += array(
        'alias' => '',
        'pid' => null,
        'source' => null,
        'language' => LANGUAGE_NONE,
        'pathauto' => 1,
      );
    }
    $node->path = $vars['path'];
  }
  if (isset($vars['menu'])) {
    if (isset($node->menu)) {
      $vars['menu'] += $node->menu;
    }
    else {
      $vars['menu'] += array(
        'enabled' => 0,
        'mlid' => 0,
        'module' => 'menu',
        'hidden' => 0,
        'has_children' => 0,
        'customized' => 0,
        'options' => array(),
        'expanded' => 0,
        'parent_depth_limit' => 8,
        'link_title' => '',
        'description' => '',
        'parent' => 'main-menu:0',
        'weight' => '0',
        'plid' => '0',
        'menu_name' => 'main-menu',   
      );
    }
    $node->menu = $vars['menu'];
  }  
  return $node;
}

function config_node_clone($node) {
  
}

function config_module_enable_disable($modules) {
	$enable = array();
	$disable = array();
//dsm($modules);
	foreach ($modules AS $module_name => $flag) {
//dsm(module_exists($module_name));		
	  if ($flag) {
		  if (!module_exists($module_name)) {
        $enable[] = $module_name;
      }	
		}
		else {
		  if (module_exists($module_name)) {
        $disable[] = $module_name;
      }
		}
	}
//dsm($enable);
  if (count($enable)) {
    module_enable($enable, TRUE);
  }
  if (count($disable)) {
    module_disable($disable, FALSE);
  }
  if (count($enable) || count($disable)) {
  	drupal_flush_all_caches();
  }
}

// see https://api.drupal.org/comment/28464#comment-28464
function config_check_validate_func($func, $form, &$form_state) {
  $func($form, $form_state);
  $errors0 = $errors = form_get_errors();
//dsm($errors);
  if ($errors) {
    // Clear errors.
    form_clear_error();
    // Clear error messages.
    $error_messages = drupal_get_messages('error');
    // Initialize an array where removed error messages are stored.
    $removed_messages = array();
    

// Remove all errors originated by the 'foo][bar' element.
    foreach ($errors as $name => $error_message) {
      //if ($name == 'foo][bar') {
        $removed_messages[] = $error_message;
        unset($errors[$name]);
      //}
    }
    

// Reinstate remaining errors.
    foreach ($errors as $name => $error) {
      form_set_error($name, $error);
      // form_set_error() calls drupal_set_message(), so we have to filter out
      // these from the error messages as well.
      $removed_messages[] = $error;
    }
    

// Reinstate remaining error messages (which, at this point, are messages that
    // were originated outside of the validation process).
    foreach (array_diff($error_messages['error'], $removed_messages) as $message) {
      drupal_set_message($message, 'error');      
    }
  }
  return $errors0;
}

function config_l($text, $link, $options) {
	if (!isset($options['attributes'])) {
		$options['attributes'] = array();
	}
  if (!isset($options['attributes']['class'])) {
    $options['attributes']['class'] = array();
  }
	if (isset($options['target'])) {
		$options['attributes']['target'] = $options['target'];
		unset($options['target']);
	}
  if (isset($options['class'])) {
  	if (is_array($options['class'])) {
      $options['attributes']['class'] = array_merge($options['attributes']['class'], $options['class']);
  	}
  	else {
  		$options['attributes']['class'][] = $options['class'];
  	}
    unset($options['class']);
  }
	if (!empty($options['modal'])) {
		$options['attributes']['class'][] = 'tooltip-modal';
	}
	return l($text, $link, $options);
}

function config_lm($text, $link, $options) {
	$options['class'] = array(
	  'ctools-use-modal',
	  'ctools-modal-config-modal',
	  'config-modal',
	);
	unset($options['modal']);
	if (!isset($options['query'])) {
		$options['query'] = array();
	}
	$options['query']['modal'] = 'ajax';
	$out = '';
  //$out = '<span class="modal-link">';
  $out .= config_l($text, "$link/nojs", $options);
  //$out .= '</span>';
  
  //$out = ctools_modal_text_button($text, $link, t('View node content for @name', array('@name' => $name)), 'ctools-modal-config-modal');
  return $out;
}

function config_theme($existing, $type, $theme, $path) {
  $themes = array();
  $themes['config_wizard_page'] = array(
    //'file' => 'admin/intel.admin_theming.inc',
    'variables' => array(
      'main' => array(),
      'sidebar' => array(),
    ),
  );
  $themes['config_task_list'] = array(
    //'file' => 'admin/intel.admin_theming.inc',
    'variables' => array(
      'items' => array(),
      'active' => NULL,
      'step' => NULL,
      'substep' => NULL,
      'wizard' => array(),
      'attributes' => array(),
    ),
  );
  return $themes;
}

function theme_config_wizard_page($variables) {
  $main = $variables['main'];
  $sidebar = $variables['sidebar'];

  
  $output = '';
  
  $attributes = array(
    'id' => 'config-wizard',
  );  
  $output .= '<div' . drupal_attributes($attributes) . '>';
  
  $attributes = array(
    'id' => 'sidebar',
  );
  
  $output .= '<div' . drupal_attributes($attributes) . '>';
  $output .= render($sidebar);
  $output .= '</div>';
  
  $attributes = array(
    'id' => 'form',
  );
  
  $output .= '<div' . drupal_attributes($attributes) . '>';
  $output .= render($main);
  $output .= '</div>';
  
  $output .= '</div>';
  
  return $output;
}

function theme_config_task_list($variables) {
//dsm($variables);
  $items = $variables['items'];
  $wizard = $variables['wizard'];
  $active = $variables['active'];
  $active_step = $variables['step'];
  $active_substep = isset($variables['substep']) ? $variables['substep'] : '';
  $attributes = $variables['attributes'];

  $done = isset($wizard['steps'][$active_step]) || $active_step == NULL;
  $output = '<div' . drupal_attributes($attributes) . '>';
  $output .= '<h2 class="element-invisible">Tasks</h2>';
  $output .= '<ol class="task-list">';


  $status = '';
  foreach ($wizard['steps'] AS $step_n => $step) {
    $active = ($active_step == $step_n);
    // check if step contains sub items
    if ($active && isset($step['steps'])) {
      $active = 2;
    }

    $output .= _theme_config_task_list_item($step['title'], $active, $done);
    if (isset($step['steps']) && ($active_step == $step_n)) {
      foreach ($step['steps'] AS $substep_n => $substep) {
        $output .= '<ol class="subtask-list">';
        $output .= _theme_config_task_list_item($substep['title'], ($active_substep == $substep_n), $done);
        $output .= '</ol>';
      }
    }
  }
  $output .= '</ol>';
  $output .= '</div>';
  return $output;

  foreach ($items as $k => $item) {
    if ($active == $k) {
      $class = 'active';
      $status = '(' . t('active') . ')';
      $done = FALSE;
    }
    else {
      $class = $done ? 'done' : '';
      $status = $done ? '(' . t('done') . ')' : '';
    }
    $output .= '<li';
    $output .= ($class ? ' class="' . $class . '"' : '') . '>';
    $output .= $item;
    $output .= ($status ? '<span class="element-invisible">' . $status . '</span>' : '');
    $output .= '</li>';
  }

}

function _theme_config_task_list_item($title, $active, &$done) {
  if ($active == 1) {
    $class = 'active';
    $status = '(' . t('active') . ')';
    $done = FALSE;
  }
  else if ($active == 2) {
    $class = 'active-group';
    $status = '(' . t('active') . ')';
  }
  else {
    $class = $done ? 'done' : '';
    $status = $done ? '(' . t('done') . ')' : '';
  }
  $output = '';
  $output .= '<li';
  $output .= ($class ? ' class="' . $class . '"' : '') . '>';
  $output .= $title;
  $output .= ($status ? '<span class="element-invisible">' . $status . '</span>' : '');
  $output .= '</li>';
  return $output;
}
