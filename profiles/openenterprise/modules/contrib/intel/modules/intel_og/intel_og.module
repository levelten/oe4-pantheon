<?php

/**
 *  Implements of hook_menu()
 */
function intel_og_menu() {
  $items = array();
  $items['admin/config/intel/og'] = array(
    'title' => 'Organic Groups',
    'description' => 'Setup ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_og_admin_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    //'type' => MENU_LOCAL_TASK,
    'file' => 'intel_og.admin.inc',
  );
  $items['group/%/%/admin/intel'] = array(
    'title callback' => 'Intel',
    //'title arguments' => array('People in group @group', 1, 2),
    //'description' => 'Find and manage group members.',
    'page callback' => 'intel_og_admin_page',
    'page arguments' => array(1, 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('view intel visitor data', 1, 2),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'intel_og.admin.inc',
  );
  $items['group/%/%/admin/intel/contacts'] = array(
    'title' => 'Contacts',
    'description' => 'Information about visitors.',
    'page callback' => 'intel_og_admin_people_contacts',
    'page arguments' => array(1, 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('view intel visitor data', 1, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'intel_og.admin.inc',
  );
  $items['group/%/%/admin/intel/submissions'] = array(
    'title' => 'Submissions',
    'description' => 'Information about visitors.',
    'page callback' => 'intel_og_admin_people_submissions',
    'page arguments' => array(1, 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('view intel visitor data', 1, 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'intel_og.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_og_permission().
 */
function intel_og_og_permission() {
  $items = array();

  $items['view referenced intel visitors'] = array(
    'title' => t('View referenced visitor intel'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['update referenced intel visitors'] = array(
    'title' => t('Edit referenced visitor intel'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['delete referenced intel visitors'] = array(
    'title' => t('Delete referenced visitors'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['view referenced intel submissions'] = array(
    'title' => t('View referenced submission metadata'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['view referenced webform submissions'] = array(
    'title' => t('View referenced webform submissions'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['update referenced webform submissions'] = array(
    'title' => t('Edit referenced webform submissions'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  $items['delete referenced webform submissions'] = array(
    'title' => t('Delete referenced webform submissions'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
  );

  return $items;
}

function intel_og_intel_visitor_access($visitor, $op = 'view', $account = NULL) {
  //$args = func_get_args();
  //dsm($args);
  global $user;
  $account = isset($account) ? $account : $user;
  //dsm($account);

  if (empty($visitor->vid)) {
    return FALSE;
  }
  $vars = array(
    'artifact_type' => 'visitor',
    'aid' => $visitor->vid,
  );
  $intel_og_artifact = intel_og_artifact_load_by_vars($vars);
  if (empty($intel_og_artifact->gid)) {
    return FALSE;
  }
  //dsm($intel_og_artifact);

  $group_type = variable_get('intel_og_default_group_type', 'node');
  //dsm($group_type);

  switch ($op) {
    case 'view':
      return og_user_access($group_type, $intel_og_artifact->gid, 'view referenced intel visitors', $account);
    case 'update':
      return og_user_access($group_type, $intel_og_artifact->gid, 'update referenced intel visitors', $account);
    case 'delete':
      return og_user_access($group_type, $intel_og_artifact->gid, 'delete referenced intel visitors', $account);
  }
  return FALSE;
}

function intel_og_intel_submission_access($submission, $op = 'view', $account = NULL) {
  //$args = func_get_args();
  //dsm($args);
  global $user;
  $account = isset($account) ? $account : $user;
  //dsm($account);

  if (empty($submission->sid)) {
    return FALSE;
  }
  $vars = array(
    'artifact_type' => 'submission',
    'aid' => $submission->sid,
  );
  $intel_og_artifact = intel_og_artifact_load_by_vars($vars);
//dsm($intel_og_artifact);
  if (empty($intel_og_artifact->gid)) {
    return FALSE;
  }
  //dsm($intel_og_artifact);

  $group_type = variable_get('intel_og_default_group_type', 'node');
  //dsm($group_type);

  switch ($op) {
    case 'view':
    case 'list':
      return og_user_access($group_type, $intel_og_artifact->gid, 'view referenced intel submissions', $account);
  }
  return FALSE;
}

/**
 * Implements hook_webform_submission_access().
 *
 * @see webform_submission_access()
 */
function intel_og_webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  //$args = func_get_args();
 // dsm($args);
  global $user;
  $account = isset($account) ? $account : $user;
  //dsm($account);

  if (empty($submission->sid)) {
    return FALSE;
  }

  $vars = array(
    'type' => 'webform',
    'fid' => $submission->nid,
    'fsid' => $submission->sid,
  );
  $intel_submission = intel_submission_load_by_vars($vars);
  if (empty($intel_submission->sid)) {
    return FALSE;
  }
  //dsm($intel_submission);

  $vars = array(
    'artifact_type' => 'submission',
    'aid' => $intel_submission->sid,
  );
  $intel_og_artifact = intel_og_artifact_load_by_vars($vars);
  if (empty($intel_og_artifact->gid)) {
    return FALSE;
  }
  //dsm($intel_og_artifact);

  $group_type = variable_get('intel_og_default_group_type', 'node');
  //dsm($group_type);

  switch ($op) {
    case 'view':
      return og_user_access($group_type, $intel_og_artifact->gid, 'view referenced webform submissions', $account);
    case 'edit':
      return og_user_access($group_type, $intel_og_artifact->gid, 'edit referenced webform submissions', $account);
    case 'delete':
      return og_user_access($group_type, $intel_og_artifact->gid, 'delete referenced webform submissions', $account);
  }
  return FALSE;
}

function intel_og_artifact_load($artifact_type, $aid) {
  $vars = array(
    'artifact_type' => $artifact_type,
    'aid' => $aid,
  );
  return intel_og_artifact_load_by_vars($vars);
}

function intel_og_artifact_load_by_vars($vars) {
  $query = db_select('intel_og_artifact', 'a')
    ->fields('a');
  foreach ($vars AS $key => $value) {
    $query->condition($key, $value);
  }
  $artifact = $query->execute()->fetchObject();
  return $artifact;
}

/**
 * Implements hook_intel_page_intel_pushes
 *
 */
function intel_og_intel_page_intel_pushes() {
  $og_context = og_context();

  if (empty($og_context['gid'])) {
    return;
  }

  $l10i_var_action = array(
    'method' => '_setIntelVar',
    'scope' => 'page',
    'namespace' => 'analytics',
    'keys' => 'og',
    'value' => $og_context['gid'],
  );
  intel_add_page_intel_push($l10i_var_action);
  drupal_add_js(drupal_get_path('module', 'intel_og') . '/intel_og.page.js');
  $time = REQUEST_TIME;
  $params = session_get_cookie_params();
  setcookie('l10i_og', $og_context['gid'], 0, $params['path'], $params['domain'], $params['secure'], $params['httponly']);
}

function intel_og_intel_l10iq_pushes_alter(&$l10iq_pushes) {
  $entity_type = variable_get('intel_og_default_group_type', 'node');
  $og_context = og_context($entity_type);

  if (empty($og_context['gid'])) {
    return;
  }

  // TODO this is hard coded, need to change
  $entity = entity_load($og_context['group_type'], array($og_context['gid']));
  $entity = $entity[$og_context['gid']];

  if (isset($entity->field_ga_code)) {
    $wrapper = entity_metadata_wrapper('dwyr_franchise', $entity);
    $ga_code = $wrapper->field_ga_code->value();

    if (!empty($ga_code)) {
      // insert the second tracking code after the first so that the main tracking
      // code remains the default
      foreach ($l10iq_pushes AS $i => $push) {
        if ($push[0] == '_setAccount') {
          array_splice($l10iq_pushes, $i+1, 0, array(array('_setAccount', $ga_code, 'l10i_og')));
          return;
        }
      }
    }
  }
}

/*
function intel_og_intel_page_settings_js_alter(&$js, &$page) {

}
*/

function intel_og_artifact_save($artifact_type, $aid, $group_type, $gid) {
  $key = array(
    'artifact_type' => $artifact_type,
    'aid' => $aid,
    'group_type' => $group_type,
    'gid' => $gid,
  );
  $query = db_merge('intel_og_artifact')
    ->key($key);
  $query->execute();
}

/**
 * Implements hook_form_alter().
 */
function intel_og_form_alter(&$form, &$form_state, $form_id) {
  // Webform is being presented to visitor.
  if (isset($form['#node']->webform) && in_array('webform_client_form_submit', $form['#submit'])) {
    $values = array(
      'id' => 'user',
    );
    $entity = entity_get_controller('intel_visitor')->create($values);

    // check if og_group_ref field exists and has no default_value
    if (isset($form['submitted']['og_group_ref']) && empty($form['submitted']['og_group_ref']['#default_value'])) {
      $og_context = og_context();
      if (!empty($og_context['gid'])) {
        $form['submitted']['og_group_ref']['#default_value'] = $og_context['gid'];
      }
    }
  }
}

function intel_og_intel_form_submission_data(&$visitor, &$submission, &$track, $context) {
//$args = func_get_args();
//dsm($args);
  $gid = null;
  if (isset($context['submit_context']['og'])) {
    $gid = $context['submit_context']['og'];
  }
  else {
    if ($submission->type == 'webform') {
      $wf_node = node_load($submission->fid);
      if (isset($wf_node->webform['components'])) {

      }
      foreach ($wf_node->webform['components'] AS $id => $comp) {
        if ($comp['form_key'] == 'og_group_ref') {
          $wf_submission = webform_get_submission($submission->fid, $submission->fsid);
          if (isset($wf_submission->data[$id]))
            $gid = $wf_submission->data[$id]['value'][0];
        }
      }
    }
  }

  if ($gid) {
    // if og is set on submit context, add it to the submission object. Data will
    // be saved after submission and sid is created
    $submission->og_gid = $gid;
    $visitor->og_gid = $gid;

    // check if intel_visitor has an og_group_ref field
    if (!isset($visitor->og_group_ref)) {
      return;
    }
    return;
    // create entity wrapper to make it easer to work with field data
    $wrapper = entity_metadata_wrapper('intel_visitor', $visitor);

    // load new reference by GID
    $group_type = variable_get('intel_og_default_group_type', 'node');
    $new_ref = entity_load($group_type, array($gid));
    $new_ref = $new_ref[$gid];

    $refs = $wrapper->og_group_ref->value();
    if (!$refs) {
      $refs = array();
    }
    $refs[] = $new_ref;
    $wrapper->og_group_ref->set($refs);
    //$wrapper->save();
  }
}

function intel_og_intel_visitor_insert($visitor) {
  intel_og_intel_visitor_save($visitor);
}

function intel_og_intel_visitor_update($visitor) {
  intel_og_intel_visitor_save($visitor);
}

function intel_og_intel_visitor_save($visitor) {
//dsm($visitor);
  if (!empty($visitor->og_gid)) {
    $group_type = variable_get('intel_og_default_group_type', 'node');
    intel_og_artifact_save('visitor', $visitor->vid, $group_type, $visitor->og_gid);
  }
}

function intel_og_intel_submission_insert($submission) {
//dsm($submission);
  if (!empty($submission->og_gid)) {
    $group_type = variable_get('intel_og_default_group_type', 'node');
    intel_og_artifact_save('submission', $submission->sid, $group_type, $submission->og_gid);
  }

}

function intel_og_query_alter($query) {
  // alter intel visitor queries
  if (
    !$query->hasTag('intel_admin_people_contacts')
    && !$query->hasTag('intel_admin_people_visitors')
    && !$query->hasTag('intel_submission_load_filtered')
  ) {
    return;
  }

  $menu_item = menu_get_item();

  $callbacks = array(
    'intel_og_admin_people_contacts',
    'intel_og_admin_people_visitors',
    'intel_og_admin_people_submissions'
  );

  // if menu page callback is not one we want to filter or page arguments don't match
  // exit
  if (
    !in_array($menu_item['page_callback'], $callbacks)
    || empty($menu_item['page_arguments'])
    || !is_array($menu_item['page_arguments'])
    || (count($menu_item['page_arguments']) < 2)
  ) {
    return;
  }

  $group_type = $menu_item['page_arguments'][0];
  $gid = $menu_item['page_arguments'][1];

  // check if in group admin context
  if (
    $query->hasTag('intel_admin_people_contacts')
    || $query->hasTag('intel_admin_people_visitors')
  ) {
    // need to filter by og ownership by using inner join
    $join_on = '%alias.etid = intel_visitor.vid
        AND %alias.entity_type = :og_entity_type
        AND %alias.gid = :gid';
    $join_vars = array(
      ':og_entity_type' => 'intel_visitor',
      ':gid' => $gid,
    );
    $i = $query->innerJoin('og_membership', 'm', $join_on, $join_vars);
//print_r($query);
//dsm(" " . $query);
  }
  else if (
    $query->hasTag('intel_submission_load_filtered')
    && ($menu_item['page_callback'] == 'intel_og_admin_people_submissions')
  ) {
    $join_on =  "%alias.artifact_type = 'submission'
        AND %alias.aid = s.sid
        AND %alias.gid = :gid";
    $join_vars = array(
      ':gid' => $gid,
    );
    $i = $query->innerJoin('intel_og_artifact', 'a', $join_on, $join_vars);

    //$query->condition("$i.gid", $gid);
//dsm($query);
//dsm(" " . $query);
  }
}

