<?php
/**
 * @file
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function enterprise_editor_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "strongarm" && $api == "strongarm") {
    return array("version" => "1");
  }
}
/**
 * Implements hook_ckeditor_settings_alter().
 */
function enterprise_editor_ckeditor_settings_alter(&$settings) {
  static $base_path;
  static $module_path;
  static $query;
  static $plugins;
  if (!isset($base_path)) {
    $base_path = base_path();
  }
  if (!isset($plugins)) {
    $plugins = enterprise_editor_available_plugins();
  }
  if (!isset($module_path)) {
    $module_path = drupal_get_path('module', 'enterprise_editor');
    $library_path = libraries_get_path('enterprise_editor');
    $query = variable_get('css_js_query_string', base_convert(REQUEST_TIME, 10, 36));

    $icons = enterprise_editor_get_icons();


    $js_settings = array(
      'enterprise_editor' => array(
        'path' => $base_path . $library_path,
        'query' => $query,
        'module_path' => $base_path . $module_path,
        'plugins' => $plugins,
        'icons' => $icons,
      ),
    );
    drupal_add_js($js_settings, 'setting');
    $theme_path = drupal_get_path('theme', variable_get('theme_default', 'bartik'));
    foreach (file_scan_directory($theme_path, '/ckeditor.admin.js$/i') as $file) {
      drupal_add_js($file->uri);
    }
  }

  // Load Enterprise Style icon CSS and Enterprise Bootstrap CSS
  $settings['contentsCss'][] = $base_path.drupal_get_path('module', 'enterprise_style').'/icons/css/enterprise_base-embedded.css?'.$query;
  $settings['contentsCss'][] = $base_path.drupal_get_path('theme', 'enterprise_bootstrap').'/css/style.css?'.$query;

  // filter out unavailable plugins
  foreach ($plugins AS $name => $flag) {
    if (!$flag && isset($settings['loadPlugins'][$name])) {
      unset($settings['loadPlugins'][$name]);
    }
  }

  // Change the ckeditor config path.
  $settings['customConfig'] = $base_path . $module_path . '/ckeditor/config.js?' . $query;
  // Add additional styling for Bootstrap based themes.
  $settings['contentsCss'][] = $base_path . $module_path . '/ckeditor/ckeditor.css?' . $query;

  if (!empty($settings['stylesCombo_stylesSet'])) {
    unset($settings['stylesCombo_stylesSet']);
  }
}

function enterprise_editor_get_icons() {
  $icons = array();

  $bundle_info = icon_bundles();
  if (!empty($bundle_info) && is_array($bundle_info)) {
    foreach ($bundle_info AS $name => $v) {
      $ib =  icon_bundle_load($name);
      if (!empty($ib['icons']) && is_array($ib['icons'])) {
        foreach ($ib['icons'] AS $key => $value) {
          $icons[] = array($key, $value);
        }
      }
    }
  }
  return $icons;
}

// Organize media uploads under files/media directory
// TODO: need to add support for mediaBrowser popup used in editor
/**
 * Implements hook_form_FORM_ID_alter().
 */
function enterprise_editor_form_media_add_upload_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'enterprise_editor_add_upload_validate';
}

/**
 * Validate file_directory parameter on the media upload form.
 */
function enterprise_editor_add_upload_validate($form, &$form_state) {
  $params = &$form_state['build_info']['args'][0];
  $file = !empty($form_state['values']['upload']) ? $form_state['values']['upload'] : NULL;
  // If the upload directory has not already been set and we can determine the
  // file type, then use the configured default directory for that type.
  if (empty($params['file_directory'])) {
    $params['file_directory'] = 'media/' . ((!empty($file->type)) ? $file->type : 'other' );
  }
}

/**
 * Returns list of available plugins
 * @return array
 */
function enterprise_editor_available_plugins() {
  $plugins = &drupal_static(__FUNCTION__);
  if (isset($plugins)) {
    return $plugins;
  }
  $plugin_path = libraries_get_path('enterprise_editor');
  $plugins = array(
    'carousel' => 0,
    'featurette' => 0,
    'jumbotron' => 0,
    'trifold' => 0,
    'icon' => 0,
    'templates' => 0,
  );
  foreach ($plugins AS $name => $value) {
    if (file_exists($plugin_path . '/plugins/' . $name . '/plugin.js')) {
      $plugins[$name] = 1;
    }
  }

  if (file_exists($plugin_path . '/templates/templates.js')) {
    $plugins['templates'] = 1;
  }
  return $plugins;
}

/**
 * Implements hook_ckeditor_plugin()
 *
 * @return type
 */
function enterprise_editor_ckeditor_plugin() {
  $plugins = array();
  //$plugin_path = drupal_get_path('module', 'ckeditor_bootstrap');

  $plugin_path = libraries_get_path('enterprise_editor');
  $plugins['trifold'] = array(
    'name' => 'trifold',
    'desc' => t('Bootstrap Trifold Plugin'),
    'path' => $plugin_path . '/plugins/trifold/',
    'buttons' => array(
      'Trifold' => array('label' => 'Trifold', 'icon' => 'icons/trifold.png'),
    )
  );
  $plugins['featurette'] = array(
    'name' => 'featurette',
    'desc' => t('Bootstrap Featurette Plugin'),
    'path' => $plugin_path . '/plugins/featurette/',
    'buttons' => array(
      'Featurette' => array('label' => 'Featurette', 'icon' => 'icons/featurette.png'),
    )
  );
  $plugins['carousel'] = array(
    'name' => 'carousel',
    'desc' => t('Bootstrap Carousel Plugin'),
    'path' => $plugin_path . '/plugins/carousel/',
    'buttons' => array(
      'Carousel' => array('label' => 'Carousel', 'icon' => 'icons/carousel.png'),
    )
  );
  $plugins['jumbotron'] = array(
    'name' => 'jumbotron',
    'desc' => t('Bootstrap Jumbotron Plugin'),
    'path' => $plugin_path . '/plugins/jumbotron/',
    'buttons' => array(
      'Jumbotron' => array('label' => 'Jumbotron', 'icon' => 'icons/jumbotron.png'),
    )
  );
  $plugins['icon'] = array(
    'name' => 'icon',
    'desc' => t('Plugin for icons'),
    'path' => $plugin_path . '/plugins/icon/',
    'buttons' => array(
      'icon' => array('label' => 'Icon', 'icon' => 'icons/icon.png'),
    )
  );

  $available_plugins = enterprise_editor_available_plugins();
  foreach ($plugins AS $name => $val) {
    if (empty($available_plugins[$name])) {
      unset($plugins[$name]);
    }
  }

  return $plugins;
}

function enterprise_editor_preprocess_html(&$variables) {
  if (path_is_admin(current_path())) {
    // reference your current admin theme  
    drupal_add_css(drupal_get_path('module', 'enterprise_editor') . '/enterprise_editor.css', array('weight' => CSS_THEME));
  }
}

/*
function enterprise_editor_ckeditor_profile_alter(&$data) {
  dsm($data);
}

//function ckeditor_profile_features_revert($component) {
//  dsm($component);
//}

function enterprise_editor_pre_features_revert($component) {
  dsm($component);
}
*/

/*
function enterprise_editor_ckeditor_default_settings_alter(&$settings) {
  dsm($settings);
  //$settings['show_toggle'] = 'f';
}
*/


