<?php
/**
 * @file
 * Code for the Enterprise Editor feature.
 */

include_once 'enterprise_editor.features.inc';

/**
 * Implements hook_permission().
 */
function enterprise_editor_permission() {
  return array(
    'administer enterprise_editor settings' => array(
      'title' => t('Administer Enterprise Editor module'),
      'description' => t('Perform administration tasks for the Enterprise Editor module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function enterprise_editor_menu() {
  $items = array();

  $items['admin/config/content/enterprise_editor'] = array(
    'title' => 'Enterprise Editor',
    'description' => 'Administrative interface for the Enterprise Editor module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('enterprise_editor_admin'),
    'access arguments' => array('administer enterprise_editor settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback/form for admin interface.
 */
function enterprise_editor_admin() {
  $form = array();

  $form['enterprise_editor_ckeditor_css'] = array(
    '#type' => 'fieldset',
    '#title' => t('CKEditor CSS'),
    '#description' => t("Various CSS files that are added to CKEditor via this module."),
    '#collapsible' => FALSE,
    '#collapsed' => TRUE,
  );

  $form['enterprise_editor_ckeditor_css']['enterprise_editor_icon_css'] = array(
    '#type' => 'checkbox',
    '#title' => t('Icon API CSS'),
    '#default_value' => variable_get('enterprise_editor_icon_css', 1),
    '#description' => t("Icon API embedded icon styles into CKEditor."),
    '#required' => FALSE,
  );

  $form['enterprise_editor_ckeditor_css']['enterprise_editor_bootstrap_css'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enterprise Bootstrap CSS'),
    '#default_value' => variable_get('enterprise_editor_bootstrap_css', 1),
    '#description' => t("Enterprise Bootstrap CSS. Can conflict with themes using the LESS module, disable if it's an issue."),
    '#required' => FALSE,
  );

  $form['enterprise_editor_ckeditor_css']['enterprise_editor_ckeditor_css'] = array(
    '#type' => 'checkbox',
    '#title' => t('CKEditor CSS'),
    '#default_value' => variable_get('enterprise_editor_ckeditor_css', 1),
    '#description' => t("Added styling for Bootstrap based themes in CKEditor."),
    '#required' => FALSE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_ckeditor_settings_alter().
 */
function enterprise_editor_ckeditor_settings_alter(&$settings) {
  static $base_path;
  static $module_path;
  static $query;
  static $plugins;
  $icon_bundles = enterprise_editor_get_icons();
  if (!isset($base_path)) {
    $base_path = base_path();
  }
  if (!isset($plugins)) {
    $plugins = enterprise_editor_available_plugins();
  }
  if (!isset($module_path)) {
    $module_path = drupal_get_path('module', 'enterprise_editor');
    $library_path = libraries_get_path('enterprise_editor');
    $query = variable_get('css_js_query_string', base_convert(REQUEST_TIME, 10, 36));

    // Get Icon information.
    $icons = $icon_bundles['icons'];

    $js_settings = array(
      'enterprise_editor' => array(
        'path' => $base_path . $library_path,
        'query' => $query,
        'module_path' => $base_path . $module_path,
        'plugins' => $plugins,
        'icons' => $icons,
      ),
    );
    drupal_add_js($js_settings, 'setting');
    $theme_path = drupal_get_path('theme', variable_get('theme_default', 'bartik'));
    foreach (file_scan_directory($theme_path, '/ckeditor.admin.js$/i') as $file) {
      drupal_add_js($file->uri);
    }
  }

  // Add Icon API embedded icon styles into CKEditor.
  if (variable_get('enterprise_editor_icon_css', 1)) {
    foreach ($icon_bundles['bundles'] as $bundle) {
      if (!empty($bundle['method'])) {
        $settings['contentsCss'][] = $base_path.$bundle['path'].'/css/'.$bundle['file'].'.css?'.$query;
      }
    }
  }

  // Load Enterprise Bootstrap CSS
  if (variable_get('enterprise_editor_bootstrap_css', 1)) {
    $settings['contentsCss'][] = $base_path.drupal_get_path('theme', 'enterprise_bootstrap').'/css/style.css?'.$query;
  }

  // Load theme related .less file.
  $theme_default = variable_get('theme_default', NULL);
  $theme_info = system_get_info('theme', $theme_default);

  if (!empty($theme_info['stylesheets'])) {
    foreach ($theme_info['stylesheets'] as $media) {
      if (!empty($media)) {
        foreach ($media as $sheet) {
          $settings['contentsCss'][] = $base_path.$sheet;
        }
      }
    }
  }

  // Filter out unavailable plugins
  foreach ($plugins AS $name => $flag) {
    if (!$flag && isset($settings['loadPlugins'][$name])) {
      unset($settings['loadPlugins'][$name]);
    }
  }

  // Change the ckeditor config path.
  $settings['customConfig'] = $base_path . $module_path . '/ckeditor/config.js?' . $query;
  // Add additional styling for Bootstrap based themes.
  if (variable_get('enterprise_editor_ckeditor_css', 1)) {
    $settings['contentsCss'][] = $base_path . $module_path . '/ckeditor/ckeditor.css?' . $query;
  }

  // Clean up CSS imports
  array_unique($settings['contentsCss']);

  if (!empty($settings['stylesCombo_stylesSet'])) {
    unset($settings['stylesCombo_stylesSet']);
  }
}

function enterprise_editor_get_icons() {
  $icons = array();
  $bundle_info = icon_bundles();

  if (!empty($bundle_info) && is_array($bundle_info)) {
    // Cycle through available font icons.
    foreach ($bundle_info as $bundle) {
      $name = $bundle['name'];
      $ib =  icon_bundles($name);

      // Only add icons that have settings.
      if (empty($ib['settings'])) {
        continue;
      }

      // Get Icon path.
      // Helps differentiate between icons uploaded or supplied by a module.
      $wrapper = file_stream_wrapper_get_instance_by_uri($ib['path']);
      if ($wrapper instanceof DrupalLocalStreamWrapper) {
        $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($ib['path']);
      } else {
        $path = $ib['path'];
      }

      // Build path
      switch ($ib['settings']['method']) {
        case 'default':
          $file_name = $ib['settings']['filename_prefix'];
          break;
        
        default:
          $file_name = $ib['settings']['filename_prefix'] . '-' . $ib['settings']['method'];
          break;
      }

      // Get bundle information
      $icons['bundles'][$name] = array(
        'name' => $ib['name'],
        'path' =>  $path,
        'prefix' => $ib['settings']['filename_prefix'],
        'method' => $ib['settings']['method'],
        'file' => $file_name,
      );

      if (!empty($ib['icons']) && is_array($ib['icons'])) {
        foreach ($ib['icons'] AS $key => $value) {
          $icons['icons'][] = array($key, $value);
        }
      }
    }
  }
  return $icons;
}

// Organize media uploads under files/media directory
// TODO: need to add support for mediaBrowser popup used in editor
/**
 * Implements hook_form_FORM_ID_alter().
 */
function enterprise_editor_form_media_add_upload_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'enterprise_editor_add_upload_validate';
}

/**
 * Validate file_directory parameter on the media upload form.
 */
function enterprise_editor_add_upload_validate($form, &$form_state) {
  $params = &$form_state['build_info']['args'][0];
  $file = !empty($form_state['values']['upload']) ? $form_state['values']['upload'] : NULL;
  // If the upload directory has not already been set and we can determine the
  // file type, then use the configured default directory for that type.
  if (empty($params['file_directory'])) {
    $params['file_directory'] = 'media/' . ((!empty($file->type)) ? $file->type : 'other' );
  }
}

/**
 * Returns list of available plugins
 * @return array
 */
function enterprise_editor_available_plugins() {
  $plugins = &drupal_static(__FUNCTION__);
  if (isset($plugins)) {
    return $plugins;
  }
  $plugin_path = libraries_get_path('enterprise_editor');
  $plugins = array(
    'carousel' => 0,
    'featurette' => 0,
    'jumbotron' => 0,
    'trifold' => 0,
    'icon' => 0,
    'templates' => 0,
  );
  foreach ($plugins AS $name => $value) {
    if (file_exists($plugin_path . '/plugins/' . $name . '/plugin.js')) {
      $plugins[$name] = 1;
    }
  }

  if (file_exists($plugin_path . '/templates/templates.js')) {
    $plugins['templates'] = 1;
  }
  return $plugins;
}

/**
 * Implements hook_ckeditor_plugin()
 *
 * @return type
 */
function enterprise_editor_ckeditor_plugin() {
  $plugins = array();
  //$plugin_path = drupal_get_path('module', 'ckeditor_bootstrap');

  $plugin_path = libraries_get_path('enterprise_editor');
  $plugins['trifold'] = array(
    'name' => 'trifold',
    'desc' => t('Bootstrap Trifold Plugin'),
    'path' => $plugin_path . '/plugins/trifold/',
    'buttons' => array(
      'Trifold' => array('label' => 'Trifold', 'icon' => 'icons/trifold.png'),
    )
  );
  $plugins['featurette'] = array(
    'name' => 'featurette',
    'desc' => t('Bootstrap Featurette Plugin'),
    'path' => $plugin_path . '/plugins/featurette/',
    'buttons' => array(
      'Featurette' => array('label' => 'Featurette', 'icon' => 'icons/featurette.png'),
    )
  );
  $plugins['carousel'] = array(
    'name' => 'carousel',
    'desc' => t('Bootstrap Carousel Plugin'),
    'path' => $plugin_path . '/plugins/carousel/',
    'buttons' => array(
      'Carousel' => array('label' => 'Carousel', 'icon' => 'icons/carousel.png'),
    )
  );
  $plugins['jumbotron'] = array(
    'name' => 'jumbotron',
    'desc' => t('Bootstrap Jumbotron Plugin'),
    'path' => $plugin_path . '/plugins/jumbotron/',
    'buttons' => array(
      'Jumbotron' => array('label' => 'Jumbotron', 'icon' => 'icons/jumbotron.png'),
    )
  );
  $plugins['icon'] = array(
    'name' => 'icon',
    'desc' => t('Plugin for icons'),
    'path' => $plugin_path . '/plugins/icon/',
    'buttons' => array(
      'icon' => array('label' => 'Icon', 'icon' => 'icons/icon.png'),
    )
  );

  $available_plugins = enterprise_editor_available_plugins();
  foreach ($plugins AS $name => $val) {
    if (empty($available_plugins[$name])) {
      unset($plugins[$name]);
    }
  }

  return $plugins;
}

function enterprise_editor_preprocess_html(&$variables) {
  if (path_is_admin(current_path())) {
    // reference your current admin theme  
    drupal_add_css(drupal_get_path('module', 'enterprise_editor') . '/enterprise_editor.css', array('weight' => CSS_THEME));
  }

  // Load font icons on all pages (admin included).
  $icon_bundles = icon_bundles();
  foreach ($icon_bundles as $bundle) {
    // Only enable the ones that are available.
    if ($bundle['status']) {
      icon_process_attached($bundle);
    }
  }
}

/*
function enterprise_editor_ckeditor_profile_alter(&$data) {
  dsm($data);
}

//function ckeditor_profile_features_revert($component) {
//  dsm($component);
//}

function enterprise_editor_pre_features_revert($component) {
  dsm($component);
}
*/

/*
function enterprise_editor_ckeditor_default_settings_alter(&$settings) {
  dsm($settings);
  //$settings['show_toggle'] = 'f';
}
*/


