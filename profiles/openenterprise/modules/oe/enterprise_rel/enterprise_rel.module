<?php
/**
 * @file
 */

include_once ('enterprise_rel.ds_api.inc');
//include_once 'enterprise_rel.tokens.inc';

function enterprise_rel_ajax_callback($js, $terms = '', $content = '') {
  // If the nojs didn't get changed to ajax, the user has no javascript.
  // Send them to the regular node page instead.
  if ($js == 'nojs') {
    drupal_goto('node/' . $node->nid);
  }

  // Get the render array for the node.
  $build = node_view($node);

  // Render the node into html.
  $html = render($build);

  // Prepare an ajax command to insert the node html into our ajax wrapper.
  $commands = array();
  $commands[] = ajax_command_html('#mymodule-ajax-wrapper', $html);

  // Render the commands into JSON and print them.
  print ajax_render($commands);
  exit;  // Exit so Drupal doesn't have a chance to build a whole page.
}

function enterprise_rel_entity_context($path = '') {
  $returns = &drupal_static(__FUNCTION__, array());
  if (isset($returns[$path])) {
    return $returns[$path];
  }
  $returns[$path] = '';

  $rv_meta = enterprise_rel_get_rel_view_meta($path);
  if (!empty($rv_meta['context_entity_type']) && !empty($rv_meta['context_bundle'])) {
    $returns[$path] = $rv_meta['context_entity_type'] . ':' . $rv_meta['context_bundle'];
  }

  return $returns[$path];
}

/**
 * Implements hook_views_api().
 * Notifies the Views module that we're compatible with a particular API revision.
 */
function enterprise_rel_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'enterprise_rel') . '/views',
  );
}

function enterprise_rel_get_rel_view($path = '') {
  $returns = &drupal_static(__FUNCTION__, array());

  $static_key = $path;
  if (!empty($path) && is_array($path)) {
    if (!empty($path['view_name']) && $path['view_name']) {
      $static_key = "{$path['view_name']}:{$path['display_name']}";
    }
    else if (!empty($path['entity_type'])) {
      $static_key = "{$path['entity_type']}:{$path['bundle']}";
    }
  }

  if (isset($returns[$static_key])) {
    return $returns[$static_key];
  }

  $ret = array(
    'view' => '',
    'display_name' => '',
  );

  if (!empty($path) && is_array($path)) {
    if (!empty($path['entity_type'])) {
      $settings = variable_get('enterprise_rel_entity_settings_' . $path['entity_type'] . '__' . $path['bundle'], array());
      if (empty($settings['view_display'])) {
        $returns[$static_key] = $ret;
        return $ret;
      }
      $a = explode(':', $settings['view_display']);
      $path['view_name'] = $a[0];
      $path['display_name'] = $a[1];
    }
    if (!empty($path['view_name'])) {
      $ret = $path;
      $ret['view'] = views_get_view($path['view_name']);
      $returns[$static_key] = $ret;
      return $ret;
    }

  }

  if (!empty($path)) {
    $router_item = menu_get_item($path);
  }
  else {
    $router_item = menu_get_item();
  }

  // determine rel view and display
  // first check if current url is a view
  if(isset($router_item['page_callback']) &&  ($router_item['page_callback'] == 'views_page')) {
    $ret['view'] = views_get_view($router_item['page_arguments'][0]);
    $ret['display_name'] = $router_item['page_arguments'][1];
    $returns[$static_key] = $ret;
    return $ret;
  }

  if (
    isset($router_item['page_callback'])
    && ($router_item['page_callback'] == 'node_page_view')
    && !empty($router_item['page_arguments'][0]->type)
  ) {
    $settings = variable_get('enterprise_rel_entity_settings_' . 'node' . '__' . $router_item['page_arguments'][0]->type, array());
    if (!empty($settings['view_display'])) {
      $a = explode(':', $settings['view_display']);
      $ret['view'] = views_get_view($a[0]);
      $ret['display_name'] = $a[1];
      $ret['context_entity_type'] = $router_item['page_arguments'][0]->entity_type;
      $ret['context_bundle'] = $router_item['page_arguments'][0]->type;
      $returns[$static_key] = $ret;
      return $ret;
    }
  }

  return FALSE;
}

function enterprise_rel_get_rel_view_meta($path = '') {

  $static_key = $path;
  if (!empty($path) && is_array($path)) {
    if (!empty($path['view_name'])) {
      $static_key = "{$path['view_name']}:{$path['display_name']}";
    }
    else if (!empty($path['entity_type'])) {
      $static_key = "{$path['entity_type']}:{$path['bundle']}";
    }
  }
  $infos = &drupal_static(__FUNCTION__, array());
  if (isset($infos[$static_key])) {
    return $infos[$static_key];
  }

  $info = enterprise_rel_get_rel_view($path);

  if (empty($info) || empty($info['view'])) {
    $infos[$static_key] = FALSE;
    return $infos[$static_key];
  }

  //$info['view']->build($info['display_name']);
  $view = $info['view'];
  $display_name = $info['display_name'];

  $info['display'] = $display = $view->display[$display_name];
  //dsm($info['display']);

  $info['path'] = !empty($display->display_options['path']) ? $display->display_options['path'] : '';
  $info['view_relationships'] = !empty($view->display['default']->display_options['relationships']) ? $view->display['default']->display_options['relationships'] : array();
  if (!empty($display->display_options['relationships'])) {
    $info['view_relationships'] = $display->display_options['relationships'];
  }
  $info['view_filters'] = !empty($view->display['default']->display_options['filters']) ? $view->display['default']->display_options['filters'] : array();
  if (!empty($display->display_options['filters'])) {
    $info['view_filters'] = $display->display_options['filters'];
  }
  $info['view_arguments'] = !empty($view->display['default']->display_options['arguments']) ? $view->display['default']->display_options['arguments'] : array();
  if (!empty($display->display_options['arguments'])) {
    $info['view_arguments'] = $display->display_options['arguments'];
  }
  //dsm($view);

  $info['settings'] = array();
  if (isset($info['view_filters']['type'])) {
    $info['entity_filter'] = array(
      'type' => $info['view_filters']['type']['table'],
    );
    if (!isset($info['context_entity_type'])) {
      $info['context_entity_type'] = $info['entity_filter']['type'];
    }
    if (!isset($info['view_filters']['type']['operator']) || ($info['view_filters']['type']['operator'] == 'in')) {
      reset($info['view_filters']['type']['value']);
      $info['entity_filter']['bundle'] = key($info['view_filters']['type']['value']);
      if (!isset($info['context_bundle'])) {
        $info['context_bundle'] = $info['entity_filter']['bundle'];
      }
      $info['settings'] = variable_get('enterprise_rel_entity_settings_' . $info['entity_filter']['type'] . '__' . $info['entity_filter']['bundle'], array());
    }

  }

  $info['_filtargs'] = array();
  $info['taxonomy_term_filtargs'] = array();
  $info['field_filtargs'] = array();

  $arg_index = 0;
  $its = array(
    'argument',
    'filter',
  );
  foreach ($its as $filtarg) {
    foreach ($info['view_' . $filtarg . 's'] as $key => $v) {
      $item = array(
        'id' => $v['id'],
        $filtarg => $v,
      );
      if ($filtarg == 'filter') {
        $filtarg_key = $item['filt_index'] = !empty($v['expose']['identifier']) ? $v['expose']['identifier'] : $v['field'];
        $item['exposed'] = isset($v['exposed']) ? $v['exposed'] : FALSE;
      }
      else {
        $filtarg_key = $item['arg_index'] = $arg_index;
        $arg_index++;
      }

      if (substr($v['table'], 0, 11) == 'field_data_') {
        $name = substr($v['table'], 11);
        $fi = field_info_field($name);
        $item['entity_type'] = 'field';
        $item['bundle'] = $name;
        $item['field_info'] = $fi;
        $item['field_name'] = $name;
        //dsm($name);
        //dsm($fi);
        // check if taxonomy field type
        if (!empty($v['vocabulary'])) {
          $item['entity_type'] = 'taxonomy_term';
          $item['bundle'] = $v['vocabulary'];
          $item['vocabulary'] = taxonomy_vocabulary_machine_name_load($item['bundle']);
          $info['taxonomy_term_filtargs'][$v['vocabulary']] = $item;
        }
        else if ($fi['type'] == 'entityreference') {
          $item['entity_type'] = $fi['settings']['target_type'];
          $bundles = $fi['settings']['handler_settings']['target_bundles'];
          foreach ($bundles as $bundle) {
            $item['bundle'] = $bundle;
            $info[$item['entity_type'] . '_filtargs'][$item['bundle']] = $item;
          }
          $item['bundles'] = $bundles;
        }
        $info['field_filtargs'][$name] = $item;
        $info['_filtargs'][$filtarg_key] = &$info['field_filtargs'][$name];
      }
      else if (!empty($v['relationship']) && substr($v['relationship'], -10) == '_target_id') {
        $rel = $info['view_relationships'][$v['relationship']];
        //dsm($rel);
        if (substr($rel['field'], -10) == '_target_id') {
          $name = substr($rel['table'], 11);
          $fi = field_info_field($name);
          //dsm($name);
          //dsm($fi);
          if ($fi['type'] == 'entityreference') {
            $item['entity_type'] = $fi['settings']['target_type'];
            $bundles = $fi['settings']['handler_settings']['target_bundles'];
            foreach ($bundles as $bundle) {
              $item['bundle'] = $bundle;
              $info[$item['entity_type'] . '_filtargs'][$item['bundle']] = $item;
              $info['_filtargs'][$filtarg_key] = &$info[$item['entity_type'] . '_filtargs'][$item['bundle']];
            }
          }
        }
      }
      else if ($v['table'] == 'taxonomy_term_data') {
        $name = enterprise_rel_get_vocab_name_from_views_relationship($v, $info['view_relationships']);
        if ($name) {
          $item['entity_type'] = 'taxonomy_term';
          $item['bundle'] = $name;
          $item['vocabulary'] = taxonomy_vocabulary_machine_name_load($name);
          // see if we can get the field name via a relationship
          $field_meta = enterprise_rel_get_field_meta_from_views_relationship($v, $info['view_relationships']);
          // if not, try searching through the entity field instances
          if (empty($field_meta)) {
            $field_info = enterprise_rel_get_entity_field_for_vocabulary($info['context_entity_type'], $info['context_bundle'], $item['bundle']);
            if ($field_info) {
              $field_meta['field_info'] = $field_info;
              $field_meta['field_name'] = $field_info['field_name'];
            }
          }
          if (is_array($field_meta)) {
            $item += $field_meta;
          }

          $info['taxonomy_term_filtargs'][$name] = $item;
          $info['_filtargs'][$filtarg_key] = &$info['taxonomy_term_filtargs'][$name];
        }
      }
      else if ($v['table'] == 'taxonomy_term_hierarchy' && $v['field'] == 'parent') {
        $name = enterprise_rel_get_vocab_name_from_views_relationship($v, $info['view_relationships']);
        if ($name) {
          $item['entity_type'] = 'taxonomy_term';
          $item['bundle'] = $name;
          $item['vocabulary'] = taxonomy_vocabulary_machine_name_load($name);
          $item['term_parent'] = 1;
          $field_meta = enterprise_rel_get_field_meta_from_views_relationship($v, $info['view_relationships']);
          $item += $field_meta;
//dsm($item);
          $info['taxonomy_term_parent_filtargs'][$name] = $item;
          $info['_filtargs'][$filtarg_key] = &$info['taxonomy_term_parent_filtargs'][$name];
        }
      }
    }
  }

   // determine any existing params from url
  $info['current'] = array(
    'path_args' => array(),
    'path_args_validated' => array(),
    'path_query' => array(),
    'path_args_params' => array(),
    'path_query_params' => array(),
    'params' => array(),
    //'_filtargs' => array(),
  );

  $cur_path = current_path();
  // if on the rel view, get any current args/filters
  if (strpos($cur_path, $info['path']) === 0) {
    $info['view']->set_display($info['display_name']);
    $info['view']->init_handlers();

    //dsm($info['view']);
    //dsm($info['view']->filter);

    $view_path_args = explode('/', $info['path']);
    $cur_path_args = explode('/', $cur_path);

    $aq_value = '';

    foreach ($info['_filtargs'] as $i => $fa) {
      $filtarg = isset($fa['argument']) ? 'argument' : 'filter';
      if ($filtarg == 'filter' && empty($fa['exposed'])) {
        continue;
      }
      $params_key = $fa['entity_type'];
      if (!empty($fa['term_parent'])) {
        $params_key .= '_parent';
      }
      if ($filtarg == 'argument') {
        $seek_arg_i = count($view_path_args) + $fa['arg_index'];
        if (empty($cur_path_args[$seek_arg_i]) || $cur_path_args[$seek_arg_i] == $fa['argument']['exception']['value']) {
          continue;
        }
        $aq_value = $cur_path_args[$seek_arg_i];
        $info['current']['path_args'][$fa['arg_index']] = $aq_value;
        if(!$info['view']->argument[$fa['id']]->validate_argument($aq_value)) {
          continue;
        }
        $aq_value_validated = $info['view']->argument[$fa['id']]->get_value();
        $info['current']['path_args_validated'][$fa['arg_index']] = $aq_value_validated;
      }
      else {
        if (empty($fa['filter']['expose']['identifier'])) {
          continue;
        }
        $qid = $fa['filter']['expose']['identifier'];
        if (empty($_GET[$qid])) {
          continue;
        }
        $aq_value = $info['current']['path_query'][$qid] = $_GET[$qid];
        if (is_numeric($aq_value)) {
          $aq_value_validated = $aq_value;
        }
        else {
          $form = array();
          $values = validate_term_strings($form, array($aq_value));
          $aq_value_validated = array_shift($aq_value_validated);
        }
        // TODO deal with string validators
        //validate_term_strings(&$form, $values)
      }
      if (!isset($info['current_params'][$params_key][$fa['bundle']])) {
        $item = array(
          'path_value' => $aq_value,
          'entities' => array(),
        );
//dsm("aq_value: $aq_value");
//dsm($aq_value_validated);
        if ($fa['entity_type'] == 'taxonomy_term') {
          if (is_numeric($aq_value_validated)) {
            $entity = taxonomy_term_load($aq_value_validated);
          }
          else {
            $entity = taxonomy_get_term_by_name($aq_value_validated);
            $entity = array_shift($entity);
          }
          //dsm($entity);

          if (!empty($entity)) {
            $item['entities'][] = $entity;
            $item['label'] = $entity->name;
          }

        } else if ($fa['entity_type'] == 'field') {
          //dsm($fa['field_info']);
          if (isset($fa['field_info']['settings']['allowed_values'])) {
            //$item['entities'][] = $fa['field_info']['settings']['allowed_values'][$path_value];
            $item['label'] = $fa['field_info']['settings']['allowed_values'][$aq_value];
          }
          //$entity = entity_load
        } else if (!empty($fa['field_info']) && $fa['field_info']['type'] == 'entityreference') {
          $entity = entity_load($fa['field_info']['settings']['target_type'], array($aq_value));
          if (!empty($entity)) {
            $entity = array_shift($entity);
            $item['entities'][] = $entity;
            $item['label'] = $entity->title;
          }
          //dsm($entity);
          if (isset($fa['field_info']['settings']['allowed_values'])) {
            //$item['entities'][] = $fa['field_info']['settings']['allowed_values'][$path_value];
            $item['label'] = $fa['field_info']['settings']['allowed_values'][$aq_value];
          }
          //$entity = entity_load
        }
//dsm($fa);
        //dsm($item);
        $info['current']['params'][$params_key][$fa['bundle']] = $item;
        if ($filtarg == 'argument') {
          $info['current']['path_args_params'][$fa['arg_index']] = &$info['current']['params'][$params_key][$fa['bundle']];
        }
        else {
          $info['current']['path_query_params'][$fa['filt_index']] = &$info['current']['params'][$params_key][$fa['bundle']];
        }
        //$info['current']['_filtargs'][$qid] = $fa;
      }
    }
  }

  $infos[$static_key] = $info;
  return $info;
}

function enterprise_rel_get_entity_field_for_vocabulary($entity_type, $bundle, $vocabulary) {
  $fi_cache = &drupal_static(__FUNCTION__, array());
  if (empty($fi_cache[$entity_type][$bundle])) {
    $fi_cache[$entity_type][$bundle] = field_info_instances($entity_type, $bundle);
    foreach ($fi_cache[$entity_type][$bundle] as $name => $fi) {
      $fi_cache[$entity_type][$bundle][$name] = field_info_field($name);
    }
  }
  $fi = $fi_cache[$entity_type][$bundle];
  foreach ($fi_cache[$entity_type][$bundle] as $name => $fi) {
    if ($fi['type'] == 'taxonomy_term_reference') {
      if (!empty($fi['settings']['allowed_values'][0]['vocabulary']) && $fi['settings']['allowed_values'][0]['vocabulary'] == $vocabulary) {
        return $fi;
      }
    }
  }
  return FALSE;
}

function enterprise_rel_get_field_meta_from_views_relationship($options, $relationships) {
  $params = array();
  if (!empty($options['relationship'])) {
    $r = $relationships[$options['relationship']];
    if (substr($r['table'], 0, 11) == 'field_data_') {
      $params['field_name'] = substr($r['table'],11);
      $params['field_info'] = field_info_field($params['field_name']);
    }
  }
  return $params;
}

function enterprise_rel_get_vocab_name_from_views_relationship($options, $relationships) {
  $name = '';
  if (!empty($options['relationship']) && !empty($relationships[$options['relationship']])) {

    $r = $relationships[$options['relationship']];
    if (substr($r['table'], 0, 6) == 'field_') {
      $fi = field_info_field(substr($r['field'], 0, -4));
      $name = $fi['settings']['allowed_values'][0]['vocabulary'];
    }
    else if ($r['table'] == 'node') {
      if (!empty($options['validate_options']['vocabularies']) && count($options['validate_options']['vocabularies']) == 1) {
        $name = key($options['validate_options']['vocabularies']);
      }
    }
  }
  return $name;
}



function enterprise_rel_view_path($path, &$options) {
  static $term_parent_params;

  $url_elms = explode('/', $path);
  if (strpos($url_elms[0], ':') !== FALSE) {
    $a = explode(':', $url_elms[0]);
    if ($a[0] == 'entity') {
      $id = array(
        'entity_type' => $a[1],
        'bundle' => $a[2],
      );
    }
    else if ($a[0] == 'node') {
      $id = array(
        'entity_type' => $a[0],
        'bundle' => $a[1],
      );
    }
    else if ($a[0] == 'view' || $a[0] == 'views') {
      $id = array(
        'view_name' => $a[1],
        'display_name' => $a[2],
      );
    }
    if (!empty($id)) {
      array_shift($url_elms);
      $path = implode('/', $url_elms);
      $rv_meta = enterprise_rel_get_rel_view_meta($id);
      if (empty($rv_meta)) {
        return $path;
      }
    }
  }

  if (!empty($options['query']['rel_context'])) {
    $a = explode(':', $options['query']['rel_context']);
    if ($a[0] == 'entity') {
      $id = array(
        'entity_type' => $a[1],
        'bundle' => $a[2],
      );
    }
    else if ($a[0] == 'node') {
      $id = array(
        'entity_type' => $a[0],
        'bundle' => $a[1],
      );
    }
    else if ($a[0] == 'view' || $a[0] == 'views') {
      $id = array(
        'view_name' => $a[1],
        'display_name' => $a[2],
      );
    }
    unset($options['query']['rel_context']);
    if (!empty($id)) {
      $rv_meta = enterprise_rel_get_rel_view_meta($id);
      if (empty($rv_meta)) {
        return $path;
      }
    }
  }


  if (!isset($rv_meta)) {
    $rv_meta = enterprise_rel_get_rel_view_meta();
  }
  if (empty($rv_meta)) {
    return $path;
  }
  $url0 = $path;
  $query0 = $options['query'];

  //$url_elms = explode('/', $path);
  if ($url_elms[0] == 'taxonomy') {

    $tid = $url_elms[2];
    $term = '';
    $v = array(
      'path_value' => $tid,
      'entities' => array(),
    );
    $bundle = ($url_elms[1] != 'term') ? $url_elms[1] : '';
    $entity = enterprise_rel_get_entity_from_path_value($tid, 'taxonomy_term', $bundle);
    if (
      empty($entity->vocabulary_machine_name)
      || empty($rv_meta['taxonomy_term_filtargs'][$entity->vocabulary_machine_name])
    ) {
      return $path;
    }
    $params_key = 'taxonomy_term';
    $params = array();
    // check if term parent argument exists for this vocab
    if (!empty($rv_meta['taxonomy_term_parent_filtargs'][$entity->vocabulary_machine_name])) {
      // if no parent, term is at top level
      if (empty($entity->parent)) {
        $params_key .= '_parent';
        if (!isset($term_parents)) {
          $term_parent_params = array();
        }
        $term_parent_params[$entity->tid] = 1;
      }
      else if (
        !empty($entity->parent)
        && !empty($term_parent_params[$entity->parent[0]])
        && is_array(($term_parent_params[$entity->parent[0]]))
      ) {
        $params = $term_parent_params[$entity->parent[0]];
      }
    }

    $v['entities'][$entity->tid] = $entity;
    $params += array(
      $params_key => array(
        $entity->vocabulary_machine_name => $v,
      ),
    );

    if (!empty($term_parent_params[$entity->tid]) && ($term_parent_params[$entity->tid] == 1)) {
      $term_parent_params[$entity->tid] = $params;
    }
    $path = enterprise_rel_view_path_by_params($params, $options, $rv_meta);
  }
  else if ($url_elms[0] == 'field') {
    $field_name = $url_elms[1];
    $value = array(
      'path_value' => $url_elms[2],
      'entities' => array(),
    );
    if (count($url_elms) == 4) {
      $value['entities'][] = (object) array(
        $url_elms[2] => $url_elms[3]
      );
    }
    else {
      $value['entities'][] = (object) array(
        'value' => $url_elms[2]
      );
    }
    $params = array(
      'field' => array(
        $field_name => $value,
      )
    );
    $path = enterprise_rel_view_path_by_params($params, $options, $rv_meta);
  }
  else if ($url_elms[0] == 'node' && is_numeric($url_elms[1]) && !isset($url_elms[2])) {
    $nid = (int)$url_elms[1];
    $entity = node_load($nid);
    $value = array();
    $value['entity_id'] = $nid;
    $value['entity_type'] = 'node';
    $value['bundle'] = $entity->type;
    $value['entity'] = $entity;
    $value['title'] = $entity->title;

    $params = array(
      'node' => array(
        $value['bundle'] => $value,
      )
    );
    $path = enterprise_rel_view_path_by_params($params, $options, $rv_meta);
  }

  if ($path == $rv_meta['path'] && count($query0) == count($options['query'])) {
    $path = $url0;
  }

  return $path;
  //$rv_meta = enterprise_rel_get_rel_view_meta();
}

function enterprise_rel_get_entity_from_path_value($path_value, $entity_type, $bundle = '') {
  $entities = &drupal_static(__FUNCTION__, array());
  if (isset($entities[$entity_type][$path_value])) {
    return $entities[$entity_type][$path_value];
  }
  if (!isset($entities[$entity_type])) {
    $entities[$entity_type] = array();
  }

  if ($entity_type == 'taxonomy_term') {
    if (!is_numeric($path_value)) {
      //if (!empty($arg_options['transform_dash'])) {
      $tid = strtr($path_value, '-', ' ');
      //}
      if ($bundle != 'term') {
        $t = taxonomy_get_term_by_name($path_value, $bundle);
      }
      else {
        $t = taxonomy_get_term_by_name($path_value);
      }
      if (!empty($t)) {
        $entity = array_pop($t);
      }
    }
    else {
      $entity = taxonomy_term_load($path_value);
    }
    if (empty($entity)) {
      $entities[$entity_type][$path_value] = FALSE;
      return $entities[$entity_type][$path_value];
    }
    // cache term using tid and name as indexes
    $entities[$entity_type][$path_value] = $entities[$entity_type][$entity->tid] = $entities[$entity_type][$entity->name] = $entity;
  }
  return $entities[$entity_type][$path_value];
}

function enterprise_rel_view_path_by_params($params, &$options = array(), $rv_meta = FALSE) {
  //dsm($params);
  $merge_op = '';
  if (isset($params['merge_op'])) {
    $merge_op = $params['merge_op'];
  }
  if (empty($rv_meta)) {
    $rv_meta = enterprise_rel_get_rel_view_meta();
  }

  $args = array();
  $query = array();
  $include = array(
    'field' => 'field',
    'taxonomy_term' => 'taxonomy_term',
    'taxonomy_term_parent' => 'taxonomy_term',
    'node' => 'entity',
  );
  foreach ($include as $etk => $et) {
    if (!empty($params[$etk])) {
      foreach ($params[$etk] as $vocab_name => $value) {
        if (isset($rv_meta[$etk . '_filtargs'][$vocab_name])) {
          $me = $rv_meta[$etk . '_filtargs'][$vocab_name];
          if (!empty($me['argument'])) {
            $args[$me['arg_index']] = enterprise_rel_format_views_argument_string($et, $value, $rv_meta['view'], $me);
          }
          if (!empty($me['filter'])) {
            enterprise_rel_format_views_filter_query($et, $value, $rv_meta['view'], $me, $query);
          }
        }
      }
    }
  }

  $path = $rv_meta['path'];
  $merge_op = 'add';
  if ($merge_op == 'add') {
    $args += $rv_meta['current']['path_args'];
  }
  if (!empty($args)) {
    $i = 0;
    foreach ($rv_meta['view_arguments'] as $name => $va) {
      if (empty($args[$i])) {
        $args[$i] = $va['exception']['value'];
      }
      $i++;
      // if no more args, break to not append superfulous /All's
      if (count($args) <= $i) {
        break;
      }
    }
    ksort($args);
    $path .= '/' . implode('/', $args);
  }

  if ($merge_op == 'add') {
    $query += $rv_meta['current']['path_query'];
  }
  if (!empty($query)) {
    if (empty($options['query'])) {
      $options['query'] = array();
    }
    $options['query'] += $query;
  }

  return $path;
}

function enterprise_rel_get_views_filtarg_value_type($type, $value, $view, $meta_element) {
  //dsm($type);
  //dsm($value);
  //dsm($meta_element);
  $v_type = '';
  $v = isset($value['path_value']) ? $value['path_value'] : '';
  if (!isset($meta_element['argument']) && !isset($meta_element['filter'])) {
    return array(
      'value' => $v,
      'type' => $v_type,
    );
  }
  $filtarg = isset($meta_element['argument']) ? 'argument' : 'filter';

  if (!empty($value['entities'])) {
    reset($value['entities']);
    $entity = current($value['entities']);
    if ($type == 'taxonomy_term') {
      $name_validate_options_types = array('name', 'convert');
      if (
        (!empty($meta_element[$filtarg]['validate_options']['type']) && (in_array($meta_element[$filtarg]['validate_options']['type'], $name_validate_options_types)))
        || $meta_element[$filtarg]['table'] == 'taxonomy_term_data'
      ) {
        $v_type = 'name';
        $v = $entity->name;
      }
      else {
        $v = $entity->tid;
      }
    }
    else if ($type == 'field') {
      if (isset($meta_element['field_info'])) {
        $column_key = key($meta_element['field_info']['columns']);
        $v = $entity->{$column_key};
      }
      else {
        $v = $entity->value;
      }
    }
  }
  else if (!empty($value['path_value'])) {
    $v = $value['path_value'];
  }
  else {
    $v = $value;
  }
  //dsm($column_key);
//dsm($v);
  if (!$v_type) {
    $v_type = !is_numeric($v) ? 'name' : 'id';
  }

  return array(
    'value' => $v,
    'type' => $v_type,
  );
}

function enterprise_rel_format_views_argument_string($type, $value, $view, $meta_element) {
  $vh = new views_handler_argument_string($view, $meta_element['argument']);
  //dsm($vh);
  //dsm($type);
  //dsm($value);
  //dsm($arg_options);
  //$data = (object)array();
  //dsm($type);

  $v = enterprise_rel_get_views_filtarg_value_type($type, $value, $view, $meta_element);
  //dsm($v);
  if ($v['type'] == 'name') {
    if (isset($meta_element['argument']['path_case'])) {
      $v['value'] = $vh->case_transform($v['value'], $meta_element['argument']['path_case']);
      if (!empty($arg_options['transform_dash'])) {
        $v['value'] = strtr($v['value'], ' ', '-');
      }
    }
    else {
      $v['value'] = strtolower($v['value']);
      $v['value'] = strtr($v['value'], ' ', '-');
    }

  }
  //dsm($v);

  return $v['value'];
}

function enterprise_rel_format_views_filter_query($type, $value, $view, $meta_element, &$query = array()) {
  if (empty($meta_element['filter']['expose']) && $meta_element['filter']['expose']['identifier']) {
    return;
  }

  $v = enterprise_rel_get_views_filtarg_value_type($type, $value, $view, $meta_element);

  $query[$meta_element['filter']['expose']['identifier']] = $v['value'];
}

function enterprise_rel_format_dyn_argument_string($type, $value, $view, $meta_element) {

  $v = enterprise_rel_get_views_filtarg_value_type($type, $value, $view, $meta_element);

  if ($v['type'] == 'name') {
    if (isset($meta_element['argument'])) {
      $vh = new views_handler_argument_string($view, $meta_element['argument']);
      if (isset($meta_element['argument']['path_case'])) {
        $v = $vh->case_transform($v['value'], $meta_element['argument']['path_case']);
      }
      if (!empty($meta_element['argument']['transform_dash'])) {
        $v['value'] = strtr($v['value'], ' ', '-');
      }
    }
  }

  return $v['value'];
}

function enterprise_rel_l($text, $options) {

}

// TODO
function enterprise_rel_node_path($path, &$options) {
  if (!empty($options['query']['rel_context'])) {
    $a = explode(':', $options['query']['rel_context']);
    if ($a[0] == 'entity') {
      $id = array(
        'entity_type' => $a[1],
        'bundle' => $a[2],
      );
    }
    else if ($a[0] == 'node') {
      $id = array(
        'entity_type' => $a[0],
        'bundle' => $a[1],
      );
    }
    else if ($a[0] == 'view' || $a[0] == 'views') {
      $id = array(
        'view_name' => $a[1],
        'display_name' => $a[2],
      );
    }
    unset($options['query']['rel_context']);
    if (!empty($id)) {
      $rv_meta = enterprise_rel_get_rel_view_meta($id);
      if (empty($rv_meta)) {
        return $path;
      }
    }
  }


  if (!isset($rv_meta)) {
    $rv_meta = enterprise_rel_get_rel_view_meta();
  }
  if (empty($rv_meta)) {
    return $path;
  }
  //dsm($rv_meta);
}

function enterprise_rel_url_outbound_alter(&$path, &$options, &$original_path) {
  if (substr($path, 0, 9) != 'rel-view/' && (empty($options['query']['rel-view']))) {
    return;
  }
  //dsm($path);
  //dsm($options);
  //dsm($original_path);

  if (!empty($options['query']['rel-view'])) {
    unset($options['query']['rel-view']);
  }
  else {
    $path = substr($path, 9);
  }

  $original_path = $path = enterprise_rel_view_path($path, $options);
  //$path = '/' . $path;

  if (!empty($options['query']['rel-view'])) {
    unset($options['query']['rel-view']);
  }
}

function enterprise_rel_get_entity_default_arguments($node) {
  $rv_meta = enterprise_rel_get_rel_view_meta();

  $args = array();

  $wrapper = entity_metadata_wrapper('node', $node);

  $params = array();
  $terms = array();
  $term_parent = array();
  foreach ($rv_meta['_filtargs'] as $k => $fa) {
    if (empty($fa['argument'])) {
      return $args;
    }

    $v = array(
      'path_value' => '',
      'path' => '',
      'path_options' => array(),
      'title' => '',
      'entities' => array(),
    );

    if (!empty($fa['field_name'])) {
      //$wf = $wrapper->{$fa['field_name']}->value();

      $entities = $wrapper->{$fa['field_name']}->value();
      $v = array(
        'entities' => $entities
      );
      //dsm($v['entities']);

      if (!empty($entities)) {

        $params_key = $fa['entity_type'];
        if (!isset($params[$params_key])) {
          $params[$params_key] = array();
        }
        $bundle = $fa['bundle'];
        if (!isset($params[$params_key][$fa['bundle']])) {
          $params[$params_key][$bundle] = array();
        }

        if ($fa['entity_type'] == 'taxonomy_term') {
          $terms[$bundle] = enterprise_rel_get_terms_levels($entities);
          $count = 0;
          foreach ($entities as $i => $entity) {
            if (!empty($fa['term_parent'])) {
              if (empty($entity->parent)) {
                $v['title'] = $entity->name;
                $v['entities'] = array(
                  $entity,
                );
                $term_parent[$fa['bundle']] = $entity->tid;
                $params_key .= '_parent';
                break;
              }
            }
            else if (!empty($term_parent[$fa['bundle']])) {
              if (!empty($entity->parent) && in_array($term_parent[$fa['bundle']], $entity->parent)) {
                $v['title'] = $entity->name;
                $v['entities'] = array(
                  $entity,
                );
                $term_parent[$fa['bundle']] = 0;
                break;
              }
            }
            else {
              if (count($entities) >= ($count+2)) {
                $v = array(
                  'title' => $entity->name,
                  'entities' => array(
                    $entity,
                  )
                );
                $v['path_value'] = enterprise_rel_format_views_argument_string($fa['entity_type'], $v, $rv_meta['view'], $fa);
                $params[$params_key][$bundle] = $v;
                $v['path'] = enterprise_rel_view_path_by_params($params, $v['path_options']);
                $args[] = $v;
              }
              else {
                $v = array(
                  'title' => $entity->name,
                  'entities' => array(
                    $entity,
                  )
                );
                break;
              }
            }
            $count++;
          }
        }
        $v['path_value'] = enterprise_rel_format_views_argument_string($fa['entity_type'], $v, $rv_meta['view'], $fa);

        $params[$params_key][$bundle] = $v;
        $v['path'] = enterprise_rel_view_path_by_params($params, $v['path_options']);
      }
    }
    $args[] = $v;
  }

  return $args;
}

function enterprise_rel_get_terms_levels($terms, &$bottom_level = 0, $options = array()) {
  $ct = &drupal_static(__FUNCTION__, array());
  //dsm($ct);

  $to = array();
  foreach ($terms as $i => $term) {
    if (empty($term->parent)) {
      $terms[$i]->level = 0;
    }
    else {
      $to[$i] = $term;
    }
    $ct[$term->tid] = $terms[$i];
  }
  for ($j = 0; $j <= 4; $j++) {
    foreach ($to as $i => $term) {
      $tid = $term->tid;
      foreach ($term->parent as $p_tid) {
        if (!isset($ct[$p_tid])) {
          $ct[$p_tid] = taxonomy_term_load($p_tid);
          if (empty($ct[$p_tid]->parent)) {
            $ct[$p_tid]->level = 0;
          }
          else {
            $to[$p_tid] = $ct[$p_tid];
          }
          if (!empty($options['fill_parents'])) {
            $terms[$p_tid] = $ct[$p_tid];
          }
        }
        if (isset($ct[$p_tid]->level)) {
          $ct[$tid]->level = $ct[$p_tid]->level + 1;
          if (isset($terms[$i]->tid) || !empty($options['fill_parents'])) {
            $terms[$i]->level = $ct[$tid]->level;
            if ($terms[$i]->level > $bottom_level) {
              $bottom_level = $terms[$i]->level;
            }
          }
          unset($to[$tid]);
        }
      }
    }
  }
  return $terms;
}

function enterprise_rel_get_rel_view_default_arguments() {
  $rv_meta = enterprise_rel_get_rel_view_meta();
  $args = array();
  $params = array();
  foreach ($rv_meta['_filtargs'] as $k => $fa) {
    if (empty($fa['argument'])) {
      return $args;
    }
    $v = array(
      'path_value' => '',
      'path' => '',
      'path_options' => array(),
      'title' => '',
      'entities' => array(),
    );

    if (!empty($fa['field_name'])) {
      //$wf = $wrapper->{$fa['field_name']}->value();
      $v = array(
        'entities' => $wrapper->{$fa['field_name']}->value()
      );

      if (!empty($v['entities'])) {
        if (!isset($params[$fa['entity_type']])) {
          $params[$fa['entity_type']] = array();
        }
        if (!isset($params[$fa['entity_type']][$fa['bundle']])) {
          $params[$fa['entity_type']][$fa['bundle']] = array();
        }
        $v['path_value'] = enterprise_rel_format_views_argument_string($fa['entity_type'], $v, $rv_meta['view'], $fa);
        $params[$fa['entity_type']][$fa['bundle']] = $v;
        $v['path'] = enterprise_rel_view_path_by_params($params, $v['path_options']);
        if ($fa['entity_type'] == 'taxonomy_term') {
          $v['title'] = $v['entities'][0]->name;
        }
      }
    }
    $args[] = $v;
  }
  return $args;
}

/**
 * Implements hook_preprocess_page().
 * TODO: hack to get breadcrumbs working, develop a better api for this
 */
function enterprise_rel_preprocess_page(&$variables) {
  $rv_meta = enterprise_rel_get_rel_view_meta();
  if (empty($rv_meta)) {
    return;
  }

  //dsm($rv_meta);

  $trail = drupal_get_breadcrumb();
  $cur_path = current_path();
  $entity = menu_get_object();

  $base_label = $rv_meta['view']->display['default']->display_options['title'];
  if (isset($rv_meta['display']->display_options['title'])) {
    $base_label = $rv_meta['display']->display_options['title'];
  }

  if (!empty($entity->entity_type) && $entity->entity_type == 'node') {
    $args = enterprise_rel_get_entity_default_arguments($entity);
    //dsm($args);
    //dsm($trail);

    $trail = array();
    $trail[] = l(t('Home'), '');
    $trail[] = l($base_label, $rv_meta['path']);
    foreach ($args as $arg) {
      if (!empty($arg['path'])) {
        $trail[] = l($arg['title'], $arg['path']);
      }
      //dsm($trail);
    }
    //dsm($trail);
  }
  // check if on view
  else if (strpos($cur_path, $rv_meta['path']) === 0)  {
    $vp_argcnt = count(explode('/', $rv_meta['path']));
    $path = $rv_meta['path'];
    //dsm($trail);
    $tc = count($trail);
    $aa = 0;
    for ($ti = 2; $ti <= $tc; $ti++) {
      if (!empty($rv_meta['current']['path_args_params'][$ti - 2])) {
        $pa_params = $rv_meta['current']['path_args_params'][$ti - 2];

        if (
          !empty($pa_params['entities'][0]->entity_type)
          && $pa_params['entities'][0]->entity_type = 'taxonomy_term'
        ) {
          if (!empty($pa_params['entities'][0]->parent)) {
            $term_anc = array();
            $term_anc[] = taxonomy_term_load($pa_params['entities'][0]->parent[0]);
            if (!empty($term_anc[0]->parent)) {
              $term_anc[] = taxonomy_term_load($term_anc[0]->parent[0]);
            }
            if (!empty($term_anc[1]->parent)) {
              $term_anc[] = taxonomy_term_load($term_anc[1]->parent[0]);
            }
            $c = 0;
            for ($tia = count($term_anc) - 1; $tia >= 0; $tia--) {
              $patha = $path . '/' . strtr(strtolower($term_anc[$tia]->name), ' ', '-');
              $trail[$ti+$aa+$c] = l($term_anc[$tia]->name, $patha);
              $c++;
            }
            $aa += $c;
          }
        }

        $label = !empty($rv_meta['current']['path_args_params'][$ti - 2]['label']) ? $rv_meta['current']['path_args_params'][$ti - 2]['label'] : 'NA';
        $path .= '/' . (!empty($rv_meta['current']['path_args_params'][$ti - 2]['path_value']) ? $rv_meta['current']['path_args_params'][$ti - 2]['path_value'] : '-');
      }
      else {
        $label = t('All');
        $path .= '/-';
      }
      $trail[$ti+$aa] = l($label, $path);
    }
    $trail[1] = l($base_label, $rv_meta['path']);
    //dsm($trail);
  }

  drupal_set_breadcrumb($trail);
  $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => drupal_get_breadcrumb()));

/*

  $view = views_get_view('enterprise_blog_blocks');
  $view->set_display('related');
  $view->set_use_ajax(TRUE);
  //$view->set_arguments(array());

  $settings = array(
    'views' => array(
      'ajax_path' => url('views/ajax'),
      'ajaxViews' => array(
        array(
          'view_name' => $view->name,
          'view_display_id' => $view->current_display,
          'view_args' => check_plain(implode('/', $view->args)),
          'view_path' => check_plain($_GET['q']),
          'view_base_path' => $view->get_path(),
          'view_dom_id' => 1,
          //'pager_element' => $view->pager['element'],
        ),
      ),
    ),
  );
  drupal_add_js($settings, 'setting');
  views_add_js('ajax_view');

*/

}



function enterprise_rel_form_alter(&$form, &$form_state, $form_id) {
  //dsm($form_id);
  //watchdog('form_id', $form_id);

}

function enterprise_rel_form_node_form_alter(&$form, &$form_state) {
  $node = $form['#node'];
  $settings = variable_get('enterprise_rel_entity_settings_node__' . $node->type, array());
  $form['options']['universal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Universal add to relevant lists'),
    '#default_value' => !empty($node->universal) ? $node->universal : 0,
  );
  $form['options']['rel_view_hide'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide in section lists'),
    '#default_value' => !empty($node->rel_view_hide) ? $node->rel_view_hide : 0,
  );

  if (!empty($settings['inherit']['ref_field'])) {
    //dsm($form);
    //dsm($node);
    //dsm($settings);
    $ref_field_weight = !empty($form[$settings['inherit']['ref_field']]['#weight']) ? $form[$settings['inherit']['ref_field']]['#weight'] : 0;

    $form['rel_inherit'] = array(
      '#type' => 'checkbox',
      '#title' => t('Inherit relevancy settings from referenced %ref_type', array(
        '%ref_type' => $form[$settings['inherit']['ref_field']][LANGUAGE_NONE]['#title'],
      )),
      '#default_value' => !empty($node->rel_inherit) ? $node->$node->rel_inherit : 1,
      '#weight' => $ref_field_weight + 0.1,
      '#prefix' => '<div class="display_sidebar">',
      '#suffix' => '</div>',
    );
  }
}

function enterprise_rel_node_presave($node) {
  if (!empty($node->rel_inherit)) {
    $settings = variable_get('enterprise_rel_entity_settings_node__' . $node->type, array());

    $ref_field = $settings['inherit']['ref_field'];
    $lang = $node->language;
    if (empty($node->{$ref_field}[$lang][0])) {
      drupal_set_message('No relevancy settings were inherited as source reference was not set.', 'warning');
      return;
    }
    $ref_nid = $node->{$ref_field}[$lang][0]['target_id'];
    $ref_node = node_load($ref_nid);

    foreach ($settings['inherit']['fields'] as $key => $v) {
      if ($v) {
        $k = explode(':', $key);
        $node->{$k[1]}[$lang] = $ref_node->{$k[0]}[$lang];
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function enterprise_rel_form_views_ui_config_item_form_alter(&$form, &$form_state) {
  return;

  $form['options']['enterprise_rel'] = array(
    '#type' => 'fieldset',
    '#title' => t('Relevance settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );
  $options = array(
    '' => t('- Yes (default display) -'),
    'hide' => t('Hide'),
    'facet' => t('As facet'),
  );
  $form['options']['enterprise_rel']['filter_display_field'] = array(
    '#type' => 'select',
    '#title' => t('Display views exposed filter field'),
    '#default_value' => !empty($settings['view_display']) ? $settings['view_display'] : '',
    '#options' => $options,
    '#description' => t('Select a view display to act as the default relevant view for this content type.'),
  );
  $options = array(
    '' => t('No'),
    'facet' => t('Yes'),
  );
  $form['options']['enterprise_rel']['filter_display_facet'] = array(
    '#type' => 'select',
    '#title' => t('Display exposed filter as facet.'),
    '#default_value' => !empty($settings['view_display']) ? $settings['view_display'] : '',
    '#options' => $options,
    '#description' => t('Select a view display to act as the default relevant view for this content type.'),
  );
  $form['#submit'][] = 'enterprise_rel_form_views_ui_config_item_form_submit';
}

function enterprise_rel_form_views_ui_config_item_form_submit(&$form, &$form_state) {
  //$settings =
}

/**
 * Implements hook_form_alter().
 */
function enterprise_rel_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  //dsm($form);
  $rv_meta = enterprise_rel_get_rel_view_meta();
  //dsm($rv_meta);
  if (empty($rv_meta['settings']['filter'])) {
    return;
  }
  $facet_settings = $rv_meta['settings']['filter']['facets'];
  $filt_field_cnt = 0;
  $hide_field_cnt = 0;
  foreach ($rv_meta['_filtargs'] as $field_name => $fa) {
    if (empty($fa['filter'])) {
      continue;
    }
    $fs_key = $fa['entity_type'] . ':' . $fa['bundle'];
    if (!empty($facet_settings[$fs_key])) {
      $ds = $facet_settings[$fs_key]['display'];
      if ($ds == 'hide' || $ds == 'links') {
        unset($form['#info']['filter-' . $fa['id']]);
        hide($form[$field_name]);
        $hide_field_cnt++;
      }

    }
    $filt_field_cnt++;
  }

  // if all fields hidden, remove submit button
  if ($filt_field_cnt == $hide_field_cnt) {
    hide($form['submit']);
  }

}

function enterprise_rel_form_node_type_form_alter(&$form, &$form_state) {
  //dsm($form);
  $node_type = $form['#node_type'];
  drupal_add_js(drupal_get_path('module', 'enterprise_rel') . '/js/enterprise_rel.node_type_form.js');
  $form['enterprise_rel'] = array(
    '#type' => 'fieldset',
    '#title' => t('Relevance settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#tree' => TRUE,
  );
  $form_state['enterprise_rel'] = array(
    'entity_type' => 'node',
    'bundle' => $form['#node_type']->type,
  );
  $settings = variable_get('enterprise_rel_entity_settings_' . $form_state['enterprise_rel']['entity_type'] . '__' . $form_state['enterprise_rel']['bundle'], array());
//dsm($settings);
  $options = enterprise_rel_get_views_options(array('' => t('- none -')));
  $form['enterprise_rel']['view_display'] = array(
    '#type' => 'select',
    '#title' => t('Relevant view'),
    '#default_value' => !empty($settings['view_display']) ? $settings['view_display'] : '',
    '#options' => $options,
    '#description' => t('Select a view display to act as the default relevant view for this content type.'),
  );

  if (!empty($settings['view_display'])) {
    $a = explode(':', $settings['view_display']);
    $view_id = array(
      'view_name' => $a[0],
      'display_name' => $a[1],
    );
    $rv_meta = enterprise_rel_get_rel_view_meta($view_id);

    $form['enterprise_rel']['filter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facet Filter'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $form['enterprise_rel']['filter']['block_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Block Title'),
      '#default_value' => !empty($settings['filter']['block_title']) ? $settings['filter']['block_title'] : '',
      '#description' => t('Enter the title for the facet filter block. Leave blank to use default block title.'),
    );

    $arg_options = array(
      '' => t('No'),
      'links' => t('Yes, as block links'),
    );
    $filt_options = array(
      'hide' => t('No'),
      '' => t('Yes, as Views filter field'),
      'links' => t('Yes, as block links (hide standard filter field)'),
      'both' => t('Yes, as both block links and Views filter field'),
    );

    foreach ($rv_meta['_filtargs'] as $key => $fa) {
      $is_arg = !empty($fa['argument']);
      $fs_key = $fa['entity_type'] . ':' . $fa['bundle'];
      $form['enterprise_rel']['filter']['facets'][$fs_key] = array(
        '#type' => 'fieldset',
        '#title' => t('Facet: :element', array(
          ':element' => $fa['entity_type'] . ': ' . $fa['bundle']
        )),
        '#collapsible' => FALSE,
      );
      $form['enterprise_rel']['filter']['facets'][$fs_key]['display'] = array(
        '#type' => 'select',
        '#title' => t('Display'),
        '#default_value' => !empty($settings['filter']['facets'][$fs_key]['display']) ? $settings['filter']['facets'][$fs_key]['display'] : '',
        '#options' => ($is_arg) ? $arg_options : $filt_options,
        //'#description' => t('Select a view display to act as the default relevant view for this content type.'),
      );
      $form['enterprise_rel']['filter']['facets'][$fs_key]['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => !empty($settings['filter']['facets'][$fs_key]['title']) ? $settings['filter']['facets'][$fs_key]['title'] : '',
        '#description' => t('Enter a label for the facet element. Leave blank to use default.'),
      );
      $form['enterprise_rel']['filter']['facets'][$fs_key]['item_limit'] = array(
        '#type' => 'textfield',
        '#title' => t('Item limit'),
        '#default_value' => !empty($settings['filter']['facets'][$fs_key]['item_limit']) ? $settings['filter']['facets'][$fs_key]['item_limit'] : '',
        '#size' => 4,
        '#description' => t('Enter the maximium number of items to show. Leave blank for no limit (show all items).'),
      );
    }
  }



  $field_info_instances = field_info_instances('node', $node_type->type);
  $field_info_fields = array();
  $field_info_fields_by = array();
  $options = array(
    '' => '- ' . t('None') . ' -',
  );
  foreach ($field_info_instances as $name => $fi) {
    $f = $field_info_fields[$name] = field_info_field($name);
    $entity_type = '';
    if ($f['type'] == 'entityreference') {
      $options[$name] = $fi['label'];
      $entity_type = $f['settings']['target_type'];
      reset($f['settings']['handler_settings']['target_bundles']);
      $bundle = key($f['settings']['handler_settings']['target_bundles']);
    }
    else if ($f['type'] == 'taxonomy_term_reference') {
      $entity_type = 'taxonomy_term';
      $bundle = $f['settings']['allowed_values'][0]['vocabulary'];
    }

    if ($entity_type) {
      if (!isset($field_info_fields_by[$entity_type])) {
        $field_info_fields_by[$entity_type] = array();
      }
      $field_info_fields_by[$entity_type][$bundle] = $name;
    }
  }
  //dsm($settings);
  //dsm($field_info_instances);
  //dsm($field_info_fields);
  //dsm($field_info_fields_by);
  $inherit_ref_field = !empty($settings['inherit']['ref_field']) ? $settings['inherit']['ref_field'] : '';

  $form['enterprise_rel']['inherit'] = array(
    '#type' => 'fieldset',
    '#title' => t('Inherit option'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['enterprise_rel']['inherit']['ref_field'] = array(
    '#type' => 'select',
    '#title' => t('Inherit relevancy settings from'),
    '#default_value' => !empty($settings['inherit']['ref_field']) ? $settings['inherit']['ref_field'] : '',
    '#options' => $options,
    '#description' => t('Select an entity ref field to enable the "Inherit relevancy settings from ..." option.'),
  );

  if (!empty($inherit_ref_field)) {
    $ref_type_label = $options[$inherit_ref_field];
    $fi = $field_info_fields[$inherit_ref_field];
    $ref_entity_type = $fi['settings']['target_type'];
    reset($fi['settings']['handler_settings']['target_bundles']);
    $ref_bundle = key($fi['settings']['handler_settings']['target_bundles']);
    $ref_fii = field_info_instances($ref_entity_type, $ref_bundle);

    //dsm($ref_fii);


    $options = array();
    foreach ($ref_fii as $name => $field) {
      $f = $ref_field_info_fields[$name] = field_info_field($name);

      if (!empty($field_info_instances[$name])) {
        $options["$name:$name"] = $field_info_instances[$name]['label'];
      }
      else {
        $entity_type = '';
        if ($f['type'] == 'entityreference') {
          $entity_type = $f['settings']['target_type'];
          reset($f['settings']['handler_settings']['target_bundles']);
          $bundle = key($f['settings']['handler_settings']['target_bundles']);
        }
        else if ($f['type'] == 'taxonomy_term_reference') {
          $entity_type = 'taxonomy_term';
          $bundle = $f['settings']['allowed_values'][0]['vocabulary'];
        }

        if ($entity_type && !empty($field_info_fields_by[$entity_type][$bundle])) {
          $options["$name:" . $field_info_fields_by[$entity_type][$bundle]] = $field_info_instances[$field_info_fields_by[$entity_type][$bundle]]['label'];
        }
      }
    }
    //dsm($options);
    $form['enterprise_rel']['inherit']['fields'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Inherit fields'),
      '#default_value' => !empty($settings['inherit']['fields']) ? $settings['inherit']['fields'] : array(),
      '#options' => $options,
      '#description' => t('Select fields to copy when the Inherit relevancy settings option is enabled. Note, only field that %this_type and %ref_type content types have in common are available for selection.',
        array(
          '%this_type' => $node_type->name,
          '%ref_type' => $ref_type_label,
        )),
    );


  }

  $form['#submit'][] = 'enterprise_rel_form_node_type_form_submit';
}

function enterprise_rel_form_node_type_form_submit(&$form, &$form_state) {
  if (!isset($form_state['enterprise_rel'])) {
    return;
  }

  $values = $form_state['values'];
  //dsm($values);
  $entity_type = $form_state['enterprise_rel']['entity_type'];
  $bundle = $form_state['enterprise_rel']['bundle'];
  if (!$bundle && !empty($values['machine_name'])) {
    $bundle = $values['machine_name'];
  }

  $entity_settings = $values['enterprise_rel'];

  variable_set('enterprise_rel_entity_settings_' . $entity_type . '__' . $bundle, $entity_settings);
}

function enterprise_rel_query_rel_terms_alter(&$query) {
  return;
  $tables =& $query->getTables();
  $where =& $query->getTables();
  $expressions =& $query->getExpressions();
  $conditions =& $query->conditions();
  //dsm($tables);
  //dsm($conditions);
  //dsm($query);
  //dsm(" " . $query);
}

function enterprise_rel_get_views_options($options = array()) {
  $views = views_get_enabled_views();
  foreach ($views AS $view_name => $view) {
    if (!empty($view->disabled)) {
      continue;
    }
    foreach ($view->display AS $display_name => $display) {
      if ($display->display_plugin == 'page') {
        $options["$view_name:$display_name"] = (($view->human_name) ? $view->human_name : $view->name) . ": " . $display->display_title;
      }
    }
  }
  natcasesort($options);

  return $options;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function enterprise_rel_block_info() {
  $blocks['views_facet_filter'] = array(
    // info: The name of the block.
    'info' => t('Views Facet Filter'),
    // Block caching options (per role, per user, etc.)
    // DRUPAL_CACHE_PER_ROLE is the default.
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function enterprise_rel_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  $block = '';
  switch ($delta) {
    case 'views_facet_filter':
      $block = enterprise_rel_block_views_filter_view_block();
      break;
  }
  return $block;
}

function enterprise_rel_block_views_filter_view_block() {
  $rv_meta = enterprise_rel_get_rel_view_meta();
  //dsm($rv_meta);
  if (empty($rv_meta)) {
    return '';
  }
  $f_settings = $rv_meta['settings']['filter'];

  $content = enterprise_rel_block_views_filter_view_content($rv_meta);
  if (empty($content)) {
    return '';
  }
  $block = array(
    'subject' => '',
    'content' => array(),
  );
  $block['content']['#markup'] = $content;
  $block['content']['#attached'] = array(
    'css' => array(
      drupal_get_path('module', 'enterprise_rel') . '/css/enterprise_rel.filter.css'
    ),
  );

  $block['subject'] = !empty($f_settings['block_title']) ?  $f_settings['block_title'] : t('Filters');
  if ($block['subject'] == '<none>') {
    $block['subject'] = '';
  }

  return $block;
}

function enterprise_rel_block_views_filter_view_content($rv_meta) {

  $f_settings = $rv_meta['settings']['filter'];

  $rv_meta['view']->preview = TRUE;
  $rv_meta['view']->pre_execute($rv_meta['current']['path_args_validated']);
  //$rv_meta['view']->pre_execute(array('non-surgical'));
  $rv_meta['view']->build($rv_meta['display_name']);

  //dsm($rv_meta);

  //$rv_meta['view']->override_url = $_GET['q'];
  //$rv_meta['view']->preview = TRUE;
  //$rv_meta['view']->pre_execute(array($node->nid));

  $term_parents = array();
  $items = array();

  foreach ($rv_meta['_filtargs'] as $i => $fa) {
    $is_arg = isset($fa['argument']);
    $is_filt = isset($fa['filter']);
    if (!$is_arg && empty($fa['exposed'])) {
      continue;
    }
    $fs_key = $fa['entity_type'] . ':' . $fa['bundle'];
    $facet_settings = !empty($f_settings['facets'][$fs_key]) ? $f_settings['facets'][$fs_key] : array();
    //dsm($facet_settings);
    if (
      empty($facet_settings['display'])
      || ($facet_settings['display'] != 'links' && $facet_settings['display'] != 'both')
    ) {
      continue;
    }

    $entity_type = $fa['entity_type'];
    $bundle = $fa['bundle'];

    //if ($fa['id'] != 'field_bio_target_id') {
    //  continue;
    //}

    //dsm("{$fa['entity_type']}: {$fa['bundle']}");
    //dsm($fa);
    if ($fa['entity_type'] == 'taxonomy_term') {

      if (!empty($fa['term_parent'])) {
        $term_parents[$fa['bundle']] = 1;
        continue;
      }

      $query = clone $rv_meta['view']->build_info['query'];
      $group_by =& $query->getGroupBy();
      $order_by =& $query->getOrderBy();

      $ti_alias = $query->innerJoin('taxonomy_index', 'ti', 'node.nid = ti.nid');

      $t_alias = $query->innerJoin('taxonomy_term_data', 't', 'ti.tid = t.tid');
      $query->condition($t_alias . '.vid', $fa['vocabulary']->vid);
      $query->addField($t_alias, 'tid', 'tid');
      $query->addField($t_alias, 'name', 'name');

      $query->addExpression('COUNT(DISTINCT ' . $rv_meta['entity_filter']['type'] . '.nid)', 'count');
      $group_by = array(
        $t_alias . '.tid' => $t_alias . '.tid',
      );
      $order_by = array(
        'count' => 'DESC',
      );

      $result = $query->execute();

      $vitems = (object)array(
        'name' => $fa['vocabulary']->machine_name,
        'title' => $fa['vocabulary']->name,
        'count' => 0,
        'levels' => 1,
        'rows' => array(),
      );
      $count = 0;
      $params = array(
        'merge_op' => 'add',
        'taxonomy_term' => array(
          $fa['bundle'] => array(
            'entities' => array(
              (object) array (
                'tid' => 0,
                'name' => '',
              )
            ),
          ),
        )
      );
      $p_params_type = !empty($term_parents[$fa['bundle']]) ? 'taxonomy_term_parent' : 'taxonomy_term';
      $p_params = array(
        'merge_op' => 'add',
        $p_params_type => array(
          $fa['bundle'] => array(
            'entities' => array(
              (object) array (
                'tid' => 0,
                'name' => '',
              )
            ),
          ),
        )
      );
      if (empty($terms[$bundle])) {
        $terms[$bundle] = array();
      }

      $tids = array();
      $rows = array();
      while($row = $result->fetchObject()) {
        $tids[] = $row->tid;
        $rows[$row->tid] = $row;
      }
      $terms[$bundle] = taxonomy_term_load_multiple($tids);

      $bottom_level = 0;
      $terms[$bundle] = enterprise_rel_get_terms_levels($terms[$bundle], $bottom_level, array('fill_parents' => 1));

      uasort($terms[$bundle], function ($a, $b) {
        return ($a->level > $b->level);
      });

      foreach ($terms[$bundle] as $tid => &$term) {
        $terms[$bundle][$tid]->ancestors = array();
        if ($term->level == 0) {
          $vitems->rows[$tid] = (object)array();
          $v = &$vitems->rows[$tid];
        }
        else if ($term->level == 1) {
          $p_tid = $term->parent[0];
          $term->ancestors[] = array($p_tid);
          $vitems->rows[$p_tid]->rows[$tid] = (object)array();
          $v = &$vitems->rows[$p_tid]->rows[$tid];
        }
        else if ($term->level == 2) {
          $p_tid = $term->parent[0];
          $pp_tid = $terms[$bundle][$p_tid]->parent[0];
          $term->ancestors[] = array($p_tid, $pp_tid);
          $vitems->rows[$pp_tid]->rows[$p_tid]->rows[$tid] = (object)array();
          $v = &$vitems->rows[$pp_tid]->rows[$p_tid]->rows[$tid];
        }

        $params['taxonomy_term'][$bundle]['entities'] = array(
          $term
        );
        $options = array();
        $path = enterprise_rel_view_path_by_params($params, $options);

        $v->title = $term->name;
        $v->link = l($term->name, $path, $options);
        $v->url = url($path, $options);
        if (!empty($rows[$tid]->count)) {
          $v->count = $rows[$tid]->count;
        }

      }

      $items[] = $vitems;

    }
    else if (!empty($fa['field_name'])) {
//dsm($fa);
      $fi_info = field_info_instance($rv_meta['entity_filter']['type'], $fa['field_name'], $rv_meta['entity_filter']['bundle']);
//dsm($fi_info);
      $query = clone $rv_meta['view']->build_info['query'];
      $group_by =& $query->getGroupBy();
      $order_by =& $query->getOrderBy();

      $storage = $fa['field_info']['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
      reset($storage);
      $s_table = key($storage);
      $s2 = current($storage);
      $s_key = key($s2);
      $s_column = current($s2);
//dsm($storage);
//dsm("$s_table, $s_key, $s_column");

      $f_alias = $query->innerJoin($s_table, 'f', 'f.entity_id = node.nid AND f.entity_type = :base_entity_type', array(
        ':base_entity_type' => $rv_meta['entity_filter']['type'],
      ));
      $query->addField($f_alias, $s_column, 'column_value');

      $query->addExpression('COUNT(DISTINCT ' . $rv_meta['entity_filter']['type'] . '.nid)', 'count');

      if ($fa['field_info']['type'] == 'entityreference' && !empty($fa['field_info']['bundles'])) {
        //reset($fa['field_info']['bundles']);
        //$re_entity_type = key($fa['field_info']['bundles']);
        //$re_bundle = current($fa['field_info']['bundles']);
        $re_alias = $query->innerJoin('node', 're', 'f.' . $s_column . ' = re.nid', array(
        ));
        $query->addField($re_alias, 'title', 'label');
      }

      $group_by = array(
        "$f_alias.$s_column" => "$f_alias.$s_column",
      );
      $order_by = array(
        'count' => 'DESC',
      );

      if ($fa['field_info']['type'] == 'entityreference') {
        //dsm("" . $query . "<hr>$re_entity_type");
      }
      $result = $query->execute();

      $vitems = (object)array(
        'name' => $fi_info['field_name'],
        'title' => ($is_filt) ? $fa['filter']['expose']['label'] : $fi_info['label'],
        'count' => 0,
        'levels' => 1,
        'rows' => array(),
      );
      $count = 0;
      $params = array(
        'merge_op' => 'add',
        'field' => array(
          $fa['field_name'] => array(
            'entities' => array(
              (object) array (
              )
            ),
          ),
        )
      );
      $params_value = &$params['field'][$fa['field_name']]['entities'][0];
      while($row = $result->fetchObject()) {

        $column_key = key($fa['field_info']['columns']);
        $params_value->{$column_key} = $row->column_value;

        $label = !empty($row->label) ? $row->label : '';
        if (!empty($fa['field_info']['settings']['allowed_values'])) {
          $label = $fa['field_info']['settings']['allowed_values'][$params_value->value];
        }

        $options = array();
        $path = enterprise_rel_view_path_by_params($params, $options);
        $vitems->rows[$row->column_value] = (object)array(
          'title' => $label,
          'url' => url($path, $options),
          'link' => l($label, $path, $options),
          'count' => $row->count,
        );
        $count++;
        //if ($fa['field_info']['type'] == 'entityreference') {
          //dsm($row);
          //dsm($params);
          //dsm($params_value);
        //}
      }
      $items[] = $vitems;
    }
    else {
      // TODO support more than node entity_type
      if ($fa['entity_type'] != 'node') {
        continue;
      }
    }
  }

//dsm($items);
  $out =  '';
  $vars = array(
    'sets' => $items,
    'options' => array(
      'count' => TRUE,
    ),
  );
  //dsm($vars);
  $out .= theme('views_filter', $vars);
  return $out;


  foreach ($rv_meta['taxonomy_filtargs'] as $v) {
    $query = db_select('taxonomy_term_data', 't')
      ->fields('t')
      ->condition('t.vid', $v['vocabulary']->vid)
    ;
    $alias = $query->innerJoin('taxonomy_index', 'ti', 't.tid = ti.tid');
    $query->addExpression('COUNT(ti.nid)', 'count');





    $result = $query->execute();
    //dsm(" " . $query);

    //dsm($result);
    $vocab_name = $v['name'];
    $vitems = (object)array(
      'name' => $vocab_name,
      'title' => $v['vocab']->name,
      'count' => 0,
      'levels' => 1,
      'rows' => array(),
    );
    $url0 = $rv_meta['path'] . '/';
    $url1 = '';
    $count = 0;
    while($row = $result->fetchObject()) {
      $parents = taxonomy_get_parents($row->tid);
      if (!empty($parents)) {
        foreach ($parents as $p) {
          if (empty($vitems->rows[$p->tid])) {

            $path = enterprise_rel_view_path_by_params($params, $options);
            $vitems->rows[$p->tid] = (object)array(
              'title' => $p->name,
              'link' => l($p->name, $url0 . drupal_html_class($p->name) . $url1),
              'url' => $url0 . drupal_html_class($p->name) . $url1,
              'count' => 0,
              'rows' => array(),
            );
          }
          $vitems->rows[$p->tid]->rows[$row->tid] = (object)array(
            'title' => $row->name,
            'url' => $url0 . drupal_html_class($row->name) . $url1,
            'link' => l($row->name, $url0 . drupal_html_class($row->name) . $url1),
            'count' => $row->count,
          );
          $vitems->rows[$p->tid]->count += $row->count;
          $vitems->levels = 2;
        }
      }
      else {
        $vitems->rows[$row->tid] = (object)array(
          'title' => $row->name,
          'url' => $url0 . drupal_html_class($row->name) . $url1,
          'link' => l($row->name, $url0 . drupal_html_class($row->name) . $url1),
          'count' => $row->count,
        );
      }
      $vitems->count += $row->count;
      $count++;

      //dsm($row);
      //dsm($parents);
    }
    $items[] = $vitems;
  }


  //dsm($vitems);
  //dsm($items);


  $out =  '';
  $vars = array(
    'sets' => $items,
    'options' => array(
      'count' => TRUE,
    ),
  );
  //dsm($vars);
  $out .= theme('views_filter', $vars);
  return $out;
}

function enterprise_rel_theme() {
  $themes = array();

  $themes['views_filter'] = array(
    'template' => 'templates/enterprise-rel-views-filter',
    'variables' => array(
      'sets' => NULL,
      'options' => NULL,
    ),
  );

  $themes['views_filter_set'] = array(
    'template' => 'templates/enterprise-rel-views-filter-set',
    'variables' => array(
      'rows' => NULL,
      'options' => NULL,
    ),
  );

  $themes['views_filter_view_summary'] = array(
    'template' => 'enterprise-style-views-view-summary',
    'path' => drupal_get_path('module', 'enterprise_style') . '/templates/list',
    'variables' => array(
      'rows' => NULL,
      'options' => NULL,
    ),
  );

  return $themes;
}

function enterprise_rel_preprocess_views_filter(&$vars) {
  //dsm($vars);
  $sets = &$vars['sets'];
  foreach ($sets as $id => $set) {
    if (!empty($set->rows)) {
      $vars2 = (array)$set;
      if (!isset($vars2['options'])) {
        $vars2['options'] = array();
      }
      $vars2['options'] += $vars['options'];
      //dsm($vars2);
      $sets[$id]->markup = theme('views_filter_set', $vars2);
    }
  }

  //dsm($vars);
}

function enterprise_rel_preprocess_views_filter_set(&$vars) {
  //dsm($vars);
  static $collapse_index;
  if (!isset($collapse_index)) {
    $collapse_index = 0;
  }

  $level = isset($vars['level']) ? $vars['level'] : 0;

  $rows = &$vars['rows'];
  foreach ($rows as $id => $row) {
    if (!empty($row->rows)) {
      $sub_vars = array();
      $sub_vars['level'] = $level+1;
      $sub_vars['rows'] = $row->rows;
      $sub_vars['options'] = $vars['options'];

      $rows[$id]->sub_items = theme('views_filter_set', $sub_vars);

      $dom_id = 'rel-filter-collapse-' . $collapse_index++;
      $options = array(
        'attributes' => array(
          'data-toggle' => 'collapse',
          'class' => array(
            'collapse-toggle'
          )
        ),
        'fragment' => $dom_id,
        'external' => TRUE,
        'html' => TRUE,
      );
      $rows[$id]->link = l('<i class="glyphicon glyphicon-triangle-right"></i>', '', $options) . $rows[$id]->link;
      //$rows[$id]->sub_items = '<div id="' . $dom_id . '" class="panel-collapse collapse sub-level level-' . ($level+1) . '">' . $rows[$id]->sub_items . '</div>';
      $rows[$id]->sub_items = '<div id="' . $dom_id . '" class="panel-collapse sub-level level-' . ($level+1) . '">' . $rows[$id]->sub_items . '</div>';
    }
  }

  //if () {

  //}

  enterprise_style_preprocess_views_view_summary($vars);
}

function enterprise_rel_preprocess_views_filter_view_summary(&$vars) {
  enterprise_style_preprocess_views_view_summary($vars);
}
/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function enterprise_rel_field_formatter_settings_summary_alter(&$summary, $context) {
  //dsm($context);
  if (isset($context['field']['type']) && $context['field']['type'] == 'taxonomy_term_reference') {
    if (!empty($settings['enterprise_rel_taxonomy_level'])) {
      $summary .= '<br />' . t('Select a level for items in a hierarchy such as taxonomy terms. 0 will select the top most level items only, 1 the first children, -1 selects the bottom most level items.');
    }
  }
}

function enterprise_rel_field_formatter_info_alter(&$info) {
  // Added to all formatters.
  foreach ($info as $formatter_key => &$formatter) {
    if (!empty($formatter['field types'][0]) && $formatter['field types'][0] == 'taxonomy_term_reference') {
      $formatter['settings']['enterprise_rel_taxonomy_level'] = '';
    }
  }
  //if (!empty($info['ds_taxonomy_view_mode'])) {
  //  $info['ds_taxonomy_view_mode']['settings']['enterprise_rel_taxonomy_level'] = '';
  //}
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function enterprise_rel_field_formatter_settings_form_alter(&$settings_form, $context) {
  if (isset($context['field']['type']) && $context['field']['type'] == 'taxonomy_term_reference') {
    $settings = $context['instance']['display'][$context['view_mode']]['settings'];
    $options = array(
      '' => t('- None -')
    );
    $options += drupal_map_assoc(range(-2, 2));
    $settings_form['enterprise_rel_taxonomy_level'] = array(
      '#type' => 'select',
      '#title' => t('Filter values to taxonomy hierarchy level'),
      '#options' => $options,
      '#default_value' => $settings['enterprise_rel_taxonomy_level'],
    );
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function enterprise_rel_field_attach_view_alter(&$output, $context) {

  foreach (element_children($output) as $field_name) {
    $entity_type = $output[$field_name]['#entity_type'];
    $bundle      = $output[$field_name]['#bundle'];

    $info = field_formatter_settings_get_instance_display_settings($entity_type, $field_name, $bundle, $context['view_mode']);

    if (!isset($info['enterprise_rel_taxonomy_level']) || $info['enterprise_rel_taxonomy_level'] == '') {
      continue;
    }

    $level = $info['enterprise_rel_taxonomy_level'];

    $element = &$output[$field_name];

    $terms = array();
    $max_level = 0;
    if ($level != '') {
      foreach ($element['#items'] as $delta => $item) {
        $tid = $item['tid'];
        $term = !empty($item['taxonomy_term']) ? $item['taxonomy_term'] : taxonomy_term_load($tid);
        $terms[$term->tid] = $term;
        if (empty($term->parent)) {
          $terms[$term->tid]->level = 0;
        }
      }
      for ($i = 1; $i <= 2; $i++) {
        foreach ($terms as $tid => $term) {
          if (!isset($term->level) && !empty($term->parent)) {
            foreach ($term->parent as $ptid) {
              if (isset($terms[$ptid]->level)) {
                $max_level = $terms[$tid]->level = $terms[$ptid]->level+1;
                continue;
              }
            }
          }
        }
      }
    }

    if ($level < 0) {
      $level = $max_level + 1 + $level;
    }

    //dsm("level: $level");
    //dsm($terms);
//dsm($element['#items']);
    foreach ($element['#items'] as $delta => $item) {
      if ($level != '') {
        $tid = $item['tid'];
        if (isset($terms[$tid]->level) && $terms[$tid]->level != $level) {
          //$element[$delta]['#access'] = FALSE;
          unset($element['#items'][$delta]);
          //dsm("remove $tid");
          continue;
        }
      }
    }
  }
}