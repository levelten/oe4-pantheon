<?php

/**
 * @file
 */


/**
 * Implements hook_menu()
 */
function enterprise_config_menu() {
  $items = array();

  $items['admin/help/accounts'] = array(
    'title' => 'Accounts',
    'description' => 'Account info',
    'page callback' => 'enterprise_config_admin_accounts_page',
    'access arguments' => array('enterprise config access accounts'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'file' => 'enterprise_config.admin.inc',
  );
 
  enterprise_config_menu_wizards($items);
  
  return $items;
}

function enterprise_config_menu_wizards(&$items) {
  $wizards = config_wizard_info_all();

  if (isset($wizards['webform'])) {
    $wizard = $wizards['webform'];
    $items['node/add/webform/wizard'] = array(
      'title' => 'Webform wizard',
      'description' => (isset($wizard['description'])) ? $wizard['description'] : '',
      'page callback' => 'config_wizard_page',
      'page arguments' => array(config_wizard_load($wizard['name'])),
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
    );  
  }
  
  return $items;
}



/**
 * Implements of hook_perm().
 */
function enterprise_config_permission() {
  $permissions = array();
  $permissions['enterprise config access accounts'] = array(
    'title' => t('Access account info'),
    'description' => t('Provides access to various account login information.'),
  );
  return $permissions;
}

/**
 * Implemeents hook_config_wizard_info
 */
function enterprise_config_config_wizard_info() {
  $wizard_info = array();
  $wizard_weight = -100;
  
  // Install wizard
  $wizard_info['install'] = array(
    'title' => t('Install setup'),
    'description' => t('Run after initial installation to setup content features and IA'),
    'file' => '/wizards/enterprise_config.install.inc',
    'path' => drupal_get_path('module', 'enterprise_config'),
    'category' => 'setup',
    'menu_include' => 'admin/config',
    'weight' => $wizard_weight+=10,
    'steps' => array(),
  );
  $w = 0;
  $wizard_info['install']['steps']['config0'] = array(
    'title' => t('Intial config'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_install_config0',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );
  $wizard_info['install']['steps']['content_features'] = array(
    'title' => t('Select content features'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_install_content_features',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );


  $wizard_info['install']['steps']['content_feature_config'] = array(
    'title' => t('Config content features'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_install_content_feature_config',
    'skipable' => TRUE,
    'weight' => $w+=10,
    'steps' => array(),
  );

  //module_load_include('inc', 'enterprise_config', 'wizards/enterprise_config.install.inc');
  include_once (drupal_get_path('module', 'enterprise_config') . '/wizards/enterprise_config.install.inc');
  $features_enabled = enterprise_config_content_features_enabled();
  $infos = enterprise_config_content_features_list_meta();
  $ws = 0;
  foreach ($features_enabled AS $name => $enabled) {
    if ($enabled) {
      $info = $infos[$name];
      $wizard_info['install']['steps']['content_feature_config']['steps'][$name] = array(
        'title' => $info['name'],
        'description' => '',
        'callback' => 'enterprise_config_wizard_install_content_feature_config',
        'callback arguments' => array(1),
        'skipable' => TRUE,
        'weight' => $ws+=10,
      );
    }
  }

  $wizard_info['install']['steps']['ia'] = array(
    'title' => t('Information architecture'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_install_ia',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );
  $wizard_info['install']['steps']['config1'] = array(
    'title' => t('Final config'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_install_config1',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );
  $wizard_info['install']['steps']['finished'] = array(
    'title' => t('Finished'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_install_finished',
    'finished' => 1,
    'weight' => $w+=10,
  );
  
  // Web services setup wizard
  $wizard_name = 'web_services_setup';
  $wizard_info[$wizard_name] = array(
    'title' => t('Web services setup'),
    'description' => t('Setup essential third party services.'),
    'file' => '/wizards/enterprise_config.web_services_setup.inc',
    'path' => drupal_get_path('module', 'enterprise_config'),
    'category' => 'setup',
    'menu_include' => 'admin/config',
    'weight' => $wizard_weight+=10,
    'steps' => array(),
  );
  $w = 0;
  $wizard_info[$wizard_name]['steps']['primary'] = array(
    'title' => t('Primary accounts'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_web_services_setup_primary',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['email'] = array(
    'title' => t('Email accounts'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_web_services_setup_email',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['addthis'] = array(
    'title' => t('AddThis'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_web_services_setup_addthis',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['disqus'] = array(
    'title' => t('Disqus'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_web_services_setup_disqus',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['finished'] = array(
    'title' => t('Finished'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_web_services_setup_finished',
    'finished' => 1,
    'weight' => $w+=10,
  );


  // Analtyics setup wizard
  $wizard_info['analytics_setup'] = array(
    'title' => t('Analytics setup'),
    'description' => t('Configures Google Analytics and Intelligence'),
    'file' => '/wizards/enterprise_config.analytics_setup.inc',
    'path' => drupal_get_path('module', 'enterprise_config'),
    'menu_include' => 'admin/config',
    'category' => array(
      array(
        'name' => 'setup',
        'weight' => $wizard_weight+=10,
      ),
      
     /* array(
        'name' => 'marketing',
        'weight' => 0,
      ),
    */
    ),
    'weight' => $wizard_weight+=10,
    'steps' => array(),
  );
  $w = 0;
  $wizard_info['analytics_setup']['steps']['s1'] = array(
    'title' => t('Install options'),
    'description' => '',
    'callback' => 'enterprise_config_config_wizard_analytics_setup',
    'weight' => $w+=10,
  );
  $wizard_info['analytics_setup']['steps']['s2'] = array(
    'title' => 'Google Analytics',
    'description' => '',
    'callback' => 'enterprise_config_config_wizard_analytics_setup_basic',
    'weight' => $w+=10,
  );
  $wizard_info['analytics_setup']['steps']['s3'] = array(
    'title' => 'LevelTen Intelligence',
    'description' => '',
    'callback' => 'enterprise_config_config_wizard_analytics_setup_intel',
    'weight' => $w+=10,
  );

  // Analtyics setup wizard
  $wizard_name = 'intel_setup';
  $wizard_info[$wizard_name] = array(
    'title' => t('Intelligence setup'),
    'description' => t('Configures OE Intelligence and Google Analytics'),
    'file' => '/wizards/enterprise_config.intel_setup.inc',
    'path' => drupal_get_path('module', 'enterprise_config'),
    'menu_include' => 'admin/config',
    'category' => array(
      array(
        'name' => 'setup',
        'weight' => $wizard_weight+=10,
      ),

      /* array(
         'name' => 'marketing',
         'weight' => 0,
       ),
     */
    ),
    'weight' => $wizard_weight+=10,
    'steps' => array(),
  );
  $w = 0;
  $wizard_info[$wizard_name]['steps']['ga'] = array(
    'title' => 'Google Analytics Account',
    'description' => '',
    'callback' => 'enterprise_config_config_wizard_intel_setup_ga',
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['intel_account'] = array(
    'title' => 'Intelligence Account',
    'description' => '',
    'callback' => 'enterprise_config_config_wizard_intel_setup_intel_account',
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['ga_api'] = array(
    'title' => 'Google Analytics API',
    'description' => '',
    'callback' => 'enterprise_config_config_wizard_intel_setup_ga_api',
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['finished'] = array(
    'title' => t('Finished'),
    'description' => '',
    'callback' => 'enterprise_config_config_wizard_intel_setup_finished',
    'finished' => 1,
    'weight' => $w+=10,
  );


  
  // Mailchimp setup wizard
  $wizard_name = 'mailchimp_setup';
  $wizard_info[$wizard_name] = array(
    'title' => t('MailChimp setup'),
    'description' => t('MailChimp install and integration.'),
    'file' => '/wizards/enterprise_config.mailchimp_setup.inc',
    'path' => drupal_get_path('module', 'enterprise_config'),
    'category' => 'setup',
    'weight' => $wizard_weight+=10,
    'steps' => array(),
  );
  $w = 0;
  $wizard_info[$wizard_name]['steps']['start'] = array(
    'title' => t('Account setup'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_start',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['api'] = array(
    'title' => t('API setup'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_api',
    'skipable' => TRUE,
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['finished'] = array(
    'title' => t('Finished'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_finished',
    'finished' => 1,
    'weight' => $w+=10,
  );
  
  
  // Webform wizard wizard
  if (module_exists('webform')) {
    $wizard_name = 'webform';
    $wizard_info[$wizard_name] = array(
      'title' => t('Webform wizard'),
      'description' => t('Webform creation walk through.'),
      'file' => '/wizards/enterprise_config.webform.inc',
      'path' => drupal_get_path('module', 'enterprise_config'),
      'category' => 'content',
      'weight' => $wizard_weight+=10,
      'steps' => array(),
    );
    $w = 0;
    $wizard_info[$wizard_name]['steps']['start'] = array(
      'title' => t('Webform selection'),
      'description' => '',
      'callback' => 'enterprise_config_wizard_' . $wizard_name . '_start',
      'weight' => $w+=10,
    );
    $wizard_info[$wizard_name]['steps']['fields'] = array(
      'title' => t('Field selection'),
      'description' => '',
      'callback' => 'enterprise_config_wizard_' . $wizard_name . '_fields',
      'weight' => $w+=10,
      'skipable' => 1,
    );
    $wizard_info[$wizard_name]['steps']['fieldsord'] = array(
      'title' => t('Field details'),
      'description' => '',
      'callback' => 'enterprise_config_wizard_' . $wizard_name . '_fieldsord',
      'weight' => $w+=10,
      'skipable' => 1,
    );
    $wizard_info[$wizard_name]['steps']['emails'] = array(
      'title' => t('Submission emails'),
      'description' => '',
      'callback' => 'enterprise_config_wizard_' . $wizard_name . '_emails',
      'weight' => $w+=10,
      'skipable' => 1,
    );
    $wizard_info[$wizard_name]['steps']['submission_actions'] = array(
      'title' => t('Submission actions'),
      'description' => '',
      'callback' => 'enterprise_config_wizard_' . $wizard_name . '_submission_actions',
      'weight' => $w+=10,
      'skipable' => 1,
    );
    if (module_exists('intel_webform')) {
      $wizard_info[$wizard_name]['steps']['intel'] = array(
        'title' => t('Intelligence integration'),
        'description' => '',
        'callback' => 'enterprise_config_wizard_' . $wizard_name . '_intel',
        'weight' => $w+=10,
        'skipable' => 1,
      );
    }
    if (module_exists('webform_mailchimp')) {
      $wizard_info[$wizard_name]['steps']['mailchimp'] = array(
        'title' => t('MailChimp integration'),
        'description' => '',
        'callback' => 'enterprise_config_wizard_' . $wizard_name . '_mailchimp',
        'weight' => $w+=10,
        'skipable' => 1,
      );
    }
  }

  $wizard_info[$wizard_name]['steps']['finished'] = array(
    'title' => t('Finished'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_finished',
    'finished' => 1,
    'weight' => $w+=10,
  );
  
    // Webform wizard wizard
  $wizard_name = 'conversion_workflow';
  $wizard_info[$wizard_name] = array(
    'title' => t('Conversion workflow wizard'),
    'description' => t('Sets up landing pages and calls to actions.'),
    'file' => '/wizards/enterprise_config.conversion_workflow.inc',
    'path' => drupal_get_path('module', 'enterprise_config'),
    'category' => 'marketing',
    //'menu_include' => 'admin/content',
    'weight' => $wizard_weight+=10,
    'steps' => array(),
  );
  $w = 0;
  $wizard_info[$wizard_name]['steps']['start'] = array(
    'title' => t('Task'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_start',
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['naming'] = array(
    'title' => t('Naming'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_naming',
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['thankyou_page'] = array(
    'title' => t('Thank you page'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_thankyou_page',
    'weight' => $w+=10,
  );
 
  $wizard_info[$wizard_name]['steps']['finished'] = array(
    'title' => t('Finished'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_finished',
    'finished' => 1,
    'weight' => $w+=10,
  );
  
  
  // Environment setup wizard
  $wizard_name = 'environment_setup';
  $wizard_info[$wizard_name] = array(
    'title' => t('Environment setup'),
    'description' => t('Changes settings between environments.'),
    'file' => '/wizards/enterprise_config.environment_setup.inc',
    'path' => drupal_get_path('module', 'enterprise_config'),
    'category' => 'devel',
    'weight' => $wizard_weight+=10,
    'steps' => array(),
  );
  $w = 0;
  $wizard_info[$wizard_name]['steps']['select'] = array(
    'title' => t('Select environment'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_select',
    'weight' => $w+=10,
  );
  $wizard_info[$wizard_name]['steps']['options'] = array(
    'title' => t('Options'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_options',
    'weight' => $w+=10,
  );
 
  $wizard_info[$wizard_name]['steps']['finished'] = array(
    'title' => t('Finished'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_finished',
    'finished' => 1,
    'weight' => $w+=10,
  );
  
      // Webform wizard wizard
  $wizard_name = 'site_reset';
  $wizard_info[$wizard_name] = array(
    'title' => t('Site reset'),
    'description' => t('WARNING: used to reset site data. '),
    'file' => '/wizards/enterprise_config.site_reset.inc',
    'path' => drupal_get_path('module', 'enterprise_config'),
    'category' => 'devel',
    'weight' => $wizard_weight+=10,
    'steps' => array(),
  );
  $w = 0;
  $wizard_info[$wizard_name]['steps']['nodes'] = array(
    'title' => t('Nodes'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_nodes',
    'weight' => $w+=10,
  );
 
  $wizard_info[$wizard_name]['steps']['finished'] = array(
    'title' => t('Finished'),
    'description' => '',
    'callback' => 'enterprise_config_wizard_' . $wizard_name . '_finished',
    'finished' => 1,
    'weight' => $w+=10,
  );
  
  
  /*
  // SEO setup
  $substep = 0;
  $wizard_info['install']['steps'][++$step] = array(
    'title' => 'Search engine optimization',
    'description' => '',
    'substeps' => array(),
  );
  
  $wizard_info['install']['steps'][$step]['substeps'][$substep] = array(
    'title' => 'Level',
    'description' => '',
  );
  $wizard_info['install']['steps'][$step]['substeps'][++$substep] = array(
    'title' => 'Meta tag settings',
    'description' => '',
    'page callback' => 'enterprise_config_config_wizard_install_seo_metatag'
  );
  $wizard_info['install']['steps'][$step]['substeps'][++$substep] = array(
    'title' => 'SEO Tools setup',
    'description' => '',
    'access callback' => 'enterprise_config_wizard_install_3_3_access',
  );
  */  
  return $wizard_info;
}

function enterprise_config_config_wizard_category_info() {
  $wizard_cats = array();
  $wizard_cats['setup'] = array(
    'title' => t('Setup'),
    'description' => t('Used to help with installation and initial configuration of modules, features and apps.'),
    'access callback' => 'user_access',
    'access arguments' => array('enterprise wizard category setup'),
  );
  $wizard_cats['content'] = array(
    'title' => t('Content'),
    'description' => t('Help creating and configuring content.'),
    'access callback' => 'user_access',
    'access arguments' => array('config wizard category marketing'),
  );
  $wizard_cats['marketing'] = array(
    'title' => t('Marketing'),
    'description' => t('Automation for common marketing tasks and workflows.'),
    'access callback' => 'user_access',
    'access arguments' => array('config wizard category marketing'),
  );
  $wizard_cats['devel'] = array(
    'title' => t('Development'),
    'description' => t('Used to help with installation and initial configuration of modules, features and apps.'),
    'access callback' => 'user_access',
    'access arguments' => array('enterprise wizard category setup'),
  );
  $wizard_cats['testing'] = array(
    'title' => t('Testing'),
    'description' => t('Test scripts used to for validating website features and functionality.'),
    'access callback' => 'user_access',
    'access arguments' => array('config wizard category testing'),    
  );
  return $wizard_cats;
}

/**
 * Implements of hook_perm().
 */
function enterprise_config_config_permission_alter($permissions) {
  $permissions = array();
  $permissions['config wizard category setup'] = array(
    'title' => t('Administer LevelTen Insight'),
    'description' => t('Eables user to configure module settings.'),
  );
  $permissions['config wizard category marketing'] = array(
    'title' => t('View all LevelTen Insight reports'),
    'description' => t('Grants access to all reports.'),
  );
  $permissions['config wizard category testing'] = array(
    'title' => t('View own LevelTen Insight reports'),
    'description' => t('Grants access to content reports on nodes that a user has authored.'),
  );
  $permissions['view intel visitor data'] = array(
    'title' => t('View visitor data'),
    'description' => t('Grants access to visitor information and reports.'),
  );
  return $permissions;
}

function enterprise_config_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($_GET['config-wizard'])) {
    $wizard = config_wizard_load($_GET['config-wizard']);
    if (isset($wizard['file'])) {
      require_once ($wizard['path'] ? $wizard['path'] : '') . $wizard['file'];
    } 
    $func = 'enterprise_config_' . $_GET['config-wizard'] . '_form_alter';
    if (function_exists($func)) {
      drupal_add_css(drupal_get_path('module', 'enterprise_config') . '/css/enterprise_config.form_alter.css');
      $func($form, $form_state, $form_id);
    }       
  }
}

function enterprise_config_app_structures_load($app) {
  $apps_structures = enterprise_config_apps_structures();
  return $apps_structures[$app];
}

function enterprise_config_apps_structures() {
  $apps_structures = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (!isset($sets)) {
    if (FALSE && $cache = cache_get('enterprise_config_apps_structures', 'cache')) {
      $apps_structures = $cache->data;
    }
    else {
      $apps_structures = array();

      // Select the module-defined sets.
      foreach (module_implements('enterprise_config_apps_structures') as $module) {
        $config_info = module_invoke($module, 'enterprise_config_apps_structures');
        foreach ($config_info as $app_name => $app_structure) {
          $app_structure['name'] = $app_name;
          $app_structure['module'] = $module;
          $apps_structures[$app_name] = $app_structure;
        }
      }
      drupal_alter('enterprise_config_apps_structures', $apps_structures);
      cache_set('enterprise_config_apps_structures', $apps_structures);
    }
  }

  return $apps_structures;
}

function enterprise_config_enterprise_config_apps_structures() {
  $structures = array();
  $structures['base'] = array(
    'title' => t('Base'),
  );
  $visibility = array(
    'all' => array(
      'title' => t('Show on all pages in the site'),
      'path' => array(
        'visibility' => 0,
        'pages' => '',
      ),
    ),
    'view' => array(
      'title' => t('Show only on the content list pages'),
      'path' => array(
        'visibility' => 1,
        'pages' => 'nodes*',
      ),
    ),
  );
  $structures['base']['blocks'] = array(
    'views:enterprise_content-block' => array(
      'defaults' => array(
        'regions' => array('secondary'),
        'visibility' => 'view',
      ),
      'visibility' => $visibility,
    ),

  );
  return $structures;
}

function enterprise_config_apps_structures_blocks_form($form, &$form_state, $config_info) {
  //drupal_add_css(drupal_get_path('module', 'enterprise_config') . '/css/enterprise_config.admin.css');
  $form = array();
  $theme = variable_get('theme_default', 'bartik');
  // Fetch and sort blocks.
  require_once(drupal_get_path('module', 'block') . '/block.admin.inc');
  $app_block_deltas = array();
  foreach ($config_info['blocks'] AS $key => $block_struc) {
    list($module, $delta) = explode(':', $key);
    // check if views is using a hash
    if (($module == 'views') && (strlen($delta) >= 32)) {
      $hash = md5($delta);
      $config_info['blocks']['views:' . $hash] = $config_info['blocks'][$key];
      $delta = $hash;
      unset($config_info['blocks'][$key]);
    }
    $app_block_deltas[$delta] = 1;
  }
  $blocks = block_admin_display_prepare_blocks($theme);
  $app_blocks = array();
  foreach($blocks as $block) {
    if (isset($app_block_deltas[$block['delta']])) {
      $app_blocks[] = $block;
    }
  }

  $block_regions = system_region_list($theme);

  $form['app_structures'] = array(
    '#type' => 'value',
    '#value' => $config_info,
  );
  $form['#tree'] = TRUE;

  foreach ($app_blocks as $i => $block) {

    $key = $block['module'] . '_' . $block['delta'];

    $app_blocks_struc = $config_info['blocks'][$block['module'] . ':' . $block['delta']];
    $block['node_types'] = db_query("SELECT type FROM {block_node_type} WHERE module = :module AND delta = :delta", array(
      ':module' => $block['module'],
      ':delta' => $block['delta'],
    ))->fetchCol();

    $result = db_query("SELECT * FROM {block_views} WHERE module = :module AND delta = :delta", array(
      ':module' => $block['module'],
      ':delta' => $block['delta'],
    ))->fetchAll();
    $block['views'] = array();
    if (is_array($result)) {
      foreach ($result AS $row) {
        $block['views'][] = "$row->view:$row->display";
      }
    }

    $block['pages_array'] = array();
    if (trim($block['pages'])) {
      $block['pages_array'] = explode("\n", $block['pages']);
    }

    $form['blocks'][$key] = array(
      '#type' => 'fieldset',
      '#title' => t('@block', array('@block' => $block['info'])),
      '#description' =>  isset($app_blocks_struc['description']) ? $app_blocks_struc['description'] : '',
    );
    $form['blocks'][$key]['module'] = array(
      '#type' => 'value',
      '#value' => $block['module'],
    );
    $form['blocks'][$key]['delta'] = array(
      '#type' => 'value',
      '#value' => $block['delta'],
    );
    $form['blocks'][$key]['theme'] = array(
      '#type' => 'value',
      '#value' => $theme,
    );
    $form['blocks'][$key]['weight'] = array(
      '#type' => 'value',
      '#value' => $block['weight'],
    );
    $suffix = '';
    $default = '';
    if (($block['region'] == BLOCK_REGION_NONE) && isset($app_blocks_struc['defaults']['regions'])) {
      foreach ($app_blocks_struc['defaults']['regions'] AS $region) {
        if (isset($block_regions[$region])) {
          $default = $region;
          $suffix = ' ' . t('(currently hidden)');
          break;
        }
      }
    }
    else {
      $default = $block['region'] != BLOCK_REGION_NONE ? $block['region'] : NULL;
    }
    $form['blocks'][$key]['region'] = array(
      '#type' => 'select',
      '#default_value' => $default,
      '#empty_value' => BLOCK_REGION_NONE,
      '#title' => t('Region'),
      '#options' => $block_regions,
      '#field_suffix' => $suffix,
    );
    $options = array();
    $defaults = array();
    $checks = array('path', 'node_type', 'views');
    $custom = $block;
    if (isset($app_blocks_struc['visibility']) && !empty($app_blocks_struc['visibility'])) {
      foreach ($app_blocks_struc['visibility'] AS $k => $b) {
        $options[$k] = $b['title'];
        $b += array(
          'path' => array(
            'pages' => array(),
            'visibility' => 0,
          ),
          'node_type' => array(
            'types' => array(),
          ),
          'views' => array(
            'views' => array(),
          ),
        );
        $bc = $b;

        if (($b['path']['visibility'] == $block['visibility'])) {
          foreach ($block['pages_array'] AS $i => $page) {
            if ($bci = array_search($page, $b['path']['pages'])) {
              unset($bc['path']['pages'][$bci]);
              unset($custom['pages'][$i]);
            }
          }
        }
        foreach ($block['node_types'] AS $i => $type) {
          $bci = array_search($type, $b['node_type']['types']);
          if ($bci !== FALSE) {
            unset($bc['node_type']['types'][$bci]);
            unset($custom['node_types'][$i]);
          }
        }
        foreach ($block['views'] AS $i => $view) {
          $bci = array_search($view, $b['views']['views']);
          if ($bci !== FALSE) {
            unset($bc['views']['views'][$bci]);
            unset($custom['views'][$i]);
          }
        }

        if (empty($bc['path']['pages']) && empty($bc['node_type']['types']) && empty($bc['views']['views'])) {
          $defaults[] = $k;
        }
      }
      $description_extra = '';
      if (!empty($custom['pages_array'])|| !empty($custom['node_types']) || !empty($custom['views'])) {
        $options['custom'] = t('Keep existing custom settings');
        $defaults[] = 'custom';
        $custom_preset = array(
          'path' => array(
            'pages' => $custom['pages_array'],
            'visibility' => 0,
          ),
          'node_type' => array(
            'types' => $custom['node_types'],
          ),
          'views' => array(
            'views' => $custom['views'],
          ),
        );

        $form['blocks'][$key]['custom_preset'] = array(
          '#type' => 'value',
          '#value' => $custom_preset,
        );
        $description_extra = ' ' . t('There are some existing custom visibility settings. These settings may conflict with presets. To keep the existing settings leave "Keep existing..." option selected.');
      }
      if ($block['region'] == -1 && isset($app_blocks_struc['defaults']['visibility'])) {
        $defaults = $app_blocks_struc['defaults']['visibility'];
      }
      $description_extra .= ' ' . t('For advanced settings see the !link.',
          array(
            '!link' => l(t('block configure form'), 'admin/structure/block/manage/' . $block['module'] . '/' . $block['delta'] . '/configure', array('attributes' => array('target' =>  '_blank'))),
          )
        );
      $form['blocks'][$key]['visiblity_presets'] = array(
        '#type' => 'checkboxes',
        '#default_value' => $defaults,
        '#title' => t('Visiblity'),
        '#options' => $options,
        '#description' => t('Use the check boxes to display the block only on specific pages within your site. Leave all selections unchecked to show on all pages.') . $description_extra,
        '#attributes' => array(
          'class' => array('scrollable'),
        )
      );
      $form['blocks'][$key]['visiblity_presets_default'] = array(
        '#type' => 'value',
        '#value' => $defaults,
      );
    }

  }
  $form['blocks']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  // Use the default block admin form submit.
  //$form['#submit'][] = 'enterprise_config_apps_structures_blocks_form_submit';
  //$form['#submit'][] = 'block_admin_display_form_submit';

  return $form;
}

function enterprise_config_apps_structures_blocks_form_validate($form, &$form_state) {

}

function enterprise_config_apps_structures_blocks_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  // check if tree from apps config or standard config page
  if (!isset($values['app_structures']) && isset($values['blocks']['app_structures'])) {
    $config_info = $values['blocks']['app_structures'];
    $blocks = $values['blocks']['blocks'];
  }
  else {
    $config_info = $values['app_structures'];
    $blocks = $values['blocks'];
  }
  $base_weights = array();
  $default_theme = variable_get('theme_default', NULL);
  foreach ($blocks AS $name => $block) {
    // skip if not a real block
    if (!is_array($block) || !isset($block['module']) || !$block['module']) {
      continue;
    }
    $region = $block['region'];
    // determine the highest weight of blocks in each region
    if (($region != -1) && !isset($base_weights[$region])) {
      $query = db_select('block')
        ->fields('block', array('weight'))
        ->condition('theme', $default_theme)
        ->condition('module', $block['module'])
        ->condition('delta', $block['delta']);
      $base_weights[$region] = $query->execute()->fetchField();
      if (!$base_weights[$region]) {
        $base_weights[$region] = -10;
      }
    }
    $visiblity = 0;
    $pages = array();
    $types = array();
    $views = array();
    if (isset($block['visiblity_presets']) && is_array($block['visiblity_presets'])) {
      $app_blocks_struc = $config_info['blocks'][$block['module'] . ':' . $block['delta']];
      foreach ($block['visiblity_presets'] AS $preset_name) {
        if (!$preset_name) {
          continue;
        }
        if ($preset_name == 'custom') {
          $preset = $block['custom_preset'];
        }
        elseif (isset($app_blocks_struc['visibility'][$preset_name])) {
          $preset = $app_blocks_struc['visibility'][$preset_name];
        }
        else {
          $preset = array();
        }

        $preset += array(
          'path' => array(
            'pages' => array(),
            'visibility' => 0,
          ),
          'node_type' => array(
            'types' => array(),
          ),
          'views' => array(
            'views' => array(),
          ),
        );
        $visibility = $preset['path']['visibility'];
        foreach ($preset['path']['pages'] AS $page) {
          $pages[$page] = $page;
        }
        foreach ($preset['node_type']['types'] AS $type) {
          $types[$type] = $type;
        }
        foreach ($preset['views']['views'] AS $view) {
          $views[$view] = $view;
        }
      }
    }

    $fields = array(
      'region' => ($region) ? $region : -1,
      'status' => ($region) ? 1 : 0,
      'visibility' => (int) $visiblity,
      'pages' => implode("\n", $pages),
    );
    if (isset($base_weights[$region])) {
      $fields['weight'] = $base_weights[$region] + isset($app_blocks_struc['weight']) ? $app_blocks_struc['weight'] : 0;
    }
    $query = db_update('block')
      ->fields($fields)
      ->condition('theme', $default_theme)
      ->condition('module', $block['module'])
      ->condition('delta', $block['delta']);
    $query->execute();

    db_delete('block_node_type')
      ->condition('module', $block['module'])
      ->condition('delta', $block['delta'])
      ->execute();
    foreach ($types AS $i => $type) {
      $fields = array(
        'module' => $block['module'],
        'delta' => $block['delta'],
        'type' => $type,
      );
      db_insert('block_node_type')
        ->fields($fields)
        ->execute();
    }

    db_delete('block_views')
      ->condition('module', $block['module'])
      ->condition('delta', $block['delta'])
      ->execute();
    foreach ($views AS $i => $viewdis) {
      list($view, $display) = explode(':', $viewdis);
      $fields = array(
        'module' => $block['module'],
        'delta' => $block['delta'],
        'view' => $view,
        'display' => $display,
      );
      db_insert('block_views')
        ->fields($fields)
        ->execute();
    }
  }
}
