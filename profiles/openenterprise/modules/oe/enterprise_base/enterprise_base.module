<?php
/**
 * @file
 */

// Drupal needs this blank file.

include_once('enterprise_base.features.inc');

/**
 * Implements hook_menu_alter().
 *
 * @param $items
 */
function enterprise_base_menu_alter(&$items) {
  // Force the default node page to be hidden.
//  $items['node']['page callback'] = 'drupal_not_found';
  // Because we override the admin/people page with a view, admin/people/create
  // inherits the page callback of views_view. Set the page callback manually
  // instead.
  $items['admin/people/create']['page callback'] = 'user_admin';
  $items['admin/people/create']['file'] = 'user.admin.inc';
}

/**
 * Implements hook_admin_paths()
 */
function enterprise_base_admin_paths() {
  $paths = array(
    'user/*/scheduler' => 1,
  );
  return $paths;
}

/**
 * Implements hook_update_projects_alter().
 */
function enterprise_base_update_projects_alter(&$projects) {
  // We wish to remove our custom modules from any drupal.org updates.
//  $client = variable_get('enterprise_client', FALSE);
//  foreach($projects as $key => $project) {
//    // Remove all enterprise projects
//    if (preg_match('/^enterprise_.*$/', $key)) {
//      unset($projects[$key]);
//    }
//    // Remove client specific projects
//    elseif ($client && preg_match('/^' . $client . '_.*$/', $key)) {
//      unset($projects[$key]);
//    }
//    // Remove any specified projects as well.
//    elseif (in_array($key, variable_get('enterprise_projects_exclude', array()))) {
//      unset($projects[$key]);
//    }
//  }
}

/**
 * Implements hook_entity_info_alter().
 * 
 * Here we will capture the taxonomy_term uri callback and make it so we can 
 * parse out the callback to various submodules.
 * 
 * @param array $entity_info
 */
function enterprise_base_entity_info_alter(&$entity_info) {
  $entity_info['taxonomy_term']['uri callback'] = 'enterprise_base_taxonomy_term_uri';
}

/**
 * Rewrite taxonomy term uris. Allow other modules to modify specific vocabularies.
 * 
 * @param type $term
 * @return type
 */
function enterprise_base_taxonomy_term_uri($term) {
  $url = array(
    'path' => 'taxonomy/term/' . $term->tid,
  );
  
  // Allow other modules to set the path.
  drupal_alter('taxonomy_term_' . $term->vocabulary_machine_name . '_uri', $url, $term);

  return $url;
}

/**
 * Convert a string to lowercase with underscores and safe for machine names
 */
function enterprise_base_create_machine_name($string, $replacement = '_') {
  return preg_replace('/[^a-z0-9]+/', $replacement, strtolower($string));
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function enterprise_base_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // assign active_type if view has a content type filter
  $active_type = FALSE;
  if((arg(0) != 'admin') && isset($router_item['page_callback']) &&  ($router_item['page_callback'] == 'views_page')) {
    //$view = views_page($router_item['page_arguments'][0], $router_item['page_arguments'][0]);
    $view = views_get_view($router_item['page_arguments'][0]);
    $tfilter = FALSE; 
    if (isset($view->display['default']->display_options['filters']['type'])) {
      $tfilter = $view->display['default']->display_options['filters']['type'];
    }
    $display = $router_item['page_arguments'][1];
    if (is_array($display)) {
      $display = array_shift($display);
    }
    if (isset($view->display[$display]->display_options['filters']['type'])) {
      $tfilter = $view->display[$display]->display_options['filters']['type'];
    }
    if ($tfilter) {
      if (($tfilter['table'] == 'node')) {
        if (!isset($tfilter['operator']) || ($tfilter['operator'] == 'in')) {
          $active_type = array_shift($tfilter['value']);
        }
      }
    }
  }
  
  // set active_type if enterprise_base view
  if (($root_path == 'nodes' || $root_path == 'node')) {
    $active_type = arg(1);
  }
  // set active_type if enterprise_base view
  if (($user->uid > 0) && ($root_path == 'node/%')) {
  	$node = node_load(arg(1));
    $active_type = $node->type;
  }

  
  if ($active_type) {
    $type = node_type_load($active_type);
    if (!isset($type->name)) {
      return;
    }
    $content_name = strtolower($type->name);
    $item = menu_get_item('node/add/' . str_replace('_', '-', $active_type));

    if ($item['access']) {
      $item['title'] = t('Add @type_name', array('@type_name' => strtolower($content_name)));
      $item['localized_options'] = array(
        'html' => TRUE,
        'attributes' => array(
          'class' => array('btn', 'btn-small'),
        ),
      );
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
    $href = 'admin/content/node/' . $active_type;
    $item = menu_get_item($href);
    if ($item['access']) {
      $item['href'] = $href;
      $item['title'] = t('Manage @type_name', array('@type_name' => $content_name . 's'));
      $item['localized_options'] = array(
        'html' => TRUE,
        'attributes' => array(
          'class' => array('btn', 'btn-small'),
        ),
      );
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  
  if ($root_path == 'admin/content' || (strpos($root_path, 'admin/content/node') === 0)) {
  	drupal_add_css(drupal_get_path('module', 'enterprise_base') . '/enterprise_base.content_admin.css');
  	$custom_view = ($root_path != 'admin/content') ? TRUE : FALSE;
    $active_type = arg(3);
    // if active type, clear + add content action
    if (isset($active_type)) {
    	unset($data['actions']['output'][0]);
    }
    $types = node_type_get_names();
    // add contextual add content type link
    if (isset($active_type) && $active_type) {
      $type_name = strtolower($types[$active_type]);
      $item = menu_get_item('node/add/' . str_replace('_', '-', $active_type));
      $item['title'] = t('Add @type_name', array('@type_name' => $type_name));
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
    // add all sub-tab if on content to trigger display of subtabs on some themes (e.g. Rubik)
    $href = 'admin/content/node';
    $item = menu_get_item($href);    
    if ($item['access']) {
      $item['href'] = $href;
      $item['title'] = ' ' . t('All');
      $output = array(
        '#theme' => 'menu_local_task',
        '#link' => $item,
      );
      if (!isset($active_type)) {
        $output['#active'] = TRUE;
      }
      $data['tabs'][1]['output'][] = $output; 
    }  
    // add sub-tabs for content types
    $count = count($types) + 1;
    $data['tabs'][1]['count'] = $count;
    $i = 0;
    foreach ($types AS $type => $name) {
      $href = 'admin/content/node/' . $type;
      $item = menu_get_item($href);
      // if custom admin view exists for content type, skip adding sub-tab
      if ($item['path'] != 'admin/content/node') {
        continue;
      }
      if ($item['access']) {
        $item['href'] = $href;
        $item['title'] = $name;
        $output = array(
            '#theme' => 'menu_local_task',
            '#link' => $item,
        );
        if ($type == $active_type) {
          $output['#active'] = TRUE;
        }
        $data['tabs'][1]['output'][] = $output;
      }
      $i++;
    } 
    usort($data['tabs'][1]['output'], '_enterprise_base_content_sort_tabs'); 
  } 
}

function _enterprise_base_content_sort_tabs($a, $b) {
  return strnatcmp($a['#link']['title'], $b['#link']['title']);
}

/**
 * Implement hook_form_alter
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function enterprise_base_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'field_ui_field_edit_form') {
	  $options = array(
	    '' => t('Standard'),
	    'sidebar' => t('Sidebar'),
	    //'verticaltabs' => t('Vertical tabs'),
	  );
	  $field_name = $form['#field']['field_name'];
	  $default = '';
	  if (isset($form_state['build_info']['args'][0]['enterprise_edit_form_display'])) {
	  	$default = $form_state['build_info']['args'][0]['enterprise_edit_form_display'];
	  }
	  $form['instance']['enterprise_edit_form_display'] = array(
	    '#type' => 'radios',
	    '#title' => t('Edit form display location'),
	    '#description' => t('Select where you want this field to display on the edit form. Sidebar is recommended for meta data.'),
	    '#default_value' => $default,
	    '#options' => $options,
	  );
	}
	// use JavaScript to move 
  elseif (
    isset($form['#node_edit_form']) // node edit form
    || $form_id == 'user_profile_form' // taxonomy term edit form
    || $form_id == 'taxonomy_form_term' // taxonomy term edit form
    || $form_id == 'bean_form' // bean edit form
  ) {
    // if admin theme is Rubik, enhance node admin
		$theme = variable_get('admin_theme', 'bartik');
		$node_admin = variable_get('node_admin_theme', 'bartik');
		if (($theme != 'rubik') || (!$node_admin)) {
			return;
		}
		drupal_add_js(drupal_get_path('module', 'enterprise_base') . '/js/enterprise_base.edit_form.js');
		drupal_add_css(drupal_get_path('module', 'enterprise_base') . '/css/enterprise_base.edit_form.css');
		if (isset($form_state['field']) && is_array($form_state['field'])) {
		  foreach ($form_state['field'] AS $name => $field) {
		    if (!isset($field[LANGUAGE_NONE]['instance'])) {
		      continue;
		    }
		  	$field[LANGUAGE_NONE]['instance'] += array(
		  	  'enterprise_edit_form_display' => '',
		  	);
		  	$display = $field[LANGUAGE_NONE]['instance']['enterprise_edit_form_display'];
		  	if ($display == 'sidebar') {
          $form[$name]['#attributes']['class'][] = 'display_sidebar';
          // set field to scrollable if checkboxes or radios
          if (isset($form[$name][LANGUAGE_NONE]['#type']) && in_array($form[$name][LANGUAGE_NONE]['#type'], array('checkboxes', 'radios'))) {
          	$form[$name][LANGUAGE_NONE]['#attributes']['class'][] = 'scrollable';
          }
		  	}
		  	// if closed vocabular, add + add term link to field
		  	$fdata = $form_state['field'][$name][LANGUAGE_NONE];
		  	if (($fdata['field']['type'] == 'taxonomy_term_reference')  && ($fdata['instance']['widget']['type'] == 'options_buttons')) {
		  		$vocab_name = $fdata['field']['settings']['allowed_values'][0]['vocabulary'];

		  	  $item = menu_get_item("admin/structure/taxonomy/$vocab_name/add");
			    if ($item['access']) {
			    	$form[$name][LANGUAGE_NONE]['#attributes']['class'][] = 'with-action-links';
			    	// TODO work out styling
			      $form[$name][LANGUAGE_NONE]['#field_suffix'] = '<ul class="action-linksx"><li>' . l('+ ' . t('Add term'), "admin/structure/taxonomy/$vocab_name/add", array('html' => TRUE, 'attributes' => array('target' => "_blank", 'class' => array('add-term-link')))) . '</li></ul>';
			      
			    }
		  	}
		  }
		}
		// move schedual
		if (isset($form['scheduler_settings'])) {
			unset($form['scheduler_settings']['#group']);
			unset($form['scheduler_settings']['#attached']);
			$form['scheduler_settings']['#title'] = $form['scheduler_settings']['publish_on']['#title'];
			unset($form['scheduler_settings']['publish_on']['#title']);
			$form['scheduler_settings']['#attributes']['class'][] = 'display_sidebar';	
			$form['scheduler_settings']['#weight'] = -10;
		}
		if (isset($form['metatags'])) {
			$form['metatags']['#weight'] = -20;
		}
	}
}

/**
 * Implements hook_views_default_views_alter()
 * @param $views
 */
function enterprise_base_views_default_views_alter(&$views) {
  // if enterprise_user app not enabled, remove first_name & last_name filtering
  if (isset($views['enterprise_user_admin'])) {
    if (!module_exists('enterprise_user')) {
      foreach ($views['enterprise_user_admin']->display AS $display_name => $display) {
        if (isset($display->display_options['filters']['field_firstname_value'])) {
          unset($views['enterprise_user_admin']->display[$display_name]->display_options['filters']['field_firstname_value']);
        }
        if (isset($display->display_options['filters']['field_lastname_value'])) {
          unset($views['enterprise_user_admin']->display[$display_name]->display_options['filters']['field_lastname_value']);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 * TODO: hack to get breadcrumbs working, develop a better api for this
 */
function enterprise_base_preprocess_page(&$variables) {
  $trail = drupal_get_breadcrumb();
  if (!empty($trail) && (strip_tags($trail[0]) == t('Home'))) {
    $path_pattern = '';
    $replacements = array();
    // Replace the leading Home crumb.
    if (isset($variables['node'])) {
      $entity = $variables['node'];
      $path_pattern = pathauto_pattern_load_by_entity('node', $entity->type);
    }
    else {
      $router_item = menu_get_item();
      // views page
      if((arg(0) != 'admin') && isset($router_item['page_callback']) && ($router_item['page_callback'] == 'views_page') && (isset($router_item['page_arguments'][1]))) {
        $view = views_get_view($router_item['page_arguments'][0]);
        $display = $router_item['page_arguments'][1];
        if (is_array($display)) {
          $display = array_shift($display);
        }
        //$view->display[$display]->display_options['filters']['field_firstname_value'];
      }
    }

    if ($path_pattern) {
      $ppa = explode('/', $path_pattern);
      foreach ($ppa  AS $i => $e) {
        if ($e == '[node:author]') {
          $author = user_load($entity->uid);
          $replacements[$i+1] = $name = isset($author->realname) ? $author->realname :  $author->name;
        }
      }
    }

    foreach ($replacements AS $i => $replacement) {
      if (isset($trail[$i])) {
        $trail[$i] = preg_replace('/\>(.*)<\/a>/', ">$replacement</a>", $trail[$i]);
      }
    }

    drupal_set_breadcrumb($trail);
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => drupal_get_breadcrumb()));
  }
}

/**
 * Implements hook_module_implements_alter()
 * @param $implementations
 * @param $hook
 */
function enterprise_base_module_implements_alter(&$implementations, $hook) {
  // disable jquery_update on rules pages (rules needs jquery 1.4.4)
  if ($hook == 'library_alter') {
    $uri = request_uri();
    if (strpos($uri,'admin/config/workflow/rules')>0){
      unset($implementations['jquery_update']);
    }
  }
}


/*
function jquery_update_jquery_path() {
  // Check whether we are to retrieve the minified version.
  $jquery_file = array(
    'none' => 'jquery.js',
    'min' => 'jquery.min.js',
  );
  $type = variable_get('jquery_update_compression_type', 'min');
  $curr_uri = request_uri();
  if (strpos($curr_uri,'admin')>0 || strpos($curr_uri,'edit')>0 || strpos($curr_uri,'add')>0){
    $path2 = drupal_get_path('module', 'jquery_update') .'/replace/jquery/1.3';
    return $path2 .'/'. $jquery_file[$type];
  }
  else {
    // Find the jQuery version to use.
    $version = variable_get('jquery_update_jquery_version', '1.3');
    $path = drupal_get_path('module', 'jquery_update') .'/replace/jquery/'. $version .'/';
    return $path . $jquery_file[$type];
  }
}
*/

function enterprise_base_get_context_view_info() {
  $info = &drupal_static(__FUNCTION__);
  if (isset($info)) {
    return $info;
  }
  $info = array();

  $router_item = menu_get_item();
  // determine context view and display
  // first check if current url is a view
  if((arg(0) != 'admin') && isset($router_item['page_callback']) &&  ($router_item['page_callback'] == 'views_page')) {
    //$view = views_page($router_item['page_arguments'][0], $router_item['page_arguments'][0]);
    $info['view'] = $view = views_get_view($router_item['page_arguments'][0]);
    //dsm($view);
    $display = $router_item['page_arguments'][1];
    if (is_array($display)) {
      $info['view_display'] = $display = array_shift($display);
    }
  }
  if (!isset($info['view'])) {
    return $info;
  }
  $info['path'] = !empty($view->display[$display]->display_options['path']) ? $view->display[$display]->display_options['path'] : '';
  $info['view_relationships'] = !empty($view->display['default']->display_options['relationships']) ? $view->display['default']->display_options['relationships'] : array();
  if (!empty($view->display[$display]->display_options['relationships'])) {
    $info['view_relationships'] = $view->display[$display]->display_options['relationships'];
  }
  $info['view_filters'] = !empty($view->display['default']->display_options['filters']) ? $view->display['default']->display_options['filters'] : array();
  if (!empty($view->display[$display]->display_options['filters'])) {
    $info['view_filters'] = $view->display[$display]->display_options['filters'];
  }
  $info['view_arguments'] = !empty($view->display['default']->display_options['arguments']) ? $view->display['default']->display_options['arguments'] : array();
  if (!empty($view->display[$display]->display_options['arguments'])) {
    $info['view_arguments'] = $view->display[$display]->display_options['arguments'];
  }
  //dsm($view);

  if (isset($info['view_filters']['type'])) {
    $info['entity_filter'] = array(
      'type' => $info['view_filters']['type']['table'],
    );
    if (!isset($info['view_filters']['type']['operator']) || ($info['view_filters']['type']['operator'] == 'in')) {
      $info['entity_filter']['bundle'] = array_shift($info['view_filters']['type']['value']);
    }
  }

  $info['taxonomy_filtargs'] = array();
  $info['field_filtargs'] = array();

  $arg_index = 0;
  foreach ($info['view_arguments'] as $key => $v) {
    if ($v['table'] == 'taxonomy_term_data') {
      $tname = $v['validate_options']['vocabularies'];
      $tname = array_pop($tname);
      $info['taxonomy_filtargs'][$tname] = array(
        'argument' => $v,
        'arg_index' => $arg_index,
        'name' => $tname,
        'vocab' => taxonomy_vocabulary_machine_name_load($tname),
      );
    }
    $arg_index++;
  }

  foreach ($info['view_filters'] as $key => $v) {

    // TODO taxonomy filter
    if (!empty($v['field'])) {
      $info['field_filtargs'][$v['field']] = array(
        'filter' => $v,
        'filt_index' => !empty($v['expose']['identifier']) ? $v['expose']['identifier'] : $v['field'],
        'name' => $v['field'],
        'exposed' => $v['exposed'],
      );
    }
    $arg_index++;
  }



  return $info;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function enterprise_base_block_info() {
  $blocks['views_taxonomy_filter'] = array(
    // info: The name of the block.
    'info' => t('Views Taxonomy Filter'),
    // Block caching options (per role, per user, etc.)
    // DRUPAL_CACHE_PER_ROLE is the default.
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function enterprise_base_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'views_taxonomy_filter':
      $block['subject'] = t('Filters');
      $block['content'] = enterprise_base_block_views_taxonomy_filter_view($delta);
      break;
  }
  return $block;
}

function enterprise_base_block_views_taxonomy_filter_view() {
  $info = enterprise_base_get_context_view_info();
  dsm($info);
  if (empty($info)) {
    return '';
  }

  $items = array();

  foreach ($info['taxonomy_filtargs'] as $v) {
    $query = db_select('taxonomy_term_data', 't')
      ->fields('t')
      ->condition('t.vid', $v['vocab']->vid)
    ;
    $alias = $query->innerJoin('taxonomy_index', 'ti', 't.tid = ti.tid');
    $query->addExpression('COUNT(ti.nid)', 'count');

    if (!empty($info['entity_filter']['type']) && $info['entity_filter']['type'] == 'node') {
      $alias2 = $query->innerJoin('node', 'n', 'ti.nid = n.nid');
      $query->condition('n.type', $info['entity_filter']['bundle']);
      $query->condition('n.status', NODE_PUBLISHED);
    }

    $query->groupBy('t.tid');

    $result = $query->execute();
    //dsm(" " . $query);

    //dsm($result);
    $vocab_name = $v['name'];
    $vitems = (object)array(
      'name' => $vocab_name,
      'title' => $v['vocab']->name,
      'count' => 0,
      'levels' => 1,
      'rows' => array(),
    );
    $url0 = $info['path'] . '/';
    $url1 = '';
    $count = 0;
    while($row = $result->fetchObject()) {
      $parents = taxonomy_get_parents($row->tid);
      if (!empty($parents)) {
        foreach ($parents as $p) {
          if (empty($vitems->rows[$p->tid])) {
            $vitems->rows[$p->tid] = (object)array(
              'title' => $p->name,
              'link' => l($p->name, $url0 . drupal_html_class($p->name) . $url1),
              'url' => $url0 . drupal_html_class($p->name) . $url1,
              'count' => 0,
              'rows' => array(),
            );
          }
          $vitems->rows[$p->tid]->rows[$row->tid] = (object)array(
            'title' => $row->name,
            'url' => $url0 . drupal_html_class($row->name) . $url1,
            'link' => l($row->name, $url0 . drupal_html_class($row->name) . $url1),
            'count' => $row->count,
          );
          $vitems->rows[$p->tid]->count += $row->count;
          $vitems->levels = 2;
        }
      }
      else {
        $vitems->rows[$row->tid] = (object)array(
          'title' => $row->name,
          'url' => $url0 . drupal_html_class($row->name) . $url1,
          'link' => l($row->name, $url0 . drupal_html_class($row->name) . $url1),
          'count' => $row->count,
        );
      }
      $vitems->count += $row->count;
      $count++;

      dsm($row);
      //dsm($parents);
    }
    $items[] = $vitems;
  }


  dsm($vitems);
  dsm($items);


  $out =  '';
  $vars = array(
    'sets' => $items,
    'options' => array(
      'count' => TRUE,
    ),
  );
  dsm($vars);
  $out .= theme('views_filter', $vars);
  return $out;
}

function enterprise_base_theme() {
  $themes = array();

  $themes['views_filter'] = array(
    'template' => 'templates/enterprise-base-views-filter',
    'variables' => array(
      'sets' => NULL,
      'options' => NULL,
    ),
  );

  $themes['views_filter_set'] = array(
    'template' => 'templates/enterprise-base-views-filter-set',
    'variables' => array(
      'rows' => NULL,
      'options' => NULL,
    ),
  );

  $themes['views_filter_view_summary'] = array(
    'template' => 'enterprise-style-views-view-summary',
    'path' => drupal_get_path('module', 'enterprise_style') . '/templates/list',
    'variables' => array(
      'rows' => NULL,
      'options' => NULL,
    ),
  );

  return $themes;
}

function enterprise_base_preprocess_views_filter(&$vars) {
  //dsm($vars);
  $sets = &$vars['sets'];
  foreach ($sets as $id => $set) {
    if (!empty($set->rows)) {
      $vars2 = (array)$set;
      if (!isset($vars2['options'])) {
        $vars2['options'] = array();
      }
      $vars2['options'] += $vars['options'];
      //dsm($vars2);
      $sets[$id]->markup = theme('views_filter_set', $vars2);
    }
  }

  //dsm($vars);
}

function enterprise_base_preprocess_views_filter_set(&$vars) {
  //dsm($vars);
  $rows = &$vars['rows'];
  foreach ($rows as $id => $row) {
    if (!empty($row->rows)) {
      $rows[$id]->sub_items = theme('views_filter_view_summary', array('rows' => $row->rows, 'options' => $vars['options']));
    }
    if ($vars['levels'] == 2) {
      $rows[$id]->link = "- " . $rows[$id]->link;
    }
  }
  enterprise_style_preprocess_views_view_summary($vars);
  dsm($vars);
}

function enterprise_base_preprocess_views_filter_view_summary(&$vars) {
  enterprise_style_preprocess_views_view_summary($vars);
}