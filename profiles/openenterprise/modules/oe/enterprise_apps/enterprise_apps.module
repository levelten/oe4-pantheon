<?php
/**
 * @file
 * Code for the Enterprise CRM feature.
 */


function enterprise_apps_menu() {
  $items = array();

  $items['enterprise_apps/config_app'] = array(
    'title' => 'Config app',
    'page callback' => 'enterprise_apps_config_app_page',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );

  $items['enterprise_apps/deploy_add'] = array(
    'title' => 'Deploy add',
    'page callback' => 'enterprise_apps_deploy_add_to_plan',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );
  $items['enterprise_apps/deploy_del'] = array(
    'title' => 'Deploy delete',
    'page callback' => 'enterprise_apps_deploy_delete_from_plan',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );
  $items['enterprise_apps/init'] = array(
    'title' => 'Enterprise demo init',
    'page callback' => 'enterprise_demo_init_app',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );
  $items['enterprise_apps/profile_data_export'] = array(
    'title' => 'Profile data export',
    'page callback' => 'enterprise_apps_profile_data_export',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'file' => 'enterprise_apps.profile.inc',
    'type' => MENU_CALLBACK,
  );
  $items['enterprise_apps/util'] = array(
    'title' => 'Enterprise Apps util',
    'page callback' => 'enterprise_apps_util',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

// deploy_manager_add_to_plan()
function enterprise_apps_util() {

  $profile = drupal_get_profile();
  dsm($profile);

  $options = array(
    'pkey' => '168596',
    'apikey' => 'e67e82b2bd029a000f9302d32674118b',
    'apiUrl' => 'getcm2.localhost:8082/api/v1',
  );
  $message = '';
  try {
    $property = openenterprise_api_property_load($options, $message);
  }
  catch (Exception $e) {
    dsm($e);
    return;
  }
  dsm($property);

  return '';

  $p = enterprise_editor_available_plugins();
  dsm($p);

  return '';
}

function enterprise_apps_config_app_page($app) {
  if (!isset($app)) {
    drupal_set_message('No app name provided. Please add an app name to the url.', 'error');
    return '';
  }
  enterprise_apps_config_app($app);

  return t('OK');
}

// entity_types: node, user, taxonomy_term, file, bean, cta
function enterprise_apps_deploy_add_to_plan($plan, $entity_type, $uuid) {
 // $entities = entity_uuid_load('taxonomy_term', array('87755497-3e33-4637-b9fb-c2e2bb61782f'));
  // 70bfeb95-e156-40eb-9b9b-283af20a9820

  if (!isset($plan) || !isset($entity_type) || !isset($uuid) ) {
    drupal_set_message('Input missing. Provide a deployment plan, entity type and uuid using the url pattern plan/entity_type/uuid', 'error');
    return '';
  }
  $entities = entity_uuid_load($entity_type, array($uuid));
  $entity = array_shift($entities);
  deploy_manager_add_to_plan($plan, $entity_type, $entity);

  drupal_set_message(t('@type @title was added to @plan',
    array(
      '@type' => $entity_type,
      '@title' => $entity->title,
      '@plan' => $plan,
    )
  ));

  return t('OK');
}

function enterprise_apps_deploy_delete_from_plan($plan, $entity_type, $uuid) {
  // $entities = entity_uuid_load('taxonomy_term', array('87755497-3e33-4637-b9fb-c2e2bb61782f'));
  // 70bfeb95-e156-40eb-9b9b-283af20a9820

  if (!isset($plan) || !isset($entity_type) || !isset($uuid) ) {
    drupal_set_message('Input missing. Provide a deployment plan, entity type and uuid using the url pattern plan/entity_type/uuid', 'error');
    return '';
  }
  $entities = entity_uuid_load($entity_type, array($uuid));
  $entity = array_shift($entities);
  deploy_manager_delete_from_plan($plan, $entity_type, $entity);

  drupal_set_message(t('@type @title was deleted from @plan',
    array(
      '@type' => $entity_type,
      '@title' => $entity->title,
      '@plan' => $plan,
    )
  ));

  return t('OK');
}

function enterprise_apps_prevent_app_enabled_hook($value = null) {
  if (isset($value)) {
    $_SESSION['enterprise_apps_prevent_app_enabled_hook'] = $value;
  }
  return isset($_SESSION['enterprise_apps_prevent_app_enabled_hook']) ? $_SESSION['enterprise_apps_prevent_app_enabled_hook'] : FALSE;
}

function _enterprise_apps_prevent_app_enabled_hook_batch($value = null, &$context) {
  enterprise_apps_prevent_app_enabled_hook($value);
  $context['results'][] = TRUE;
  if ($value) {
    $context['message'] = st('Enabling app auto config.');
  }
  else {
    $context['message'] = st('Disabling app auto config.');
  }
}

function enterprise_apps_module_files_exist($module) {
  $query = db_select('system', 's')
    ->fields('s')
    ->condition('name', $module);
  $data = $query->execute()->fetchObject();
  if (!empty($data->filename)) {
    return $data;
  }
  return FALSE;
}

/**
 * Implements hook_modules_enabled()
 * @param $modules
 */
function enterprise_apps_modules_enabled($modules) {
 // dsm('enterprise_apps_modules_enabled');dsm($modules);
  $prevent = enterprise_apps_prevent_app_enabled_hook();
  if ($prevent) {
    //dsm('prevent set');
    return;
  }
  else {
    //dsm('prevent set not set');
  }
  // determine modules implementing app_enable hook
  $implements = array();
  foreach ($modules AS $module) {
    $func = $module . '_enterprise_apps_app_enabled';
    if (function_exists($func)) {
      $implements[] = $func;
    }
  }
  // modules_enabled executes before features_api, clear caches is used to force
  // features components to be built before executing app_enabled hook
  if (count($implements)) {
    drupal_flush_all_caches();
    foreach ($implements AS $func) {
      $func();
    }
  }
}

/**
 * Implements hook_module_implements_alter()
 * @param $implementations
 * @param $hook
 */
function enterprise_apps_module_implements_alter(&$implementations, $hook) {
  if ($hook != 'modules_enabled') {
    return;
  }
  $module = 'enterprise_apps';
  $group = array($module => $implementations[$module]);
  unset($implementations[$module]);
  $implementations = $group + $implementations;
}

function enterprise_apps_config_info_all() {
  $config_info = &drupal_static(__FUNCTION__);
  if (isset($config_info)) {
    return $config_info;
  }
  // Select the module-defined sets.
  foreach (module_implements('enterprise_apps_config_info') as $module) {
    $ci = module_invoke($module, 'enterprise_apps_config_info');
//dsm($ci);
    foreach ($ci AS $app_name => $mod_ci) {
      // correct views block names if view name more than 32 chars
      if (isset($mod_ci['blocks']) && is_array($mod_ci['blocks'])) {
        foreach ($mod_ci['blocks'] AS $bname => $bci) {
          list($bmod, $delta) = explode(':', $bname);
          if (($bmod == 'views') && (strlen($delta) >= 32)) {
            $delta = md5($delta);
          }
          $mod_ci['blocks'][$bname]['module'] = $bmod;
          $mod_ci['blocks'][$bname]['delta'] = $delta;
        }
      }
      $config_info[$app_name] = $mod_ci;
      //$config_info[$module]['name'] = $name;
      //$config_info[$module]['module'] = $module;
    }
  }

  drupal_alter('enterprise_apps_config_info', $config_info);
  return $config_info;
}

function enterprise_apps_config_info($app_name) {
  $ci = enterprise_apps_config_info_all();
  return (isset($ci[$app_name])) ? $ci[$app_name] : FALSE;
}

function enterprise_apps_config_settings_all() {
  $settings = &drupal_static(__FUNCTION__);
  if (isset($settings)) {
    return $settings;
  }

  $settings = array();
  // process settings (defaults in config_info)
  $config_infos = enterprise_apps_config_info_all();
  if (!empty($config_infos) && is_array($config_infos)) {
    foreach ($config_infos AS $app_name => $config_info) {
      if (!empty($config_info['blocks']) && is_array($config_info['blocks'])) {
        $settings[$app_name]['blocks'] = array();
        foreach ($config_info['blocks'] AS $block_name => $ci_block) {
          if (isset($ci_block['default'])) {
            $settings[$app_name]['blocks'][$block_name] = $ci_block['default'];
            list($bmod, $delta) = explode(':', $block_name);
            if (($bmod == 'views') && (strlen($delta) >= 32)) {
              $delta = md5($delta);
            }
            $settings[$app_name]['blocks'][$block_name]['module'] = $bmod;
            $settings[$app_name]['blocks'][$block_name]['delta'] = $delta;
          }
        }
      }
      if (isset($config_info['nodes']) && is_array($config_info['nodes'])) {
        $settings['nodes'] = array();
        foreach ($config_info['nodes'] AS $name => $ci_node) {
          if (isset($ci_node['default'])) {
            $settings[$app_name]['nodes'][$name] = $ci_node['default'];
          }
        }
      }
      if (isset($config_info['menus']) && is_array($config_info['menus'])) {
        $settings['menus'] = array();
        foreach ($config_info['menus'] AS $name => $ci_menu) {
          if (isset($ci_menu['default'])) {
            $settings[$app_name]['menus'][$name] = $ci_menu['default'];
          }
        }
      }
    }
  }

  // Process settings in hook_enterprise_apps_config_settings
  foreach (module_implements('enterprise_apps_config_settings') as $module) {
    $ci = module_invoke($module, 'enterprise_apps_config_settings');
    if (empty($ci)) {
      continue;
    }
    foreach ($ci AS $app_name => $mod_ci) {
      // correct views block names if view name more than 32 chars
      if (isset($mod_ci['blocks']) && is_array($mod_ci['blocks'])) {
        foreach ($mod_ci['blocks'] AS $bname => $bci) {
          list($bmod, $delta) = explode(':', $bname);
          if (($bmod == 'views') && (strlen($delta) >= 32)) {
            $delta = md5($delta);
          }
          $mod_ci['blocks'][$bname]['module'] = $bmod;
          $mod_ci['blocks'][$bname]['delta'] = $delta;
        }
      }
      if (!isset($settings[$app_name])) {
        $settings[$app_name] = array();
      }
      $settings[$app_name] = drupal_array_merge_deep($settings[$app_name], $mod_ci);
    }
  }

  drupal_alter('enterprise_apps_config_settings', $settings);
  return $settings;
}

function enterprise_apps_config_settings($app_name) {
  $cs = enterprise_apps_config_settings_all();
  return (isset($cs[$app_name])) ? $cs[$app_name] : FALSE;
}

/**
 * Configures an app using default config info
 * @param $app_name
 */
function enterprise_apps_config_app($app_name, $config_settings = null) {
  $config_info = enterprise_apps_config_info($app_name);
  // if settings not passed as arg, load defaults
  if (!isset($config_settings)) {
    $config_settings = enterprise_apps_config_settings($app_name);
  }
//dsm($config_info);
//dsm($config_settings);
  enterprise_apps_config_blocks($config_settings, $config_info);
  enterprise_apps_config_nodes($config_settings, $config_info);
  enterprise_apps_config_menus($config_settings, $config_info);
  enterprise_apps_config_variables($config_settings, $config_info);
  enterprise_apps_config_cta_selectors($config_settings, $config_info);

  // clear all caches just in case
  menu_cache_clear_all();
}

function enterprise_apps_config_form($form, &$form_state, $config_info) {
  //drupal_add_css(drupal_get_path('module', 'enterprise_config') . '/css/enterprise_config.admin.css');

  //dsm($config_info);

  $form['app_config_info'] = array(
    '#type' => 'value',
    '#value' => $config_info,
  );

  $form['#tree'] = TRUE;

  $form = enterprise_apps_config_form_blocks($form, $form_state, $config_info);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  // Use the default block admin form submit.
  //$form['#submit'][] = 'enterprise_config_apps_structures_blocks_form_submit';
  //$form['#submit'][] = 'block_admin_display_form_submit';
  //dsm($form);
  return $form;
}

function enterprise_apps_config_form_blocks($form, &$form_state, $config_info) {
  $form['blocks'] = array();
  $theme = variable_get('theme_default', 'bartik');

  $form['blocks']['theme'] = array(
    '#type' => 'value',
    '#value' => $theme,
  );
  // Fetch and sort blocks.
  require_once(drupal_get_path('module', 'block') . '/block.admin.inc');
  $app_block_keys = array();
  foreach ($config_info['blocks'] AS $ci_block_name => $ci_block) {
    $app_block_keys[$ci_block['module'] . ':' . $ci_block['delta']] = $ci_block_name;
  }
  $blocks = block_admin_display_prepare_blocks($theme);
  $app_blocks = array();
  foreach($blocks as $block) {
    if (isset($app_block_keys[$block['module'] . ':' . $block['delta']])) {
      $block['config_info_name'] = $app_block_keys[$block['module'] . ':' . $block['delta']];
      $app_blocks[] = $block;
    }
  }


  $block_regions = system_region_list($theme);

  //dsm($blocks);
  //dsm($app_block_keys);
  //dsm($config_info);
  //dsm($app_blocks);
  //dsm($theme);
  //dsm($block_regions);

  foreach ($app_blocks as $i => $block) {
    $config_info_name = $block['config_info_name'];
    $key = $block['module'] . '_' . $block['delta'];

    $ci_block = $config_info['blocks'][$block['config_info_name']];
    $block['node_types'] = db_query("SELECT type FROM {block_node_type} WHERE module = :module AND delta = :delta", array(
      ':module' => $block['module'],
      ':delta' => $block['delta'],
    ))->fetchCol();

    $result = db_query("SELECT * FROM {block_views} WHERE module = :module AND delta = :delta", array(
      ':module' => $block['module'],
      ':delta' => $block['delta'],
    ))->fetchAll();
    $block['views'] = array();
    if (is_array($result)) {
      foreach ($result AS $row) {
        $block['views'][] = "$row->view:$row->display";
      }
    }

    $block['pages_array'] = array();
    if (trim($block['pages'])) {
      $block['pages_array'] = explode("\n", $block['pages']);
    }

    $form['blocks'][$key] = array(
      '#type' => 'fieldset',
      '#title' => t('@block', array('@block' => $block['info'])),
      '#description' =>  isset($app_blocks_struc['description']) ? $app_blocks_struc['description'] : '',
    );
    $form['blocks'][$key]['block'] = array(
      '#type' => 'value',
      '#value' => $block,
    );
    $suffix = '';
    $default = '';
    if (($block['region'] == BLOCK_REGION_NONE) && isset($ci_block['default']['region'])) {
      foreach ($ci_block['default']['region'] AS $region) {
        if (isset($block_regions[$region])) {
          $default = $region;
          $suffix = ' ' . t('(currently hidden)');
          break;
        }
      }
    }
    else {
      $default = $block['region'] != BLOCK_REGION_NONE ? $block['region'] : NULL;
    }
    $form['blocks'][$key]['region'] = array(
      '#type' => 'select',
      '#default_value' => $default,
      '#empty_value' => BLOCK_REGION_NONE,
      '#title' => t('Region'),
      '#options' => $block_regions,
      '#field_suffix' => $suffix,
    );
    $options = array();
    $defaults = array();
    $checks = array('path', 'node_type', 'views');
    $custom = $block;
    // look through ci_block visibility settings and diff with existing block settings
    // store existing block settings in custom visibility preset
    if (isset($ci_block['visibility_preset']) && !empty($ci_block['visibility_preset'])) {
      foreach ($ci_block['visibility_preset'] AS $k => $b) {
        $options[$k] = $b['title'];
        $b += array(
          'path' => array(
            'pages' => array(),
            'visibility' => 0,
          ),
          'node_type' => array(
            'types' => array(),
          ),
          'views' => array(
            'views' => array(),
          ),
        );
        $bc = $b;

        if (($b['path']['visibility'] == $block['visibility'])) {
          foreach ($block['pages_array'] AS $i => $page) {
            if ($bci = array_search($page, $b['path']['pages'])) {
              unset($bc['path']['pages'][$bci]);
              unset($custom['pages'][$i]);
            }
          }
        }
        foreach ($block['node_types'] AS $i => $type) {
          //dsm($type);
          $bci = array_search($type, $b['node_type']['types']);
          if ($bci !== FALSE) {
            //dsm($bci);
            unset($bc['node_type']['types'][$bci]);
            unset($custom['node_types'][$i]);
          }
        }
        foreach ($block['views'] AS $i => $view) {
          $bci = array_search($view, $b['views']['views']);
          if ($bci !== FALSE) {
            unset($bc['views']['views'][$bci]);
            unset($custom['views'][$i]);
          }
        }

        //dsm($bc);
        if (empty($bc['path']['pages']) && empty($bc['node_type']['types']) && empty($bc['views']['views'])) {
          $defaults[] = $k;
        }
      }
      //dsm($custom);
      //dsm($options);
      $description_extra = '';
      if (!empty($custom['pages_array'])|| !empty($custom['node_types']) || !empty($custom['views'])) {
        $options['custom'] = t('Keep existing custom settings');
        $defaults[] = 'custom';
        $custom_preset = array(
          'path' => array(
            'pages' => $custom['pages_array'],
            'visibility' => 0,
          ),
          'node_type' => array(
            'types' => $custom['node_types'],
          ),
          'views' => array(
            'views' => $custom['views'],
          ),
        );

        // add custom settings to app_config to preserve
        $form['app_config_info']['#value']['blocks'][$config_info_name]['visibility_preset']['custom'] = $custom_preset;
        $description_extra = ' ' . t('There are some existing custom visibility settings. These settings may conflict with presets. To keep the existing settings leave "Keep existing..." option selected.');
      }
      if ($block['region'] == -1 && isset($ci_block['default']['visibility_preset'])) {
        $defaults = $ci_block['default']['visibility_preset'];
      }
      $description_extra .= ' ' . t('For advanced settings see the !link.',
          array(
            '!link' => l(t('block configure form'), 'admin/structure/block/manage/' . $block['module'] . '/' . $block['delta'] . '/configure', array('attributes' => array('target' =>  '_blank'))),
          )
        );
      $form['blocks'][$key]['visibility_presets'] = array(
        '#type' => 'checkboxes',
        '#default_value' => $defaults,
        '#title' => t('Visibility'),
        '#options' => $options,
        '#description' => t('Use the check boxes to display the block only on specific pages within your site. Leave all selections unchecked to show on all pages.') . $description_extra,
        '#attributes' => array(
          'class' => array('scrollable'),
        )
      );
      $form['blocks'][$key]['visibility_presets_default'] = array(
        '#type' => 'value',
        '#value' => $defaults,
      );
    }

  }
  if (isset($form['blocks']) && count($form['blocks'])) {
    $form['blocks'] += array(
      '#type' => 'fieldset',
      '#title' => t('Blocks config'),
      '#description' => t('Configure placement of app blocks.'),
      '#collapsible' => FALSE,
    );
  }
  return $form;
}

function enterprise_apps_config_form_validate($form, &$form_state) {

}

function enterprise_apps_config_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $config_info = $values['app_config_info'];
  //dsm($values);
  //dsm($config_info);

  $config_settings = array();

  if (isset($values['blocks']) && is_array($values['blocks'])) {
    $config_settings['blocks'] = array(
      'theme' => $values['blocks']['theme'],
    );
    foreach ($values['blocks'] AS $name => $block) {
      if (!is_array($block) || !isset($block['block'])) {
        continue;
      }
      $ci_name = $block['block']['config_info_name'];
      $config_settings['blocks'][$ci_name] = array(
        'region' => array($block['region']),
        'visibility_presets' => array(),
      );
      foreach ($block['visibility_presets'] AS $k => $v) {
        if ($v) {
          $config_settings['blocks'][$ci_name]['visibility_presets'][] = $k;
        }
      }
    }
  }

  //dsm($config_settings);
  //dsm($config_info);

  enterprise_apps_config_blocks($config_settings, $config_info);

}

function enterprise_apps_config_blocks($config_settings, $config_info) {
//dsm($config_settings);
//dsm($config_info);
  if (!isset($config_settings['blocks'])) {
    return;
  }
  //$theme = (isset($config_settings['blocks']['themes'])) ? $config_settings['blocks']['themes'] : variable_get('theme_default', NULL);
  //$block_regions = system_region_list($theme);

  // build array of enabled themes and their regions
  $themes = array();
  //$theme_list = list_themes(TRUE);
  // for some reason list_themes does not show themes enabled during install,
  // so using custom query
  $query = db_select('system', 's')
    ->fields('s')
    ->condition('type', 'theme')
    ->condition('status', 1);
  $theme_list = $query->execute()->fetchAllAssoc('name');

  foreach ($theme_list AS $name => $theme) {
    if ($theme->status) {
      $regions = system_region_list($name);
      $themes[$name] = $regions;
    }
  }

  foreach ($config_settings['blocks'] AS $name => $settings) {
    $ci_block = isset($config_info['blocks'][$name]) ? $config_info['blocks'][$name] : array();

    foreach ($themes AS $theme => $block_regions) {
      // get current block if it exists
      //$block0 = block_load($settings['module'], $settings['delta']);
      $query = db_select('block', 'b')
        ->fields('b')
        ->condition('module', $settings['module'])
        ->condition('delta', $settings['delta'])
        ->condition('theme', $theme);
      $block0 = $query->execute()->fetchObject();
      $region = isset($block0->region) ? $block0->region : -1;
      // iterative through possible regions to find one in the theme
      if (isset($settings['regions']) && is_array($settings['regions'])) {
        foreach ($settings['regions'] AS $region_name) {
          if (isset($block_regions[$region_name])) {
            $region = $region_name;
            break;
          }
        }
      }
      else if (isset($settings['regions']) && ($settings['regions'] == -1)) {
        $region = -1;
      }

      $weight = 0;
      $visibility = 0;
      $pages = array();
      $types = array();
      $views = array();
      $block_row = array();

      // add any existing block settings
      if (isset($block0->visibility)) {
        $weight = $block0->weight;
        $visibility = $block0->visibility;
        $pages = drupal_map_assoc(explode(PHP_EOL, $block0->pages));
        $types = drupal_map_assoc(enterprise_apps_block_node_types($settings['module'], $settings['delta']));
        $views = drupal_map_assoc(enterprise_apps_block_views($settings['module'], $settings['delta']));
        $blk = (object) $settings;
        $block_row = (array)block_row($blk);
      }
  //dsm($types);

      // process direct settings
      $weight = isset($settings['weight']) ? $settings['weight'] : $weight;
      $visibility = isset($settings['path']['visibility']) ? $settings['path']['visibility'] : $visibility;
      if (isset($settings['path']['pages'])) {
        $pages = drupal_map_assoc($settings['path']['pages']) + $pages;
      }
      if (isset($settings['node_type']['types'])) {
        $types = drupal_map_assoc($settings['node_type']['types'] + $types);
      }
      if (isset($settings['views']['views'])) {
        $views = drupal_map_assoc($settings['views']['views'] + $views);
      }
      if (isset($settings['block_row'])) {
        $block_row += $settings['block_row'];
      }

      // process any preset settings
      if (isset($settings['visibility_presets']) && is_array($settings['visibility_presets'])) {
        foreach ($settings['visibility_presets'] AS $preset_name) {
          if (isset($ci_block['visibility_presets'][$preset_name])) {
            $preset = $ci_block['visibility_presets'][$preset_name];
          }
          else {
            $preset = array();
          }
  //dsm($preset_name);
  //dsm($preset);

          $preset += array(
            'path' => array(
              'pages' => array(),
              'visibility' => 0,
            ),
            'node_type' => array(
              'types' => array(),
            ),
            'views' => array(
              'views' => array(),
            ),
          );
          $visibility = $preset['path']['visibility'];
          foreach ($preset['path']['pages'] AS $page) {
            $pages[$page] = $page;
          }
          foreach ($preset['node_type']['types'] AS $type) {
            $types[$type] = $type;
          }
          foreach ($preset['views']['views'] AS $view) {
            $views[$view] = $view;
          }
        }
      }

  //dsm($ci_block);
  //dsm($settings);
  //dsm($pages);
  //dsm($types);
  //dsm($views);

      $title = isset($block0->title) ? $block0->title : '';
      if (isset($settings['title'])) {
        $title = $settings['title'];
      }
      $custom = isset($block0->custom) ? $block0->custom : 0;
      if (isset($settings['custom'])) {
        $custom = $settings['custom'];
      }
      $fields = array(
        'title' => $title,
        'region' => ($region) ? $region : -1,
        'status' => ($region) ? 1 : 0,
        'visibility' => (int) $visibility,
        'pages' => implode(PHP_EOL, $pages),
        'custom' => $custom,
        'weight' => $weight,
      );

      if (module_exists('css_class')) {
        if (isset($settings['css_class'])) {
          $fields['css_class'] = $settings['css_class'];
        }
      }

      $key = array(
        'module' => $settings['module'],
        'delta' => $settings['delta'],
        'theme' => $theme,
      );
      $query = db_merge('block')
        ->key($key)
        ->fields($fields);
  //dsm(" " . $query);
      $query->execute();

      db_delete('block_node_type')
        ->condition('module', $settings['module'])
        ->condition('delta', $settings['delta'])
        ->execute();
      foreach ($types AS $i => $type) {
        $fields = array(
          'module' => $settings['module'],
          'delta' => $settings['delta'],
          'type' => $type,
        );
        db_insert('block_node_type')
          ->fields($fields)
          ->execute();
      }

      db_delete('block_views')
        ->condition('module', $settings['module'])
        ->condition('delta', $settings['delta'])
        ->execute();
      foreach ($views AS $i => $viewdis) {
        list($view, $display) = explode(':', $viewdis);
        $fields = array(
          'module' => $settings['module'],
          'delta' => $settings['delta'],
          'view' => $view,
          'display' => $display,
        );
        db_insert('block_views')
          ->fields($fields)
          ->execute();
      }

      if (module_exists('block_row')) {
        db_delete('block_row')
          ->condition('module', $settings['module'])
          ->condition('delta', $settings['delta'])
          ->execute();
        if (!empty($block_row['row']) || !empty($block_row['row_class'])) {
          $fields = array(
            'module' => $settings['module'],
            'delta' => $settings['delta'],
            'row' => isset($block_row['row']) ? $block_row['row'] : '',
            'row_class' => isset($block_row['row_class']) ? $block_row['row_class'] : '',
          );
          db_insert('block_row')
            ->fields($fields)
            ->execute();
        }
      }
    }
  }
}

function enterprise_apps_block_node_types($module, $delta) {
  $query = db_select('block_node_type', 'b');
  $query->addField('b', 'type');
  $query->condition('module', $module);
  $query->condition('delta', $delta);
  $types = $query->execute()->fetchCol();
  return $types;
}

function enterprise_apps_block_views($module, $delta) {
  $query = db_select('block_views', 'b');
  $query->fields('b');
  $query->condition('module', $module);
  $query->condition('delta', $delta);
  $result = $query->execute();
  $views = array();
  while ($row = $result->fetchObject()) {
    $view = "$row->view:$row->display";
    $views[] = $view;
  }
  return $views;
}

function enterprise_apps_config_nodes($config_settings, $config_info) {
//dsm($config_settings);
//dsm($config_info);
  if (!isset($config_info['nodes']) && !isset($config_settings['nodes'])) {
    return;
  }

  $entity_infos = entity_get_info();
//dsm($entity_infos);

  foreach ($config_settings['nodes'] AS $uuid => $settings) {
    $ci_node = isset($config_info['nodes'][$uuid]) ? $config_info['nodes'][$uuid] : array();

    $node = enterprise_apps_node_load_by_uuid($uuid);

    // skip if node not found
    if (empty($node->nid)) {
      continue;
    }
//dsm($node);
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $lang = $node->language;

    // translate uuids in fields
    $instance_infos = field_info_instances('node', $node->type);

    // fields must be handled differently
    foreach ($settings AS $setting_name => $setting_value) {
      // check if setting is a field
      if (!isset($instance_infos[$setting_name])) {
        continue;
      }
//dsm($instance_infos[$setting_name]);
      $field_info = field_info_field($setting_name);
//dsm($field_info);
      if ($field_info['type'] == 'taxonomy_term_reference') {

        foreach ($setting_value[$lang] AS $i => $value) {
          $id = entity_get_id_by_uuid('taxonomy_term', array($value['tid']));
          $setting_value[$lang][$i]['tid'] = $id[$value['tid']];
        }
        if ($field_info['cardinality'] == 1) {
          $node->{$setting_name}[$lang][0] = $setting_value[$lang][0];
        }
        // TODO this is setup as an override, not sure if merge is better
        else {
          $node->{$setting_name}[$lang] = $setting_value[$lang];
        }
        // remove setting so it is not processed by the final merge
        unset($settings[$setting_name]);
//dsm($setting_value);

      }
      // TODO
      else if ($field_info['type'] == 'entity_reference') {

      }
    }

    // special processing for webform content type
    if (isset($settings['webform'])) {
      if (isset($settings['webform']['components'])
       && isset($node->webform['components'])
      ) {
        // gather all existing form_keys to prevent duplication
        $existing_keys = array();
        foreach ($node->webform['components'] AS $comp) {
          $existing_keys[] = $comp['form_key'];
        }
        foreach ($settings['webform']['components'] AS $i => $comp) {
          // check if key already exists, skip if it does
          if (in_array($comp['form_key'], $existing_keys)) {
            continue;
          }
          $cid = max(array_keys($node->webform['components'])) + 1;
          $comp['cid'] = $cid;
          $comp['nid'] = $node->nid;
          $node->webform['components'][$cid] = $comp;
          // save to existing keys
          $existing_keys[] = $comp['form_key'];
        }
        // clear webform components so they are not included in array_merge
        unset($settings['webform']['components']);
      }
    }

    //$menu_item = menu_get_item('node/' . $node->nid);
//dsm($menu_item);

    if (isset($settings['menu'])) {
      $node->menu = $settings['menu'];
      // if menu enabled not set and menu name exists, set the enable flag
      if (!isset($settings['menu']['enabled']) && !empty($settings['menu']['menu_name'])) {
        $node->menu['enabled'] = 1;
      }
      if (empty($settings['menu']['link_title'])) {
        $node->menu['link_title'] = $node->title;
      }
      if (empty($settings['menu']['weight'])) {
        $node->menu['weight'] = 0;
      }
      if (empty($settings['menu']['description'])) {
        $node->menu['description'] = '';
      }
      // hack to prevent warning from entity module
      $node->menu['module'] = 'enterprise_apps';
      if (isset($settings['parent_uuid'])) {
        $parent_node = enterprise_apps_node_load_by_uuid($settings['parent_uuid']);
        //dsm($parent_node);
      }
      unset($settings['menu']);
    }

    // merge values in
    $node = (object) drupal_array_merge_deep($node, $settings);
//dsm($node);
    node_save($node);
  }


}

function enterprise_apps_parse_ukey($ukey) {
  $desc = array();
  $ukeys = explode(':', $ukey);
  if ($ukeys[0] == 'app' || ($ukeys[0] == 'section')) {
    $app_name = ($ukeys[0] == 'section') ? 'enterprise_' . $ukeys[1] : $ukeys[1];
    $desc['type'] = 'view';
    $desc['alias_type'] = 'app';
    $desc['app_name'] = $app_name;
    $desc['view_name'] = $app_name;
    $desc['display_name'] = isset($ukeys[2]) ? $ukeys[2] : 'page';
  }
  else if (($ukeys[0] == 'views') || ($ukeys[0] == 'view')) {
    $desc['type'] = 'view';
    $desc['view_name'] = $ukeys[1];
    if (isset($ukeys[2])) {
      $desc['display_name'] = $ukeys[2];
    }
  }
  else if ($ukeys[0] == 'block') {
    $desc['type'] = 'block';
    $desc['module'] = $ukeys[1];
    $desc['delta'] = $ukeys[2];
  }
  else if ($ukeys[0] == 'entity') {
    $desc['entity'] = TRUE;

    // pop first element off
    array_shift($ukeys);

  }
  if ($ukeys[0] == 'node') {
    $desc['type'] = 'node';
    $desc['uuid'] = $ukeys[1];
  }
  else if ($ukeys[0] == 'user') {
    $desc['type'] = 'user';
    $desc['uuid'] = $ukeys[1];
  }

  return $desc;
}

function enterprise_apps_obj_load_by_ukey($ukey, &$desc = array()) {
  $desc = enterprise_apps_parse_ukey($ukey);

  if ($desc['type'] == 'node') {
    $obj = enterprise_apps_node_load_by_uuid($desc['uuid']);
  }
  if ($desc['type'] == 'view') {
    $obj = views_get_view($desc['view_name']);
    //if (isset($desc['display_name'])) {
    //  $obj = $obj->display[$desc['display_name']];
    //}
  }
  if (!empty($obj)) {
    return $obj;
  }
  return FALSE;
}

function enterprise_apps_node_load_by_uuid($uuid) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('uuid', $uuid);
  $nid = $query->execute()->fetchField();
  if (!$nid) {
    return FALSE;
  }
  $node = node_load($nid);
  return $node;
}

function enterprise_apps_config_menus($config_settings, $config_info) {
  //dsm($config_settings);
  //dsm($config_info);
  if (!isset($config_settings['menus'])) {
    return;
  }

  foreach ($config_settings['menus'] AS $menu_name => $ci_menu) {
    $menu_link_defaults = array(
      'menu_name' => $menu_name,
      'weight' => 0,
      'module' => 'menu',
    );
    foreach ($config_settings['menus'][$menu_name] AS $path_key => $settings) {
      // init menu_link with settings
      $menu_link = $settings;
      $link_path = '';
      $link_module = 'menu';

      $path_ukey_desc = '';
      $obj = enterprise_apps_obj_load_by_ukey($path_key, $path_ukey_desc);
      // if linked to object does not exist, skip menu link add
      if (empty($obj)) {
        continue;
      }
if ($path_key == 'view:enterprise_users:page' || $path_key == 'app:enterprise_press') {
  //dsm("$menu_name:$path_key");
  //dsm($obj);
  //dsm($path_ukey_desc);
}

      if ($path_ukey_desc['type'] == 'node') {
        $link_path  = 'node/' . $obj->nid;
        $menu_link += array(
          'link_title' => $obj->title,
        );
      }
      if ($path_ukey_desc['type'] == 'view') {
        $display = $obj->display[$path_ukey_desc['display_name']];
        $display_title = isset($display->display_options['title']) ? $display->display_options['title'] : '';
        // if display does not have title, check the default title
        if (!$display_title) {
          $display_title = isset($obj->display['default']->display_options['title']) ? $obj->display['default']->display_options['title'] : '';
        }
        $link_path = $display->display_options['path'];
        $link_module = 'system';
        $views_menu = array();
        // process views menu specific settings
        if (isset($menu_link['views_menu'])) {
          $views_menu += $menu_link['views_menu'];
          unset($menu_link ['views_menu']);
        }
        // TODO not sure if we need to save the views menu item anymore
        $views_menu = array(
          'type' => 'normal',
          'title' => isset($settings['link_title']) ? $settings['link_title'] : $display_title,
          'description' => isset($settings['description']) ? $settings['description'] : '',
          'name' => $menu_name,
          'weight' => isset($settings['weight']) ? $settings['weight'] : 0,
          'context' => 0,
          'context_only_inline' => 0,
        );
        // set menu data on views display and save
        $obj->display[$path_ukey_desc['display_name']]->display_options['menu'] = $views_menu;
        $obj->save();

        $menu_link += array(
          'link_title' => $display_title,
        );

      }
      if (!$link_path) {
        continue;
      }
      // add menu default fill values
      $menu_link += array(
        'menu_name' => $menu_name,
        'link_path' => $link_path,
        'weight' => 0,
        //'module' => 'menu', // make menu_link editable in menu admin
      );

      // get current link if it exists
      $existing_link = menu_link_get_preferred($link_path, $menu_name);
      if ($existing_link && is_array($existing_link)) {
if ($path_key == 'view:enterprise_users:page' || $path_key == 'app:enterprise_press') {
  //dsm($existing_link);
}
        $menu_link  += $existing_link;
      }
      if (!isset($menu_link['module'])) {
        $menu_link['module'] = $link_module;
      }

      // process parent link settings
      if (isset($settings['pl_ukey'])) {
        $udesc = array();
        $obj = enterprise_apps_obj_load_by_ukey($settings['pl_ukey'], $udesc);
        if ($path_key == 'view:enterprise_users:page' || $path_key == 'app:enterprise_press') {
          //dsm($obj);
          //dsm($udesc);
        }
        $pl_path = '';
        if ($udesc['type'] == 'node') {
          $pl_path = 'node/' . $obj->nid;
        }
        else if ($udesc['type'] == 'view') {
          if (isset($obj->display[$udesc['display_name']]->display_options['path'])) {
            $link_path = $obj->display[$udesc['display_name']]->display_options['path'];
          }
        }
        if ($pl_path) {
          $parent_item = menu_link_get_preferred('node/' . $obj->nid, $menu_name);
          if (isset($parent_item['mlid'])) {
            $menu_link['plid'] = $parent_item['mlid'];
          }
        }
      }
if ($path_key == 'view:enterprise_users:page' || $path_key == 'app:enterprise_press') {
  //dsm($menu_link);
}
      if (!empty($menu_link)) {
        menu_link_save($menu_link);
      }
    }
  }
}

function enterprise_apps_config_variables($config_settings, $config_info) {
  //dsm($config_settings);
  //dsm($config_info);
  if (!isset($config_settings['variables'])) {
    return;
  }

  foreach ($config_settings['variables'] AS $name => $value) {
    // check if value exists, and if array merge values from setting
    $value0 = variable_get($name, null);
    if (isset($value0) && is_scalar($value0)) {
      $value = drupal_array_merge_deep($value0, $value);
    }
    variable_set($name, $value);
  }
}

function enterprise_apps_config_cta_selectors($config_settings, $config_info) {
//dsm($config_settings);
//dsm($config_info);
  if (!isset($config_settings['cta_selectors'])) {
    return;
  }
  foreach ($config_settings['cta_selectors'] AS $name => $sel) {
    $sel0 = cta_selector_load($name);
    if (isset($sel0['name'])) {
      $sel = drupal_array_merge_deep($sel, $sel0);
    }
//    dsm($sel0);
//    dsm($sel);
    if (isset($sel['name'])) {
      cta_selector_save($sel);
    }

  }

}

function enterprise_apps_get_batch_operation_enable_module($module) {
  $files = &drupal_static(__FUNCTION__);
  if (empty($files)) {
    $files = system_rebuild_module_data();
  }
  $operation = array(
    '_enterprise_apps_enable_module_batch',
    array(
      $module,
      $files[$module]->info['name'],
    ),
  );
  return $operation;
}

function _enterprise_apps_enable_module_batch($module, $module_name, &$context) {
  module_enable(array($module), TRUE);
  $context['results'][] = $module;
  $context['message'] = st('Installed %module module.', array('%module' => $module_name));
}

function enterprise_apps_get_batch_operation_config_app($module) {
  $files = &drupal_static(__FUNCTION__);
  if (empty($files)) {
    $files = system_rebuild_module_data();
  }
  $operation = array(
    '_enterprise_apps_config_app_batch',
    array(
      $module,
      $files[$module]->info['name'],
    ),
  );
  return $operation;
}

/**
 * Batch callback for config app
 * @param $module
 * @param $module_name
 * @param $context
 */
function _enterprise_apps_config_app_batch($module, $module_name, &$context) {
  // check if module/app has app_init function
  enterprise_apps_config_app($module);
  $context['results'][] = $module;
  $context['message'] = t('Configuring %module.', array('%module' => $module_name));
}

// enhancing exportables and adding non exporting features
function enterprise_apps_uuid_entities_features_export_entity_alter(&$entity, $entity_type) {
  if ($entity_type == 'node') {
    // attach exclude_node_title flag to export
    if (module_exists('exclude_node_title')) {
      // nid has been stripped by uuid_entities_features_export_render,
      // so must retrieve nid via uuid
      $ids = entity_get_id_by_uuid('node', array($entity->uuid));
      $nid = $ids[$entity->uuid];
      // check if exclude node title set for node
      $e = _exclude_node_title($nid);
      if ($e) {
        $entity->exclude_node_title = 1;
      }
    }
  }
}

function enterprise_apps_uuid_entities_features_import_entity_alter(&$entity, $entity_type) {
//dsm($entity_type);
//dsm($entity);

  if ($entity->entity_type == 'node') {
    if ($entity->type == 'webform') {
      // if enterprise_landingpages not enabled, remove thankyou page redirect
      if (!drupal_lookup_path($entity->webform['redirect_url'])) {
        $entity->webform['redirect_url'] =  '<confirmation>';
      }
      // remove mailchimp components from webform if mailchimp not enabled
      if (!module_exists('webform_mailchimp')) {
        if (isset($entity->webform['components']) && is_array($entity->webform['components'])) {
          foreach ($entity->webform['components'] AS $i => $comp) {
            if ($comp['type'] == 'mailchimp') {
              unset($entity->webform['components'][$i]);
            }
          }
        }
      }
    }
  }
//dsm($entity);
}

/**
 * Implements hook_entity_dependencies()
 * Used to alter dependences for content deployments in OE
 * @param $entity
 * @param $entity_type
 * @return array
 */
function enterprise_apps_entity_dependencies($entity, $entity_type) {
  if ($entity_type == 'node') {
    $dependencies = array();
    // The node has a 'user' dependency through the 'uid' and
    // 'revision_uid' properties.
    entity_dependency_add($dependencies, $entity, 'user', array('uid', 'revision_uid'));
    // The node has a 'node' dependency through the 'tnid' property.
    entity_dependency_add($dependencies, $entity, 'node', 'tnid');
    return $dependencies;
  }
}

function enterprise_apps_api_property_load($options, &$message = '') {
  if (!intel_verify_library($message)) {
    return FALSE;
  }
  $pkey = isset($options['pkey']) ? $options['pkey'] : variable_get('oeapi_pkey', '-');
  if (!$pkey) {
    $message = t('API property id is not set.');
    return FALSE;
  }
  $apikey = isset($options['apikey']) ? $options['apikey'] : variable_get('oeapi_apikey', '');
  if (!$apikey) {
    $message = t('API key is not set');
    return FALSE;
  }
  intel_include_library_file('class.apiclient.php');
  $apiUrl = (isset($options['apiUrl'])) ? $options['apiUrl'] : variable_get('oeapi_url', '');
  $api_params = variable_get('intel_l10iapi_custom_params', array());
  $apiClientProps = array(
    'apiUrl' => ($apiUrl ? $apiUrl : ENTERPRISE_APPS_OEAPI_URL) . '/' . $pkey . '/',
    'apiConnector' => variable_get('oeapi_connector', ''),
    'apiParams' => $api_params,
    'urlrewrite' => 1,
  );
  $apiclient = new \LevelTen\Intel\ApiClient($apiClientProps);
  $ret = '';
  $params = isset($options['params']) ? $options['params'] : array();
  $data = array(
    'apikey' => $apikey,
  );
  try {
    $ret = $apiclient->getJSON('property', $params, $data);
  }
  catch (Exception $e) {
    $message = $e->getMessage();
  }
  if (!empty($ret['property'])) {
    return (object)$ret['property'];
  }
  else {
    $message = t('API key invalid.') . ' ' . $message;
    return FALSE;
  }
}