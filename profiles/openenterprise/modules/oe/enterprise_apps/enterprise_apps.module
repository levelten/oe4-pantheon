<?php
/**
 * @file
 * Code for the Enterprise CRM feature.
 */


function enterprise_apps_menu() {
  $items = array();

  $items['enterprise_apps/config_app'] = array(
    'title' => 'Config app',
    'page callback' => 'enterprise_apps_config_app_page',
    'access callback' => 'user_access',
    'access arguments' => array('admin enterprise apps'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/features/apps'] = array(
    'title' => 'Apps',
    'description' => 'Apps listing page.',
    'page callback' => 'enterprise_apps_apps_list_page',
    'access callback' => 'user_access',
    'access arguments' => array('admin enterprise apps'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'enterprise_apps.admin.inc'
  );

  $items['admin/structure/features/apps/%/config'] = array(
    'title' => 'Config app',
    'description' => 'Configure app options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('enterprise_apps_config_form', 4),
    'access callback' => 'user_access',
    'access arguments' => array('admin enterprise apps'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'enterprise_apps.admin.inc'
  );

  $items['admin/structure/features/%feature/config_app'] = array(
    'title' => 'Config app',
    'description' => 'Configure app options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('enterprise_apps_feature_config_form', 3),
    'access callback' => 'user_access',
    'access arguments' => array('admin enterprise apps'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -6,
    'file' => 'enterprise_apps.admin.inc'
  );

  $items['enterprise_apps/deploy_add'] = array(
    'title' => 'Deploy add',
    'page callback' => 'enterprise_apps_deploy_add_to_plan',
    'access callback' => 'user_access',
    'access arguments' => array('admin enterprise apps'),
    'type' => MENU_CALLBACK,
  );
  $items['enterprise_apps/deploy_del'] = array(
    'title' => 'Deploy delete',
    'page callback' => 'enterprise_apps_deploy_delete_from_plan',
    'access callback' => 'user_access',
    'access arguments' => array('admin enterprise apps'),
    'type' => MENU_CALLBACK,
  );
  $items['enterprise_apps/init'] = array(
    'title' => 'Enterprise demo init',
    'page callback' => 'enterprise_demo_init_app',
    'access callback' => 'user_access',
    'access arguments' => array('admin enterprise apps'),
    'type' => MENU_CALLBACK,
  );
  $items['enterprise_apps/profile_data_export'] = array(
    'title' => 'Profile data export',
    'page callback' => 'enterprise_apps_profile_data_export',
    'access callback' => 'user_access',
    'access arguments' => array('admin enterprise apps'),
    'file' => 'enterprise_apps.profile.inc',
    'type' => MENU_CALLBACK,
  );
  $items['enterprise_apps/util'] = array(
    'title' => 'Enterprise Apps util',
    'page callback' => 'enterprise_apps_util',
    'access callback' => 'user_access',
    'access arguments' => array('admin enterprise apps'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

// deploy_manager_add_to_plan()
function enterprise_apps_util() {

  $var = variable_get('theme_enterprise_bootstrap_settings');
  dsm($var);

  $var = variable_get('theme_bella_settings');
  dsm($var);


  return '';

}

function enterprise_apps_config_app_page($app) {
  if (!isset($app)) {
    drupal_set_message('No app name provided. Please add an app name to the url.', 'error');
    return '';
  }
  enterprise_apps_config_app($app);

  return t('OK');
}

// entity_types: node, user, taxonomy_term, file, bean, cta
function enterprise_apps_deploy_add_to_plan($plan, $entity_type, $uuid) {
 // $entities = entity_uuid_load('taxonomy_term', array('87755497-3e33-4637-b9fb-c2e2bb61782f'));
  // 70bfeb95-e156-40eb-9b9b-283af20a9820

  if (!isset($plan) || !isset($entity_type) || !isset($uuid) ) {
    drupal_set_message('Input missing. Provide a deployment plan, entity type and uuid using the url pattern plan/entity_type/uuid', 'error');
    return '';
  }
  $entities = entity_uuid_load($entity_type, array($uuid));
  $entity = array_shift($entities);
  deploy_manager_add_to_plan($plan, $entity_type, $entity);

  drupal_set_message(t('@type @title was added to @plan',
    array(
      '@type' => $entity_type,
      '@title' => $entity->title,
      '@plan' => $plan,
    )
  ));

  return t('OK');
}

function enterprise_apps_deploy_delete_from_plan($plan, $entity_type, $uuid) {
  // $entities = entity_uuid_load('taxonomy_term', array('87755497-3e33-4637-b9fb-c2e2bb61782f'));
  // 70bfeb95-e156-40eb-9b9b-283af20a9820

  if (!isset($plan) || !isset($entity_type) || !isset($uuid) ) {
    drupal_set_message('Input missing. Provide a deployment plan, entity type and uuid using the url pattern plan/entity_type/uuid', 'error');
    return '';
  }
  $entities = entity_uuid_load($entity_type, array($uuid));
  $entity = array_shift($entities);
  deploy_manager_delete_from_plan($plan, $entity_type, $entity);

  drupal_set_message(t('@type @title was deleted from @plan',
    array(
      '@type' => $entity_type,
      '@title' => $entity->title,
      '@plan' => $plan,
    )
  ));

  return t('OK');
}

function enterprise_apps_prevent_app_enabled_hook($value = null) {
  if (isset($value)) {
    $_SESSION['enterprise_apps_prevent_app_enabled_hook'] = $value;
  }
  return isset($_SESSION['enterprise_apps_prevent_app_enabled_hook']) ? $_SESSION['enterprise_apps_prevent_app_enabled_hook'] : FALSE;
}

function _enterprise_apps_prevent_app_enabled_hook_batch($value = null, &$context) {
  enterprise_apps_prevent_app_enabled_hook($value);
  $context['results'][] = TRUE;
  if ($value) {
    $context['message'] = st('Enabling app auto config.');
  }
  else {
    $context['message'] = st('Disabling app auto config.');
  }
}

function enterprise_apps_module_files_exist($module) {
  $filename = drupal_get_filename('module', $module);
  if ($filename) {
    return $filename;
  }
  $query = db_select('system', 's')
    ->fields('s')
    ->condition('name', $module);
  $data = $query->execute()->fetchObject();
  if (!empty($data->filename)) {
    return $data->filename;
  }
  return FALSE;
}

/**
 * Implements hook_modules_enabled()
 * @param $modules
 */
function enterprise_apps_modules_enabled($modules) {
 // dsm('enterprise_apps_modules_enabled');dsm($modules);
  $prevent = enterprise_apps_prevent_app_enabled_hook();
  if ($prevent) {
    //dsm('prevent set');
    return;
  }
  else {
    //dsm('prevent set not set');
  }
  // determine modules implementing app_enable hook
  $apps = variable_get('enterprise_apps_apps', array());
  $implements = array();
  foreach ($modules AS $module) {
    $func = $module . '_enterprise_apps_app_enabled';
    if (function_exists($func)) {
      $implements[] = $func;
    }
    $path = drupal_get_path("module", $module) . "/" . $module . ".info";
    $info = drupal_parse_info_file($path);
    if (!empty($info['apps'])) {
      $apps[$module] = 1;
    }
    watchdog('apps_me_' . $module, json_encode($info));
  }
  variable_set('enterprise_apps_apps', $apps);
  // modules_enabled executes before features_api, clear caches is used to force
  // features components to be built before executing app_enabled hook
  if (count($implements)) {
    drupal_flush_all_caches();
    foreach ($implements AS $func) {
      $func();
    }
  }
}

/**
 * Implements hook_module_implements_alter()
 * @param $implementations
 * @param $hook
 */
function enterprise_apps_module_implements_alter(&$implementations, $hook) {
  if ($hook != 'modules_enabled') {
    return;
  }
  $module = 'enterprise_apps';
  $group = array($module => $implementations[$module]);
  unset($implementations[$module]);
  $implementations = $group + $implementations;
}

function enterprise_apps_config_info_all() {
  $config_info = &drupal_static(__FUNCTION__);
  if (isset($config_info)) {
    return $config_info;
  }
  // Select the module-defined sets.
  foreach (module_implements('enterprise_apps_config_info') as $module) {
    $ci = module_invoke($module, 'enterprise_apps_config_info');
//dsm($ci);
    foreach ($ci AS $app_name => $mod_ci) {
      // correct views block names if view name more than 32 chars
      if (isset($mod_ci['blocks']) && is_array($mod_ci['blocks'])) {
        foreach ($mod_ci['blocks'] AS $bname => $bci) {
          list($bmod, $delta) = explode(':', $bname);
          if (($bmod == 'views') && (strlen($delta) >= 32)) {
            $delta = md5($delta);
          }
          $mod_ci['blocks'][$bname]['module'] = $bmod;
          $mod_ci['blocks'][$bname]['delta'] = $delta;
        }
      }
      $config_info[$app_name] = $mod_ci;
      //$config_info[$module]['name'] = $name;
      //$config_info[$module]['module'] = $module;
    }
  }

  drupal_alter('enterprise_apps_config_info', $config_info);
  return $config_info;
}

function enterprise_apps_config_info($app_name) {
  $ci = enterprise_apps_config_info_all();
  return (isset($ci[$app_name])) ? $ci[$app_name] : FALSE;
}

function enterprise_apps_config_settings_all() {
  $settings = &drupal_static(__FUNCTION__);
  if (isset($settings)) {
    return $settings;
  }

  $settings = array();
  // process settings (defaults in config_info)
  $config_infos = enterprise_apps_config_info_all();
  if (!empty($config_infos) && is_array($config_infos)) {
    foreach ($config_infos AS $app_name => $config_info) {
      if (!empty($config_info['blocks']) && is_array($config_info['blocks'])) {
        $settings[$app_name]['blocks'] = array();
        foreach ($config_info['blocks'] AS $block_name => $ci_block) {
          if (isset($ci_block['default'])) {
            $settings[$app_name]['blocks'][$block_name] = $ci_block['default'];
            list($bmod, $delta) = explode(':', $block_name);
            if (($bmod == 'views') && (strlen($delta) >= 32)) {
              $delta = md5($delta);
            }
            $settings[$app_name]['blocks'][$block_name]['module'] = $bmod;
            $settings[$app_name]['blocks'][$block_name]['delta'] = $delta;
          }
        }
      }
      if (isset($config_info['nodes']) && is_array($config_info['nodes'])) {
        $settings['nodes'] = array();
        foreach ($config_info['nodes'] AS $name => $ci_node) {
          if (isset($ci_node['default'])) {
            $settings[$app_name]['nodes'][$name] = $ci_node['default'];
          }
        }
      }
      if (isset($config_info['menus']) && is_array($config_info['menus'])) {
        $settings['menus'] = array();
        foreach ($config_info['menus'] AS $name => $ci_menu) {
          if (isset($ci_menu['default'])) {
            $settings[$app_name]['menus'][$name] = $ci_menu['default'];
          }
        }
      }
    }
  }

  // Process settings in hook_enterprise_apps_config_settings
  foreach (module_implements('enterprise_apps_config_settings') as $module) {
    $ci = module_invoke($module, 'enterprise_apps_config_settings');
    if (empty($ci)) {
      continue;
    }
    foreach ($ci AS $app_name => $mod_ci) {
      // correct views block names if view name more than 32 chars
      if (isset($mod_ci['blocks']) && is_array($mod_ci['blocks'])) {
        foreach ($mod_ci['blocks'] AS $bname => $bci) {
          list($bmod, $delta) = explode(':', $bname);
          if (($bmod == 'views') && (strlen($delta) >= 32)) {
            $delta = md5($delta);
          }
          $mod_ci['blocks'][$bname]['module'] = $bmod;
          $mod_ci['blocks'][$bname]['delta'] = $delta;
        }
      }
      if (!isset($settings[$app_name])) {
        $settings[$app_name] = array();
      }
      $settings[$app_name] = drupal_array_merge_deep($settings[$app_name], $mod_ci);
    }
  }

  drupal_alter('enterprise_apps_config_settings', $settings);
  return $settings;
}

function enterprise_apps_config_settings($app_name) {
  $cs = enterprise_apps_config_settings_all();
  return (isset($cs[$app_name])) ? $cs[$app_name] : FALSE;
}

/**
 * Configures an app using default config info
 * @param $app_name
 */
function enterprise_apps_config_app($app_name, $config_settings = null) {
  $config_info = enterprise_apps_config_info($app_name);
  // if settings not passed as arg, load defaults
  if (!isset($config_settings)) {
    $config_settings = enterprise_apps_config_settings($app_name);
  }
//dsm($config_info);
//dsm($config_settings);
  enterprise_apps_config_entity_info($config_settings, $config_info);
  enterprise_apps_config_blocks($config_settings, $config_info);
  enterprise_apps_config_nodes($config_settings, $config_info);
  enterprise_apps_config_menus($config_settings, $config_info);
  enterprise_apps_config_variables($config_settings, $config_info);
  enterprise_apps_config_permissions($config_settings, $config_info);
  enterprise_apps_config_cta_selectors($config_settings, $config_info);

  // clear all caches just in case
  menu_cache_clear_all();
}



function enterprise_apps_config_blocks($config_settings, $config_info) {
//dsm($config_settings);
//dsm($config_info);
  global $theme_key;
  if (!isset($config_settings['blocks'])) {
    return;
  }
  //$theme = (isset($config_settings['blocks']['themes'])) ? $config_settings['blocks']['themes'] : variable_get('theme_default', NULL);
  //$block_regions = system_region_list($theme);

  // build array of enabled themes and their regions
  $themes = array();

  //$theme_list = list_themes(TRUE);
  // for some reason list_themes does not show themes enabled during install,
  // so using custom query
  $query = db_select('system', 's')
    ->fields('s')
    ->condition('type', 'theme')
    ->condition('status', 1);
  $theme_list = $query->execute()->fetchAllAssoc('name');

  foreach ($theme_list AS $name => $theme) {
    if ($theme->status) {
      $regions = system_region_list($name);
      $themes[$name] = $regions;
    }
  }

  if (!$admin_theme = variable_get('admin_theme')) {
    drupal_theme_initialize();
    $admin_theme = $theme_key;
  }
  $admin_theme_index = -1;
  if ($admin_theme) {
    $query = db_select('system', 's')
      ->fields('s')
      ->condition('type', 'theme')
      ->condition('name', $admin_theme);
    $theme_list = $query->execute()->fetchAllAssoc('name');

    foreach ($theme_list AS $name => $theme) {
      if ($theme->name) {
        $regions = system_region_list($name);
        $themes[$name] = $regions;
        break;
      }
    }
  }

  foreach ($config_settings['blocks'] AS $name => $settings) {
    $ci_block = isset($config_info['blocks'][$name]) ? $config_info['blocks'][$name] : array();

    foreach ($themes AS $theme => $block_regions) {

      // only add blocks to admin theme if it is specified as a theme in
      // $settings['themes'] or the admin_theme prop is set
      if (!empty($settings['themes']) && is_array($settings['themes']) && !in_array($theme, $settings['themes'])) {
        //dsm("continue 1 $theme");
        continue;
      }
      else if (!empty($settings['admin_theme']) && ($theme != $admin_theme)) {
        //dsm("continue 2 $theme");
        continue;
      }
      else if (empty($settings['admin_theme']) && ($theme == $admin_theme)) {
        //dsm("continue 3 $theme");
        continue;
      }
      // get current block if it exists
      //$block0 = block_load($settings['module'], $settings['delta']);
      $query = db_select('block', 'b')
        ->fields('b')
        ->condition('module', $settings['module'])
        ->condition('delta', $settings['delta'])
        ->condition('theme', $theme);
      $block0 = $query->execute()->fetchObject();
      $region = isset($block0->region) ? $block0->region : -1;
      // iterative through possible regions to find one in the theme
      if (isset($settings['regions']) && is_array($settings['regions'])) {
        foreach ($settings['regions'] AS $region_name) {
          if (isset($block_regions[$region_name])) {
            $region = $region_name;
            break;
          }
        }
      }
      else if (isset($settings['regions']) && ($settings['regions'] == -1)) {
        $region = -1;
      }

      $weight = 0;
      $visibility = 0;
      $pages = array();
      $types = array();
      $views = array();
      $block_row = array();

      // add any existing block settings
      if (isset($block0->visibility)) {
        $weight = $block0->weight;
        $visibility = $block0->visibility;
        $pages = drupal_map_assoc(explode(PHP_EOL, $block0->pages));
        $types = drupal_map_assoc(enterprise_apps_block_node_types($settings['module'], $settings['delta']));
        $views = drupal_map_assoc(enterprise_apps_block_views($settings['module'], $settings['delta']));
        $blk = (object) $settings;
        $block_row = (array)block_row($blk);
      }
  //dsm($types);

      // process direct settings
      $weight = isset($settings['weight']) ? $settings['weight'] : $weight;
      $visibility = isset($settings['path']['visibility']) ? $settings['path']['visibility'] : $visibility;
      if (isset($settings['path']['pages'])) {
        $pages = drupal_map_assoc($settings['path']['pages']) + $pages;
      }
      if (isset($settings['node_type']['types'])) {
        $types = drupal_map_assoc($settings['node_type']['types'] + $types);
      }
      if (isset($settings['views']['views'])) {
        $views = drupal_map_assoc($settings['views']['views'] + $views);
      }
      if (isset($settings['block_row'])) {
        $block_row += $settings['block_row'];
      }

      // process any preset settings
      if (isset($settings['visibility_presets']) && is_array($settings['visibility_presets'])) {
        foreach ($settings['visibility_presets'] AS $preset_name) {
          if (isset($ci_block['visibility_presets'][$preset_name])) {
            $preset = $ci_block['visibility_presets'][$preset_name];
          }
          else {
            $preset = array();
          }
  //dsm($preset_name);
  //dsm($preset);

          $preset += array(
            'path' => array(
              'pages' => array(),
              'visibility' => 0,
            ),
            'node_type' => array(
              'types' => array(),
            ),
            'views' => array(
              'views' => array(),
            ),
          );
          $visibility = $preset['path']['visibility'];
          foreach ($preset['path']['pages'] AS $page) {
            $pages[$page] = $page;
          }
          foreach ($preset['node_type']['types'] AS $type) {
            $types[$type] = $type;
          }
          foreach ($preset['views']['views'] AS $view) {
            $views[$view] = $view;
          }
        }
      }

  //dsm($ci_block);
  //dsm($settings);
  //dsm($pages);
  //dsm($types);
  //dsm($views);

      $title = isset($block0->title) ? $block0->title : '';
      if (isset($settings['title'])) {
        $title = $settings['title'];
      }
      $custom = isset($block0->custom) ? $block0->custom : 0;
      if (isset($settings['custom'])) {
        $custom = $settings['custom'];
      }
      $fields = array(
        'title' => $title,
        'region' => ($region) ? $region : -1,
        'status' => ($region) ? 1 : 0,
        'visibility' => (int) $visibility,
        'pages' => implode(PHP_EOL, $pages),
        'custom' => $custom,
        'weight' => $weight,
      );

      if (module_exists('css_class')) {
        if (isset($settings['css_class'])) {
          $fields['css_class'] = $settings['css_class'];
        }
      }

      $key = array(
        'module' => $settings['module'],
        'delta' => $settings['delta'],
        'theme' => $theme,
      );
      $query = db_merge('block')
        ->key($key)
        ->fields($fields);
      $query->execute();

      db_delete('block_node_type')
        ->condition('module', $settings['module'])
        ->condition('delta', $settings['delta'])
        ->execute();
      foreach ($types AS $i => $type) {
        $fields = array(
          'module' => $settings['module'],
          'delta' => $settings['delta'],
          'type' => $type,
        );
        db_insert('block_node_type')
          ->fields($fields)
          ->execute();
      }

      db_delete('block_views')
        ->condition('module', $settings['module'])
        ->condition('delta', $settings['delta'])
        ->execute();
      foreach ($views AS $i => $viewdis) {
        list($view, $display) = explode(':', $viewdis);
        $fields = array(
          'module' => $settings['module'],
          'delta' => $settings['delta'],
          'view' => $view,
          'display' => $display,
        );
        db_insert('block_views')
          ->fields($fields)
          ->execute();
      }

      if (module_exists('block_row')) {
        db_delete('block_row')
          ->condition('module', $settings['module'])
          ->condition('delta', $settings['delta'])
          ->execute();
        if (!empty($block_row['row']) || !empty($block_row['row_class'])) {
          $fields = array(
            'module' => $settings['module'],
            'delta' => $settings['delta'],
            'row' => isset($block_row['row']) ? $block_row['row'] : '',
            'row_class' => isset($block_row['row_class']) ? $block_row['row_class'] : '',
          );
          db_insert('block_row')
            ->fields($fields)
            ->execute();
        }
      }

      if (module_exists('cta') && !empty($settings['cta'])) {
        if ($settings['module'] == 'bean') {
          cta_bean_meta_save($settings['cta'], $settings['delta']);
        }
        else {
          cta_block_meta_save($settings['cta'], $settings['module'], $settings['delta']);
        }
      }
    }
  }
}

function enterprise_apps_block_node_types($module, $delta) {
  $query = db_select('block_node_type', 'b');
  $query->addField('b', 'type');
  $query->condition('module', $module);
  $query->condition('delta', $delta);
  $types = $query->execute()->fetchCol();
  return $types;
}

function enterprise_apps_block_views($module, $delta) {
  $query = db_select('block_views', 'b');
  $query->fields('b');
  $query->condition('module', $module);
  $query->condition('delta', $delta);
  $result = $query->execute();
  $views = array();
  while ($row = $result->fetchObject()) {
    $view = "$row->view:$row->display";
    $views[] = $view;
  }
  return $views;
}

function enterprise_apps_config_nodes($config_settings, $config_info) {
//dsm($config_settings);
//dsm($config_info);
  if (!isset($config_info['nodes']) && !isset($config_settings['nodes'])) {
    return;
  }

  $entity_infos = entity_get_info();
//dsm($entity_infos);

  foreach ($config_settings['nodes'] AS $uuid => $settings) {
    $ci_node = isset($config_info['nodes'][$uuid]) ? $config_info['nodes'][$uuid] : array();

    $node = enterprise_apps_node_load_by_uuid($uuid);

    // skip if node not found
    if (empty($node->nid)) {
      continue;
    }
//dsm($node);
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $lang = $node->language;

    // translate uuids in fields
    $instance_infos = field_info_instances('node', $node->type);

    // fields must be handled differently
    foreach ($settings AS $setting_name => $setting_value) {
      // check if setting is a field
      if (!isset($instance_infos[$setting_name])) {
        continue;
      }
//dsm($instance_infos[$setting_name]);
      $field_info = field_info_field($setting_name);
//dsm($field_info);
      if ($field_info['type'] == 'taxonomy_term_reference') {

        foreach ($setting_value[$lang] AS $i => $value) {
          $id = entity_get_id_by_uuid('taxonomy_term', array($value['tid']));
          $setting_value[$lang][$i]['tid'] = $id[$value['tid']];
        }
        if ($field_info['cardinality'] == 1) {
          $node->{$setting_name}[$lang][0] = $setting_value[$lang][0];
        }
        // TODO this is setup as an override, not sure if merge is better
        else {
          $node->{$setting_name}[$lang] = $setting_value[$lang];
        }
        // remove setting so it is not processed by the final merge
        unset($settings[$setting_name]);
//dsm($setting_value);

      }
      // TODO
      else if ($field_info['type'] == 'entity_reference') {

      }
    }

    // special processing for webform content type
    if (isset($settings['webform'])) {
      if (isset($settings['webform']['components'])
       && isset($node->webform['components'])
      ) {
        // gather all existing form_keys to prevent duplication
        $existing_keys = array();
        foreach ($node->webform['components'] AS $comp) {
          $existing_keys[] = $comp['form_key'];
        }
        foreach ($settings['webform']['components'] AS $i => $comp) {
          // check if key already exists, skip if it does
          if (in_array($comp['form_key'], $existing_keys)) {
            continue;
          }
          $cid = max(array_keys($node->webform['components'])) + 1;
          $comp['cid'] = $cid;
          $comp['nid'] = $node->nid;
          $node->webform['components'][$cid] = $comp;
          // save to existing keys
          $existing_keys[] = $comp['form_key'];
        }
        // clear webform components so they are not included in array_merge
        unset($settings['webform']['components']);
      }
    }

    //$menu_item = menu_get_item('node/' . $node->nid);
//dsm($menu_item);

    if (isset($settings['menu'])) {
      $node->menu = $settings['menu'];
      // if menu enabled not set and menu name exists, set the enable flag
      if (!isset($settings['menu']['enabled']) && !empty($settings['menu']['menu_name'])) {
        $node->menu['enabled'] = 1;
      }
      if (empty($settings['menu']['link_title'])) {
        $node->menu['link_title'] = $node->title;
      }
      if (empty($settings['menu']['weight'])) {
        $node->menu['weight'] = 0;
      }
      if (empty($settings['menu']['description'])) {
        $node->menu['description'] = '';
      }
      // hack to prevent warning from entity module
      $node->menu['module'] = 'enterprise_apps';
      if (isset($settings['parent_uuid'])) {
        $parent_node = enterprise_apps_node_load_by_uuid($settings['parent_uuid']);
        //dsm($parent_node);
      }
      unset($settings['menu']);
    }

    // merge values in
    $node = (object) drupal_array_merge_deep($node, $settings);
//dsm($node);
    node_save($node);
  }


}

function enterprise_apps_parse_ukey($ukey) {
  $desc = array();
  $ukeys = explode(':', $ukey);
  if ($ukeys[0] == 'app' || ($ukeys[0] == 'section')) {
    $app_name = ($ukeys[0] == 'section') ? 'enterprise_' . $ukeys[1] : $ukeys[1];
    $desc['type'] = 'view';
    $desc['alias_type'] = 'app';
    $desc['app_name'] = $app_name;
    $desc['view_name'] = $app_name;
    $desc['display_name'] = isset($ukeys[2]) ? $ukeys[2] : 'page';
  }
  else if (($ukeys[0] == 'views') || ($ukeys[0] == 'view')) {
    $desc['type'] = 'view';
    $desc['view_name'] = $ukeys[1];
    if (isset($ukeys[2])) {
      $desc['display_name'] = $ukeys[2];
    }
  }
  else if ($ukeys[0] == 'block') {
    $desc['type'] = 'block';
    $desc['module'] = $ukeys[1];
    $desc['delta'] = $ukeys[2];
  }
  else if ($ukeys[0] == 'entity') {
    $desc['entity'] = TRUE;

    // pop first element off
    array_shift($ukeys);
  }
  else if ($ukeys[0] == 'path') {
    $desc['type'] = 'path';
    $desc['path'] = $ukeys[1];
  }
  else if ($ukeys[0] == 'menu_link') {
    $desc['type'] = 'menu_link';
    $desc['path'] = $ukeys[1];
  }

  if ($ukeys[0] == 'node') {
    $desc['type'] = 'node';
    $desc['uuid'] = $ukeys[1];
  }
  else if ($ukeys[0] == 'user') {
    $desc['type'] = 'user';
    $desc['uuid'] = $ukeys[1];
  }

  return $desc;
}

function enterprise_apps_obj_load_by_ukey($ukey, &$desc = array()) {
  $desc = enterprise_apps_parse_ukey($ukey);

  if ($desc['type'] == 'node') {
    $obj = enterprise_apps_node_load_by_uuid($desc['uuid']);
  }
  if ($desc['type'] == 'view') {
    $obj = views_get_view($desc['view_name']);
    //if (isset($desc['display_name'])) {
    //  $obj = $obj->display[$desc['display_name']];
    //}
  }
  if ($desc['type'] == 'path') {
    $obj = menu_get_item($desc['path']);
  }
  if ($desc['type'] == 'menu_link') {
    $query = db_select('menu_links' , 'ml')
      ->condition('ml.link_path' , $desc['path'])
      ->condition('ml.menu_name' , 'main-menu')
      ->fields('ml');
    $obj = $query->execute()->fetchObject();
  }
  if (!empty($obj)) {
    return $obj;
  }
  return FALSE;
}

function enterprise_apps_node_load_by_uuid($uuid) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('uuid', $uuid);
  $nid = $query->execute()->fetchField();
  if (!$nid) {
    return FALSE;
  }
  $node = node_load($nid);
  return $node;
}

function enterprise_apps_config_menus($config_settings, $config_info) {
  //dsm($config_settings);
  //dsm($config_info);
  if (!isset($config_settings['menus'])) {
    return;
  }

  foreach ($config_settings['menus'] AS $menu_name => $ci_menu) {
    $menu_link_defaults = array(
      'menu_name' => $menu_name,
      'weight' => 0,
      'module' => 'menu',
    );
    foreach ($config_settings['menus'][$menu_name] AS $path_key => $settings) {
      // init menu_link with settings
      $menu_link = $settings;
      $link_path = '';
      $link_module = 'menu';

      $path_ukey_desc = array();
      $obj = enterprise_apps_obj_load_by_ukey($path_key, $path_ukey_desc);
      // if linked to object does not exist, skip menu link add
      if (empty($obj)) {
        continue;
      }
if ($path_key == 'view:enterprise_users:page' || $path_key == 'app:enterprise_press') {
  //dsm("$menu_name:$path_key");
  //dsm($obj);
  //dsm($path_ukey_desc);
}

      if ($path_ukey_desc['type'] == 'node') {
        $link_path  = 'node/' . $obj->nid;
        $menu_link += array(
          'link_title' => $obj->title,
        );
      }
      if ($path_ukey_desc['type'] == 'view') {
        $display = $obj->display[$path_ukey_desc['display_name']];
        $display_title = isset($display->display_options['title']) ? $display->display_options['title'] : '';
        // if display does not have title, check the default title
        if (!$display_title) {
          $display_title = isset($obj->display['default']->display_options['title']) ? $obj->display['default']->display_options['title'] : '';
        }
        $link_path = $display->display_options['path'];
        $link_module = 'system';
        $views_menu = array();
        // process views menu specific settings
        if (isset($menu_link['views_menu'])) {
          $views_menu += $menu_link['views_menu'];
          unset($menu_link ['views_menu']);
        }
        // TODO not sure if we need to save the views menu item anymore
        $views_menu = array(
          'type' => 'normal',
          'title' => isset($settings['link_title']) ? $settings['link_title'] : $display_title,
          'description' => isset($settings['description']) ? $settings['description'] : '',
          'name' => $menu_name,
          'weight' => isset($settings['weight']) ? $settings['weight'] : 0,
          'context' => 0,
          'context_only_inline' => 0,
        );
        // set menu data on views display and save
        $obj->display[$path_ukey_desc['display_name']]->display_options['menu'] = $views_menu;
        $obj->save();

        $menu_link += array(
          'link_title' => $display_title,
        );

      }
      if ($path_ukey_desc['type'] == 'menu_link' && !empty($obj->link_path)) {
        $link_path = $obj->link_path;
      }
      if (!$link_path) {
        continue;
      }
      // add menu default fill values
      $menu_link += array(
        'menu_name' => $menu_name,
        'link_path' => $link_path,
        'weight' => 0,
        //'module' => 'menu', // make menu_link editable in menu admin
      );

      // get current link if it exists
      $existing_link = menu_link_get_preferred($link_path, $menu_name);
      if ($existing_link && is_array($existing_link)) {
if ($path_key == 'view:enterprise_users:page' || $path_key == 'app:enterprise_press') {
  //dsm($existing_link);
}
        $menu_link  += $existing_link;
      }
      if (!isset($menu_link['module'])) {
        $menu_link['module'] = $link_module;
      }

      // process parent link settings
      if (isset($settings['pl_ukey'])) {
        $udesc = array();
        $obj = enterprise_apps_obj_load_by_ukey($settings['pl_ukey'], $udesc);
        if ($path_key == 'view:enterprise_users:page' || $path_key == 'app:enterprise_press') {
          //dsm($obj);
          //dsm($udesc);
        }
        $pl_path = '';
        if ($udesc['type'] == 'node') {
          $pl_path = 'node/' . $obj->nid;
        }
        else if ($udesc['type'] == 'view') {
          if (isset($obj->display[$udesc['display_name']]->display_options['path'])) {
            $link_path = $obj->display[$udesc['display_name']]->display_options['path'];
          }
        }
        if ($pl_path) {
          $parent_item = menu_link_get_preferred('node/' . $obj->nid, $menu_name);
          if (isset($parent_item['mlid'])) {
            $menu_link['plid'] = $parent_item['mlid'];
          }
        }
      }
if ($path_key == 'view:enterprise_users:page' || $path_key == 'app:enterprise_press') {
  //dsm($menu_link);
}
      if (!empty($menu_link)) {
        menu_link_save($menu_link);
      }
    }
  }
}

function enterprise_apps_config_variables($config_settings, $config_info) {
  //dsm($config_settings);
  //dsm($config_info);
  if (!isset($config_settings['variables'])) {
    return;
  }

  foreach ($config_settings['variables'] AS $name => $value) {
    // check if value exists, and if array merge values from setting
    $value0 = variable_get($name, null);
    if (isset($value0) && !is_scalar($value0)) {
      $value = drupal_array_merge_deep($value0, $value);
    }
    variable_set($name, $value);
  }
}

function enterprise_apps_config_permissions($config_settings, $config_info) {
  //dsm($config_settings);
  //dsm($config_info);
  if (!isset($config_settings['permissions'])) {
    return;
  }

  $existing = &drupal_static(__FUNCTION__);
  if (!isset($existing)) {
    $existing = module_invoke_all('permission');
  }

  $roles = user_roles();
  foreach ($config_settings['permissions'] AS $name => $perms) {
    $role = user_role_load_by_name($name);
    if (!empty($role) && !empty($role->rid)) {
      // check if the permission exists (e.g. module is enabled), if not remove
      // permission
      foreach ($perms as $perm_name => $v) {
        if (!isset($existing[$perm_name])) {
          unset($perms[$perm_name]);
        }
      }
      user_role_change_permissions($role->rid, $perms);
    }
  }
}

function enterprise_apps_config_cta_selectors($config_settings, $config_info) {
//dsm($config_settings);
//dsm($config_info);
  if (!isset($config_settings['cta_selectors'])) {
    return;
  }
  foreach ($config_settings['cta_selectors'] AS $name => $sel) {
    $sel0 = cta_selector_load($name);
    if (isset($sel0['name'])) {
      $sel = drupal_array_merge_deep($sel, $sel0);
    }
//    dsm($sel0);
//    dsm($sel);
    if (isset($sel['name'])) {
      cta_selector_save($sel);
    }

  }

}

function enterprise_apps_config_entity_info($config_settings, $config_info) {
  if (!isset($config_settings['entity_info'])) {
    return;
  }
  foreach ($config_settings['entity_info'] AS $entity_ukey => $entity_settings) {
    list($entity_type, $bundle) = explode(':', $entity_ukey);
    foreach ($entity_settings as $component => $comp_settings) {
      if ($component == 'field_instance') {
        enterprise_apps_config_entity_info_field_instance($entity_type, $bundle, $comp_settings);
      }
      else if ($component == 'field_group') {
        enterprise_apps_config_entity_info_field_group($entity_type, $bundle, $comp_settings);
      }
    }

  }
}

function enterprise_apps_config_entity_info_field_instance($entity_type, $bundle, $comp_settings, $source_entity_type = NULL, $source_bundle = NULL) {

  foreach ($comp_settings as $field_name => $settings) {
    $instance0 = array();
    $instance1 = field_info_instance($entity_type, $field_name, $bundle);
    $action = 'update';
    if (!empty($instance1) && !$settings) {
      $action = 'delete';
    }
    else if (!empty($settings)) {
      if (isset($source_entity_type) && isset($source_bundle) ) {
        $instance0 = field_info_instance($source_entity_type, $field_name, $source_bundle);
      }
      else {
        $instance0 = field_info_instance($entity_type, $field_name, 'enterprise_etmaster');
        if (empty($instance0)) {
          $instance0 = field_info_instance($entity_type, $field_name, 'enterprise_etsource');
        }
      }

      if (empty($instance1) && !empty($instance0)) {
        $instance1 = $instance0;
        $instance1['bundle'] = $bundle;
        unset($instance1['id']);
        $action = 'create';
      }
    }
    else {
      continue;
    }

    // ignore field if instance not available
    if (empty($instance1)) {
      continue;
    }

    if (is_array($settings)) {
      $instance1 = drupal_array_merge_deep($settings, $instance1);
    }

    if ($action == 'create') {
      field_create_instance($instance1);
    }
    else if ($action == 'update') {
      field_update_instance($instance1);
    }
    else if ($action == 'delete') {
      field_delete_instance($instance1);
    }
  }
}

function enterprise_apps_config_entity_info_field_group($entity_type, $bundle, $comp_settings, $source_entity_type = NULL, $source_bundle = NULL) {
  $group_mode = 'form';

  // fetch groups from destination content type
  $groups1 = field_group_info_groups($entity_type, $bundle, $group_mode);

  // fetch groups from source content types
  $groups0 = field_group_info_groups($entity_type, 'enterprise_etmaster', $group_mode);
  $groups0 = array_merge($groups0, field_group_info_groups($entity_type, 'enterprise_etsource', $group_mode));

  foreach ($comp_settings as $group_name => $settings) {
    $instance0 = !empty($groups0[$group_name]) ? $groups0[$group_name] : array();
    $instance1 = !empty($groups1[$group_name]) ? $groups1[$group_name] : array();
    $action = 'update';
    if (!empty($instance1) && !$settings) {
      $action = 'delete';
    }
    else if (!empty($settings)) {
      if (empty($instance1) && !empty($instance0)) {
        $instance1 = $instance0;
        $instance1->identifier = $group_name . '|' . $entity_type . '|' . $bundle . '|' . $group_mode;
        $instance1->bundle = $bundle;
        $instance1->entity_type = $entity_type;
        if (isset($instance1->id)) {
          unset($instance1->id);
        }
        if (isset($instance1->export_type)) {
          unset($instance1->export_type);
        }
        $action = 'create';
      }
    }
    else {
      continue;
    }

    // ignore field group if instance not available
    if (empty($instance1)) {
      continue;
    }

    if (is_array($settings)) {
      $instance1 = drupal_array_merge_deep($settings, $instance1);
    }

    if ($action == 'create') {
      ctools_export_crud_save('field_group', $instance1);
      ctools_export_crud_enable('field_group', $instance1->identifier);
    }
    else if ($action == 'update') {
      field_group_group_save($instance1);
    }
    else if ($action == 'delete') {
      field_delete_instance($instance1);
    }
  }
}

function enterprise_apps_get_batch_operation_enable_module($module) {
  $files = &drupal_static(__FUNCTION__);
  if (empty($files)) {
    $files = system_rebuild_module_data();
  }
  $operation = array(
    '_enterprise_apps_enable_module_batch',
    array(
      $module,
      $files[$module]->info['name'],
    ),
  );
  return $operation;
}

function _enterprise_apps_enable_module_batch($module, $module_name, &$context) {
  module_enable(array($module), TRUE);
  $context['results'][] = $module;
  $context['message'] = st('Installed %module module.', array('%module' => $module_name));
}

function enterprise_apps_get_batch_operation_config_app($module) {
  $files = &drupal_static(__FUNCTION__);
  if (empty($files)) {
    $files = system_rebuild_module_data();
  }
  $operation = array(
    '_enterprise_apps_config_app_batch',
    array(
      $module,
      $files[$module]->info['name'],
    ),
  );
  return $operation;
}

/**
 * Batch callback for config app
 * @param $module
 * @param $module_name
 * @param $context
 */
function _enterprise_apps_config_app_batch($module, $module_name, &$context) {
  // check if module/app has app_init function
  enterprise_apps_config_app($module);
  $context['results'][] = $module;
  $context['message'] = t('Configuring %module.', array('%module' => $module_name));
}

// enhancing exportables and adding non exporting features
function enterprise_apps_uuid_entities_features_export_entity_alter(&$entity, $entity_type) {
  if ($entity_type == 'node') {
    // attach exclude_node_title flag to export
    if (module_exists('exclude_node_title')) {
      // nid has been stripped by uuid_entities_features_export_render,
      // so must retrieve nid via uuid
      $ids = entity_get_id_by_uuid('node', array($entity->uuid));
      $nid = $ids[$entity->uuid];
      // check if exclude node title set for node
      $e = _exclude_node_title($nid);
      if ($e) {
        $entity->exclude_node_title = 1;
      }
    }
  }
}

function enterprise_apps_uuid_entities_features_import_entity_alter(&$entity, $entity_type) {
//dsm($entity_type);
//dsm($entity);

  if ($entity->entity_type == 'node') {
    if ($entity->type == 'webform') {
      // if enterprise_landingpages not enabled, remove thankyou page redirect
      if (!drupal_lookup_path($entity->webform['redirect_url'])) {
        $entity->webform['redirect_url'] =  '<confirmation>';
      }
      // remove mailchimp components from webform if mailchimp not enabled
      if (!module_exists('webform_mailchimp')) {
        if (isset($entity->webform['components']) && is_array($entity->webform['components'])) {
          foreach ($entity->webform['components'] AS $i => $comp) {
            if ($comp['type'] == 'mailchimp') {
              unset($entity->webform['components'][$i]);
            }
          }
        }
      }
    }
  }
  // adjust user roles to match correct ids
  if ($entity->entity_type == 'user') {
    if (!empty($entity->roles)) {
      $new = array();
      foreach ($entity->roles as $name) {
        $role = user_role_load_by_name($name);
        if (!empty($role) && !empty($role->rid)) {
          $new[$role->rid] = $name;
        }
      }
      $entity->roles = $new;
    }

  }
  //dsm($entity);
}

/**
 * Implements hook_entity_dependencies()
 * Used to alter dependences for content deployments in OE
 * @param $entity
 * @param $entity_type
 * @return array
 */
function enterprise_apps_entity_dependencies($entity, $entity_type) {
  if ($entity_type == 'node') {
    $dependencies = array();
    // The node has a 'user' dependency through the 'uid' and
    // 'revision_uid' properties.
    entity_dependency_add($dependencies, $entity, 'user', array('uid', 'revision_uid'));
    // The node has a 'node' dependency through the 'tnid' property.
    entity_dependency_add($dependencies, $entity, 'node', 'tnid');
    return $dependencies;
  }
}

function enterprise_apps_api_property_load($options, &$message = '') {
  if (!intel_verify_library($message)) {
    return FALSE;
  }
  $pkey = isset($options['pkey']) ? $options['pkey'] : variable_get('oeapi_pkey', '-');
  if (!$pkey) {
    $message = t('API property id is not set.');
    return FALSE;
  }
  $apikey = isset($options['apikey']) ? $options['apikey'] : variable_get('oeapi_apikey', '');
  if (!$apikey) {
    $message = t('API key is not set');
    return FALSE;
  }
  intel_include_library_file('class.apiclient.php');
  $apiUrl = (isset($options['apiUrl'])) ? $options['apiUrl'] : variable_get('oeapi_url', '');
  $api_params = variable_get('intel_l10iapi_custom_params', array());
  $apiClientProps = array(
    'apiUrl' => ($apiUrl ? $apiUrl : ENTERPRISE_APPS_OEAPI_URL) . '/' . $pkey . '/',
    'apiConnector' => variable_get('oeapi_connector', ''),
    'apiParams' => $api_params,
    'urlrewrite' => 1,
  );
  $apiclient = new \LevelTen\Intel\ApiClient($apiClientProps);
  $ret = '';
  $params = isset($options['params']) ? $options['params'] : array();
  $data = array(
    'apikey' => $apikey,
  );
  try {
    $ret = $apiclient->getJSON('property', $params, $data);
  }
  catch (Exception $e) {
    $message = $e->getMessage();
  }
  if (!empty($ret['property'])) {
    return (object)$ret['property'];
  }
  else {
    $message = t('API key invalid.') . ' ' . $message;
    return FALSE;
  }
}

function enterprise_apps_get_app_project_name($name) {
  $path = drupal_get_path('module', $name) . '/' . $name . '.info';
  $info = drupal_parse_info_file($path);
  if (!empty($info['apps']['project'])) {
    return $info['apps']['project'];
  }
  return $name;
}

function enterprise_apps_get_apps_info() {
  $info = &drupal_static(__FUNCTION__);
  if (isset($info)) {
    return $info;
  }
  $info = array();
  $modules = module_list();
  foreach ($modules as $module) {
    $file = drupal_get_path('module', $module) . "/$module.info";
    $fi = drupal_parse_info_file($file);
    if (!empty($fi['apps'])) {
      $app_name = !empty($fi['apps']['project']) ? $fi['apps']['project'] : $module;
      if (!isset($fi[$app_name] )) {
        $info[$app_name] = array(
          'modules' => array(),
        );
      }
      $info[$app_name]['modules'][$module] = $module;
      if (empty($info[$app_name]['name'])) {
        $info[$app_name]['name'] = $fi['name'];
      }
      if (empty($info[$app_name]['description'])) {
        $info[$app_name]['description'] = $fi['description'];
      }
      //$info[$app_name] = drupal_array_merge_deep($fi['apps'], $info[$app_name]);
      $info[$app_name] = drupal_array_merge_deep($info[$app_name], $fi['apps']);

    }
  }
  return $info;
}

function enterprise_apps_form_alter(&$form, &$form_state, $form_id) {

}

function enterprise_apps_form_features_export_form_alter(&$form, &$form_state) {
  if ($form['info']['package']['#default_value'] == 'Open Enterprise Config') {
    if (isset($form['advanced']['generate_path']['#default_value']) && empty($form['advanced']['generate_path']['#default_value'])) {
      $form['advanced']['generate_path']['#default_value'] = 'sites/all/modules/_config';
    }

    /*
    $submit = array('enterprise_apps_form_features_export_form_migrate_submit');
    $submit = array_merge($submit, $form['advanced']['generate']['#submit']);
    $form['advanced']['apps_config_migrate'] = array(
      '#type' => 'submit',
      '#value' => t('Migrate config to site'),
      '#submit' => $submit,
    );
    */
    /*
    $form['advanced']['apps_config_migrate'] = array(
      '#type' => 'checkbox',
      '#title' => t('Migrate config from profile to site'),
      '#weight' => -1,
    );
    */

    // insert checkbox below generate_path field. No weights are on fields,
    // so have to use location in array
    $n = array();
    foreach ($form['advanced'] as $k => $v) {
      $n[$k] = $v;
      if ($k == 'generate_path') {
        $n['apps_config_migrate'] = array(
          '#type' => 'checkbox',
          '#title' => t('Migrate config from profile to site'),
        );
      }
    }
    $form['advanced'] = $n;
  }
  //$form['advanced']['generate']['#validate'] = array();
  //$form['advanced']['generate']['#validate'][] = 'enterprise_apps_form_features_export_form_validate';
  $form['#validate'][] = 'enterprise_apps_form_features_export_form_validate';
}

function enterprise_apps_form_features_export_form_validate(&$form, &$form_state) {
  $values = &$form_state['values'];
  if (!empty($values['apps_config_migrate'])) {
    if (empty($values['generate_path'])) {
      $values['generate_path'] = 'sites/all/modules/_config';
    }
    $values['package'] = 'Site Config';
  }
}

/**
 * Implements hook_features_pipe_COMPONENT_alter().
 */
function enterprise_apps_features_pipe_node_alter(&$pipe, $data, $export) {
  foreach ($data as $node_type) {
    $pipe['field_instance'][] = "comment-comment_node_{$node_type}-comment_body";
    $pipe['variable'][] = "metatag_enable_node_{$node_type}";
  }
}


/**********************************************************
 * Alter hooks to support apps info settings
 */

/* TODO migrating apps options configuration from curated app.
  need to think through best way to do this when. Big question: with the hooks
  we are using we don't know the context of the app. What is the best way
  to determine that.
function enterprise_apps_field_default_field_bases_alter(&$fields) {
  $config_info = enterprise_apps_config_info_all();
  foreach ($fields AS $field_name => $field) {
    if (substr($field_name, -5) == '_tags') {
      $a = explode('_', $field_name);
      dsm($a);
      array_shift($a);
      $tax = array_pop($a);
      $app_name = 'enterprise_' . implode('_', $a);
      dsm($app_name);
      dsm($config_info);
      if (!isset($config_info[$app_name])) {
        continue;
      }
    }
  }
  return;
  $settings = enterprise_curated_app_settings();
  if (isset($fields['field_curated_categories'])) {
    if (isset($settings['taxonomy_categories'])) {
      if (($settings['taxonomy_categories'] === FALSE) || ($settings['taxonomy_categories'] != 'curated_categories')) {
        unset($fields['field_curated_categories']);
      }
    }
    //dsm('enterprise_curated_field_default_field_bases_alter');
    //dsm($fields);
  }
  if (isset($fields['field_curated_tags'])) {
    if (isset($settings['taxonomy_tags'])) {
      if (($settings['taxonomy_tags'] === FALSE) || ($settings['taxonomy_tags'] != 'curated_tags')) {
        unset($fields['field_curated_tags']);
      }
    }
    //dsm('enterprise_curated_field_default_field_bases_alter');
    //dsm($fields);
  }
}

function enterprise_apps_field_default_field_instances_alter(&$fields) {
  dsm($fields);
  $config_info = enterprise_apps_config_info_all();
  dsm($config_info);
  return;
  $settings = enterprise_curated_app_settings();
  if (isset($fields['node-enterprise_curated-field_curated_categories'])) {
    if (isset($settings['taxonomy_categories'])) {
      if ($settings['taxonomy_categories'] === FALSE) {
        unset($fields['node-enterprise_curated-field_curated_categories']);
      }
      else {
        $fields['node-enterprise_curated-field_curated_categories']['field_name'] = 'field_' . $settings['taxonomy_categories'];
      }
    }
    //dsm('enterprise_curated_field_default_field_instances_alter');
    //dsm($fields);
  }
  if (isset($fields['node-enterprise_curated-field_curated_tags'])) {
    if (isset($settings['taxonomy_tags'])) {
      if ($settings['taxonomy_tags'] === FALSE) {
        unset($fields['node-enterprise_curated-field_curated_tags']);
      }
      else {
        $fields['node-enterprise_curated-field_curated_tags']['field_name'] = 'field_' . $settings['taxonomy_tags'];
      }
    }
    //dsm('enterprise_curated_field_default_field_instances_alter');
    //dsm($fields);
  }
}
*/